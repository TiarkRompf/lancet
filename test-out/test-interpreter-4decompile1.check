// constants: <function1>,<function0>,lancet.interpreter.TestInterpreter4@a9f3894
class Generated0(CONST_0: lancet.interpreter.TestInterpreter4$$anonfun$test1$1$$anonfun$1,CONST_1: lancet.interpreter.TestInterpreter4$$anonfun$test1$1,CONST_2: lancet.interpreter.TestInterpreter4) extends (scala.collection.Seq[_]=>scala.collection.Seq[_]){
import sun.misc.Unsafe
val unsafe = { val fld = classOf[Unsafe].getDeclaredField("theUnsafe"); fld.setAccessible(true); fld.get(classOf[Unsafe]).asInstanceOf[Unsafe]; }
type char = Char
def WARN = assert(false, "WARN")
def ERROR = assert(false, "ERROR")
def apply(ARG: scala.collection.Seq[_]): scala.collection.Seq[_] = { object BODY {
  var RES = null.asInstanceOf[scala.collection.Seq[_]]
  val x0 = ARG
  val x1 = unsafe.allocateInstance(Class.forName("lancet.interpreter.TestInterpreter4$$anonfun$test1$1$$anonfun$1$$anonfun$apply$1"))
  unsafe.putObject(x1,12L, CONST_0)
  val x8 = x0.asInstanceOf[Traversable[Object]].filter { (x2:Object) => {
      var RES = null.asInstanceOf[Object]
      val x3 = x2.asInstanceOf[lancet.interpreter.TestInterpreter4$Person] // checkCast
      // unique method: HotSpotMethod<TestInterpreter4$Person.age()> TODO: guard
      val x4 = unsafe.getInt(x3,12L)
      val x5 = 42 <= x4
      if (x5) {
        val PHI_4_5 = 0 // LUBC(PHI_4_5:Int,0:Int)
        BLOCK_21(PHI_4_5,x0,x1,x2,x3,x4,x5)
      } else {
        val PHI_4_5 = 1 // LUBC(PHI_4_5:Int,1:Int)
        BLOCK_21(PHI_4_5,x0,x1,x2,x3,x4,x5)
      }
      def BLOCK_21(PHI_4_5:Int,x0:scala.collection.Seq[_],x1:Object,x2:Object,x3:Object,x4:Int,x5:Boolean): Unit = {
        val x6 = PHI_4_5 == 1
        val x7 = x6.asInstanceOf[java.lang.Boolean]
        (RES = x7) // return to root
      }
      // (no return?)
      RES.asInstanceOf[Boolean]
  }}
  val x9 = x8.asInstanceOf[scala.collection.Seq[_]] // checkCast
  (RES = x9) // return to root
  // (no return?)
}; BODY.RES }
}

compilation: ok
<decompiled>
