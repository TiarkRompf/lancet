----
*** prog: val b = new { zb => 
  Foo -> (⊥,⊤)
  Inner -> (⊥,{ zi => 
    Bar -> (⊥,⊤)
    z -> zi.Bar ∧ zb.Foo
  })
  x -> zb.Foo
} { }
val a = new b.Inner ∧ { zf => 
  self -> zf
} { }
val c = a
c.self.z
*** tp: c.Bar ∧ b.Foo
----
*** prog: val b = new { zb => 
  Foo -> (⊥,⊤)
  Inner -> (⊥,{ zi => 
    Bar -> (⊥,⊤)
    outerFoo -> (zb.Foo,zb.Foo)
    foo -> (x,⊤,zb.Foo)
  })
  x -> zb.Foo
} { }
val a = new b.Inner ∧ { zf => 
  self -> zf
} { }
val c = a
val r = c.self.foo(a)
r
*** tp: b.Foo
a.self <: b.Inner (true)
true
b.Inner <: a.self (false)
false
a.self <: c (true)
true
c <: a.self (true)
true
a.outerFoo <: b.Foo (true)
true
b.Foo <: a.outerFoo (true)
true
----
*** prog: val z = new { zz => 
  L -> (⊥,zz.L)
} { }
z
*** tp: #z = { zz => 
  L -> (⊥,zz.L)
}
expand z.L
DObj(Map(),Map(),Map())
----
*** prog: val u = new { zu => 
  X -> (u.Lower,u.Upper)
  Lower -> (u.Bad ∧ u.Good,u.Good)
  Good -> ({ z1 => 
    L -> (⊥,⊤)
  },{ z1 => 
    L -> (⊥,⊤)
  })
  Upper -> (u.Good,u.Bad ∨ u.Good)
  Bad -> (⊥,u.Bad)
} { }
u
*** tp: #u = { zu => 
  X -> (u.Lower,u.Upper)
  Lower -> (u.Bad ∧ u.Good,u.Good)
  Good -> ({ z1 => 
    L -> (⊥,⊤)
  },{ z1 => 
    L -> (⊥,⊤)
  })
  Upper -> (u.Good,u.Bad ∨ u.Good)
  Bad -> (⊥,u.Bad)
}
Map(S -> u.Bad ∧ u.Good, T -> u.Lower, U -> u.X ∧ { z3 => 
  L -> (⊥,⊤)
})
S<:T (true)
true
T<:U (true)
true
S<:U (true)
true
U<:S (false)
false
----
*** prog: val b = new { zb => 
  Foo -> (⊥,⊤)
  Inner -> (⊥,{ zi => 
    Bar -> (⊥,⊤)
    outerFoo -> (zb.Foo,zb.Foo)
    obj -> zi.Bar
    foo -> (x,zb.Inner,x.Bar)
  })
  x -> zb.Foo
} { }
val a = new b.Inner ∧ { zf => 
  self -> zf
} { }
val c = a
val r = c.self.foo(a.self)
r
*** tp: a.self.Bar
should have r: a.Bar = c.Bar (true)
true
