// constants: <function1>,lancet.interpreter.TestInterpreter3$Bar@4d9eb37d
class Generated(CONST_0: lancet.interpreter.TestInterpreter3$$anonfun$testB1$1$$anonfun$4,CONST_1: lancet.interpreter.TestInterpreter3$Bar) extends (Int=>Int){
import sun.misc.Unsafe
val unsafe = { val fld = classOf[Unsafe].getDeclaredField("theUnsafe"); fld.setAccessible(true); fld.get(classOf[Unsafe]).asInstanceOf[Unsafe]; }
type char = Char
def WARN = assert(false, "WARN")
def ERROR = assert(false, "ERROR")
def apply(ARG: Int): Int = { object BODY {
  var RES = null.asInstanceOf[Int]
  val x0 = ARG
  val x1 = x0.asInstanceOf[Int]
  val x2 = 0.asInstanceOf[Int] >= x1
  val x6 = if (x2) {
    val x3 = (RES = 7.asInstanceOf[Int]) // return to root
    x3
  } else {
    val x4 = unsafe.putInt(CONST_1.asInstanceOf[Object],16.asInstanceOf[Long], 9.asInstanceOf[Int])
    val x5 = (RES = 9.asInstanceOf[Int]) // return to root
    x5
  }
}; BODY.RES }
}

compilation: ok
9
