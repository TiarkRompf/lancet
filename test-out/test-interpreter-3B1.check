// constants: <function1>,lancet.interpreter.TestInterpreter3$Bar@1e98184
class Generated(CONST_0: lancet.interpreter.TestInterpreter3$$anonfun$testB1$1$$anonfun$4,CONST_1: lancet.interpreter.TestInterpreter3$Bar) extends (Int=>Int){
import sun.misc.Unsafe
val unsafe = { val fld = classOf[Unsafe].getDeclaredField("theUnsafe"); fld.setAccessible(true); fld.get(classOf[Unsafe]).asInstanceOf[Unsafe]; }
type char = Char
def WARN = assert(false, "WARN")
def ERROR = assert(false, "ERROR")
def apply(ARG: Int): Int = { object BODY {
  var RES = null.asInstanceOf[Int]
  val x0 = ARG
  val x1 = x0.asInstanceOf[Int]
  val x2 = 0.asInstanceOf[Int] >= x1
  if (x2) {
    val x4 = unsafe.getInt(CONST_1.asInstanceOf[Object],16.asInstanceOf[Long])
    val LUB_CONST_1_intField = x4 // XXX LUBC(Some(LUB_CONST_1_intField),None)
    BLOCK_4(LUB_CONST_1_intField,x0,x1,x2)
  } else {
    unsafe.putInt(CONST_1.asInstanceOf[Object],16.asInstanceOf[Long], 9.asInstanceOf[Int])
    ;{
      val LUB_CONST_1_intField = 9.asInstanceOf[Int] // Alias(Some(LUB_CONST_1_intField),Some(9.asInstanceOf[Int]))
      BLOCK_4(LUB_CONST_1_intField,x0,x1,x2)
    }
  }
  // 14:<TestInterpreter3$$anonfun$testB1$1$$anonfun$4.apply$mcII$sp>HotSpotSignature<(I)I> // 5:<TestInterpreter3$$anonfun$testB1$1$$anonfun$4.apply>HotSpotSignature<(I)I> // 0:<BytecodeInterpreter_Exec.execute>HotSpotSignature<(Ljava/lang/reflect/Method;[Ljava/lang/Object;)Ljava/lang/Object;>
  def BLOCK_4(LUB_CONST_1_intField:Int,x0:Int,x1:Int,x2:Boolean): Unit = {
    (RES = LUB_CONST_1_intField) // return to root
  }
  // (no return?)
}; BODY.RES }
}

compilation: ok
9
