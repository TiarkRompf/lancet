// constants: <function1>,<function0>,lancet.interpreter.TestInterpreter4@a9f3894
class Generated0(CONST_0: lancet.interpreter.TestInterpreter4$$anonfun$test2$1$$anonfun$2,CONST_1: lancet.interpreter.TestInterpreter4$$anonfun$test2$1,CONST_2: lancet.interpreter.TestInterpreter4) extends (scala.collection.Seq[_]=>scala.collection.Seq[_]){
import sun.misc.Unsafe
val unsafe = { val fld = classOf[Unsafe].getDeclaredField("theUnsafe"); fld.setAccessible(true); fld.get(classOf[Unsafe]).asInstanceOf[Unsafe]; }
type char = Char
def WARN = assert(false, "WARN")
def ERROR = assert(false, "ERROR")
def apply(ARG: scala.collection.Seq[_]): scala.collection.Seq[_] = { object BODY {
  var RES = null.asInstanceOf[scala.collection.Seq[_]]
  val x0 = ARG
  val x1 = unsafe.allocateInstance(Class.forName("lancet.interpreter.TestInterpreter4$$anonfun$test2$1$$anonfun$2$$anonfun$apply$2"))
  unsafe.putObject(x1,12L, CONST_0)
  val x11 = x0.asInstanceOf[Traversable[Object]].filter { (x2:Object) => {
      var RES = null.asInstanceOf[Object]
      val x3 = x2.asInstanceOf[lancet.interpreter.TestInterpreter4$Person] // checkCast
      // unique method: HotSpotMethod<TestInterpreter4$Person.flag()> TODO: guard
      val x4 = unsafe.getBoolean(x3,16L)
      val x5 = if (x4) {
        1
      } else {
        0
      }
      val x6 = x5 == 0
      if (x6) {
        val PHI_4_5 = 1 // LUBC(PHI_4_5:Int,1:Int)
        BLOCK_25(PHI_4_5,x0,x1,x2,x3,x4,x6)
      } else {
        // unique method: HotSpotMethod<TestInterpreter4$Person.age()> TODO: guard
        val x7 = unsafe.getInt(x3,12L)
        val x8 = 42 <= x7
        if (x8) {
          val PHI_4_5 = 0 // LUBC(PHI_4_5:Int,0:Int)
          BLOCK_25(PHI_4_5,x0,x1,x2,x3,x4,x6)
        } else {
          val PHI_4_5 = 1 // LUBC(PHI_4_5:Int,1:Int)
          BLOCK_25(PHI_4_5,x0,x1,x2,x3,x4,x6)
        }
      }
      def BLOCK_25(PHI_4_5:Int,x0:scala.collection.Seq[_],x1:Object,x2:Object,x3:Object,x4:Boolean,x6:Boolean): Unit = {
        val x9 = PHI_4_5 == 1
        val x10 = x9.asInstanceOf[java.lang.Boolean]
        (RES = x10) // return to root
      }
      // (no return?)
      RES.asInstanceOf[Boolean]
  }}
  val x12 = x11.asInstanceOf[scala.collection.Seq[_]] // checkCast
  (RES = x12) // return to root
  // (no return?)
}; BODY.RES }
}

compilation: ok
<decompiled>
