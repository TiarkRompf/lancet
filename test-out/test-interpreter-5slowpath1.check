lancet.interpreter.TestInterpreter5$$anonfun$test1$1$$anonfun$1.apply$mcII$sp
lancet.interpreter.TestInterpreter5$$anonfun$test1$1.lancet$interpreter$TestInterpreter5$$anonfun$$compute$1
lancet.interpreter.TestInterpreter5$$anonfun$test1$1.lancet$interpreter$TestInterpreter5$$anonfun$$compute$1
lancet.interpreter.TestInterpreter5$Decompiler.dropdead
// constants: <function1>,<function0>
class Generated(CONST_0: lancet.interpreter.TestInterpreter5$$anonfun$test1$1$$anonfun$1,CONST_1: lancet.interpreter.TestInterpreter5$$anonfun$test1$1) extends (Int=>Int){
import sun.misc.Unsafe
val unsafe = { val fld = classOf[Unsafe].getDeclaredField("theUnsafe"); fld.setAccessible(true); fld.get(classOf[Unsafe]).asInstanceOf[Unsafe]; }
type char = Char
def WARN = assert(false, "WARN")
def ERROR = assert(false, "ERROR")
def apply(ARG: Int): Int = { object BODY {
  var RES = null.asInstanceOf[Int]
  val x0 = ARG
  val x1 = x0.asInstanceOf[Int]
  ;{
    val PHI_3_5 = 0.asInstanceOf[Int] // LUBC(PHI_3_5:Int,0.asInstanceOf[Int]:Int)
    BLOCK_2(PHI_3_5,x0,x1)
  }
  def BLOCK_2(PHI_3_5:Int,x0:Int,x1:Int): Unit = {
    val x3 = x1 <= PHI_3_5
    if (x3) {
      (RES = PHI_3_5) // return to root
    } else {
      val x4 = 50.asInstanceOf[Int] != PHI_3_5
      if (x4) {
        BLOCK_5(PHI_3_5,x0,x1,x3,x4)
      } else {
        val x5 = () // drop into interpreter
        ;{
          BLOCK_5(PHI_3_5,x0,x1,x3,x4)
        }
      }
      def BLOCK_5(PHI_3_5:Int,x0:Int,x1:Int,x3:Boolean,x4:Boolean): Unit = {
        val x6 = 1.asInstanceOf[Int] + PHI_3_5
        ;{
          val PHI_3_5 = x6 // LUBC(PHI_3_5:Int,x6:Int)
          BLOCK_2(PHI_3_5,x0,x1)
        }
      }
    }
  }
  // (no return?)
}; BODY.RES }
}

compilation: ok
100
