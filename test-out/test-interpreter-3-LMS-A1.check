  /*****************************************
  Emitting Generated Code
  *******************************************/
  class Generated extends ((Int)=>(Int)) {
    def apply(x88:Int): Int = {
      val x0 = x88;
      val x90: Int = {
        import sun.misc.Unsafe;
        val unsafe = { val fld = classOf[Unsafe].getDeclaredField("theUnsafe"); fld.setAccessible(true); fld.get(classOf[Unsafe]).asInstanceOf[Unsafe]; };
        type char = Char;
        def WARN = assert(false, "WARN");
        def ERROR = assert(false, "ERROR");
        var RES0 = null.asInstanceOf[Int];
        val x7 = x0.asInstanceOf[Int];
        val x8: Object = unsafe.allocateInstance(Class.forName("lancet.interpreter.BaseTestInterpreter3$Bar"));
        if (x8 ne null) unsafe.putInt(x8,16L, 7) else println("BUG: putInt"+x8);;
        val x34 = 0 >= x7;
        if (x34) {
          ;{;
            val LUB_x8_intField = 7; // Alias(Some(DynExp(LUB_x8_intField)),Some(Const(7)));
            BLOCK_12(LUB_x8_intField,x7,x8);
          };
        } else {
          if (x8 ne null) unsafe.putInt(x8,16L, 9) else println("BUG: putInt"+x8);;
          ;{;
            val LUB_x8_intField = 9; // Alias(Some(DynExp(LUB_x8_intField)),Some(Const(9)));
            BLOCK_12(LUB_x8_intField,x7,x8);
          };
        }
        def BLOCK_12(LUB_x8_intField:Int,x7:Int,x8:Object): Unit = {
          (RES0 = LUB_x8_intField) // return to root;
        }
        // (no return?);
        RES0
      };
      x90
    }
  }
  /*****************************************
  End of Generated Code
  *******************************************/
compilation: ok
9
