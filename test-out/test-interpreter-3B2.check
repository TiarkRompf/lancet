// constants: <function1>,lancet.interpreter.TestInterpreter3$Bar@55564412
class Generated4(CONST_0: lancet.interpreter.TestInterpreter3$$anonfun$testB2$1$$anonfun$5,CONST_1: lancet.interpreter.TestInterpreter3$Bar) extends (Int=>Int){
import sun.misc.Unsafe
val unsafe = { val fld = classOf[Unsafe].getDeclaredField("theUnsafe"); fld.setAccessible(true); fld.get(classOf[Unsafe]).asInstanceOf[Unsafe]; }
type char = Char
def WARN = assert(false, "WARN")
def ERROR = assert(false, "ERROR")
def apply(ARG: Int): Int = { object BODY {
  var RES = null.asInstanceOf[Int]
  val x0 = ARG
  val x1 = x0.asInstanceOf[Int]
  ;{
    val PHI_3_5 = x1 // LUBC(PHI_3_5:Int,x1:Int)
    val x10 = unsafe.getInt(CONST_1,16L)
    val LUB_CONST_1_intField = x10 // XXX LUBC(Some(LUB_CONST_1_intField),None)
    BLOCK_2(LUB_CONST_1_intField,PHI_3_5,x0,x1)
  }
  def BLOCK_2(LUB_CONST_1_intField:Int,PHI_3_5:Int,x0:Int,x1:Int): Unit = {
    val x6 = 0 >= PHI_3_5
    if (x6) {
      (RES = LUB_CONST_1_intField) // return to root
    } else {
      val x7 = 1 + LUB_CONST_1_intField
      unsafe.putInt(CONST_1,16L, x7)
      val x8 = -1 + PHI_3_5
      ;{
        val PHI_3_5 = x8 // LUBC(PHI_3_5:Int,x8:Int)
        val LUB_CONST_1_intField = x7 // Alias(Some(LUB_CONST_1_intField),Some(x7))
        BLOCK_2(LUB_CONST_1_intField,PHI_3_5,x0,x1)
      }
    }
  }
  // (no return?)
}; BODY.RES }
}

compilation: ok
14
