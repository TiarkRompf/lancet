// constants: <function1>,lancet.interpreter.TestInterpreter3$Bar@5c8b50f2
class Generated(CONST_0: lancet.interpreter.TestInterpreter3$$anonfun$testB2$1$$anonfun$5,CONST_1: lancet.interpreter.TestInterpreter3$Bar) extends (Int=>Int){
import sun.misc.Unsafe
val unsafe = { val fld = classOf[Unsafe].getDeclaredField("theUnsafe"); fld.setAccessible(true); fld.get(classOf[Unsafe]).asInstanceOf[Unsafe]; }
type char = Char
def WARN = assert(false, "WARN")
def ERROR = assert(false, "ERROR")
def apply(ARG: Int): Int = { object BODY {
  var RES = null.asInstanceOf[Int]
  val x0 = ARG
  val x1 = x0.asInstanceOf[Int]
  val x2 = 0.asInstanceOf[Int] >= x1
  val x16 = if (x2) {
    val x3 = (RES = 7.asInstanceOf[Int]) // return to root
    x3
  } else {
    val x4 = unsafe.putInt(CONST_1.asInstanceOf[Object],16.asInstanceOf[Long], 8.asInstanceOf[Int])
    val x5 = -1.asInstanceOf[Int] + x1
    val x6 = 0.asInstanceOf[Int] >= x5
    val x15 = if (x6) {
      val x7 = (RES = 8.asInstanceOf[Int]) // return to root
      x7
    } else {
      val PHI_3_5 = x5 // LUBC(x1,x5)
      val LUB_CONST_1_16 = 8.asInstanceOf[Int] // Alias(None,Some(8.asInstanceOf[Int]))
      def loop6(PHI_3_5:Int)(LUB_CONST_1_16:Int): Unit = {
      val x8 = 1.asInstanceOf[Int] + LUB_CONST_1_16
      val x9 = unsafe.putInt(CONST_1.asInstanceOf[Object],16.asInstanceOf[Long], x8)
      val x10 = -1.asInstanceOf[Int] + PHI_3_5
      val x11 = 0.asInstanceOf[Int] >= x10
      val x13 = if (x11) {
        val x12 = (RES = x8) // return to root
        x12
      } else {
        ;{val PHI_3_5 = x10 // LUBC(x1,x10)
        val LUB_CONST_1_16 = x8 // Alias(None,Some(x8))
        loop6(PHI_3_5)(LUB_CONST_1_16)}
      }
      x13
      }
      val x14 = loop6(PHI_3_5)(LUB_CONST_1_16)
      x14
    }
    x15
  }
}; BODY.RES }
}

compilation: ok
14
