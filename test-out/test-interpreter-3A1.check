// constants: <function1>,<function0>
class Generated0(CONST_0: lancet.interpreter.TestInterpreter3$$anonfun$testA1$1$$anonfun$1,CONST_1: lancet.interpreter.TestInterpreter3$$anonfun$testA1$1) extends (Int=>Int){
import sun.misc.Unsafe
val unsafe = { val fld = classOf[Unsafe].getDeclaredField("theUnsafe"); fld.setAccessible(true); fld.get(classOf[Unsafe]).asInstanceOf[Unsafe]; }
type char = Char
def WARN = assert(false, "WARN")
def ERROR = assert(false, "ERROR")
def apply(ARG: Int): Int = { object BODY {
  var RES = null.asInstanceOf[Int]
  val x0 = ARG
  val x1 = x0.asInstanceOf[Int]
  val x2 = unsafe.allocateInstance(Class.forName("lancet.interpreter.TestInterpreter3$Bar"))
  unsafe.putInt(x2,16L, 7)
  val x3 = 0 >= x1
  if (x3) {
    val LUB_x2_intField = 7 // Alias(Some(LUB_x2_intField),Some(7))
    BLOCK_12(LUB_x2_intField,x0,x1,x2,x3)
  } else {
    unsafe.putInt(x2,16L, 9)
    ;{
      val LUB_x2_intField = 9 // Alias(Some(LUB_x2_intField),Some(9))
      BLOCK_12(LUB_x2_intField,x0,x1,x2,x3)
    }
  }
  def BLOCK_12(LUB_x2_intField:Int,x0:Int,x1:Int,x2:Object,x3:Boolean): Unit = {
    (RES = LUB_x2_intField) // return to root
  }
  // (no return?)
}; BODY.RES }
}

compilation: ok
9
