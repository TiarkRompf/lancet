// constants: <function1>,<function0>,lancet.interpreter.TestInterpreter4@3e2ea1af
class Generated0(CONST_0: lancet.interpreter.TestInterpreter4$$anonfun$test3$1$$anonfun$3,CONST_1: lancet.interpreter.TestInterpreter4$$anonfun$test3$1,CONST_2: lancet.interpreter.TestInterpreter4) extends (scala.collection.Seq[_]=>scala.collection.Seq[_]){
import sun.misc.Unsafe
val unsafe = { val fld = classOf[Unsafe].getDeclaredField("theUnsafe"); fld.setAccessible(true); fld.get(classOf[Unsafe]).asInstanceOf[Unsafe]; }
type char = Char
def WARN = assert(false, "WARN")
def ERROR = assert(false, "ERROR")
def apply(ARG: scala.collection.Seq[_]): scala.collection.Seq[_] = { object BODY {
  var RES = null.asInstanceOf[scala.collection.Seq[_]]
  val x0 = ARG
  val x1 = unsafe.allocateInstance(Class.forName("lancet.interpreter.TestInterpreter4$$anonfun$test3$1$$anonfun$3$$anonfun$apply$3"))
  unsafe.putObject(x1,16L, CONST_0)
  val x40 = x0.asInstanceOf[Traversable[Object]].filter { (x2:Object) => {
      var RES = null.asInstanceOf[Object]
      val x3 = x2.asInstanceOf[lancet.interpreter.TestInterpreter4$Person] // checkCast
      val x4 = x3 eq null
      if (x4) {
        val PHI_4_6 = null.asInstanceOf[Int] // LUBC(PHI_4_6,null)
        val PHI_4_7 = 0 // LUBC(PHI_4_7:Int,0:Int)
        BLOCK_101(PHI_4_6,PHI_4_7,x0,x1,x2,x3,x4)
      } else {
        // unique method: HotSpotMethod<TestInterpreter4$Person.age> TODO: guard
        val x5 = unsafe.getInt(x3,16L)
        val x6 = 0.asInstanceOf[java.lang.Integer]
        val x7 = x5.asInstanceOf[java.lang.Integer]
        val x8 = x6==x7
        val x9 = if (x8) {
          1
        } else {
          0
        }
        val x10 = x9 == 0
        if (x10) {
          BLOCK_33(x0,x1,x10,x2,x3,x4,x5,x6,x7,x8)
        } else {
          // unique method: HotSpotMethod<TestInterpreter4$Person.flag> TODO: guard
          val x11 = unsafe.getBoolean(x3,20L)
          val x12 = if (x11) {
            1
          } else {
            0
          }
          val x13 = 1 != x12
          if (x13) {
            BLOCK_33(x0,x1,x10,x2,x3,x4,x5,x6,x7,x8)
          } else {
            val PHI_4_6 = x5 // LUBC(PHI_4_6:Int,x5:Int)
            val PHI_4_7 = 1 // LUBC(PHI_4_7:Int,1:Int)
            BLOCK_101(PHI_4_6,PHI_4_7,x0,x1,x2,x3,x4)
          }
        }
      }
      def BLOCK_33(x0:scala.collection.Seq[_],x1:Object,x10:Boolean,x2:Object,x3:Object,x4:Boolean,x5:Int,x6:java.lang.Integer,x7:java.lang.Integer,x8:Boolean): Unit = {
        val x14 = 1.asInstanceOf[java.lang.Integer]
        /* cse: WrappedArray(x5, .asInstanceOf[java.lang.Integer]) = x7*/
        val x15 = x14==x7
        val x16 = if (x15) {
          1
        } else {
          0
        }
        val x17 = x16 == 0
        if (x17) {
          val x18 = 2.asInstanceOf[java.lang.Integer]
          /* cse: WrappedArray(x5, .asInstanceOf[java.lang.Integer]) = x7*/
          val x19 = x18==x7
          val x20 = if (x19) {
            1
          } else {
            0
          }
          val x21 = x20 == 0
          if (x21) {
            val x22 = 3.asInstanceOf[java.lang.Integer]
            /* cse: WrappedArray(x5, .asInstanceOf[java.lang.Integer]) = x7*/
            val x23 = x22==x7
            val x24 = if (x23) {
              1
            } else {
              0
            }
            val x25 = x24 == 0
            if (x25) {
              val x26 = 4.asInstanceOf[java.lang.Integer]
              /* cse: WrappedArray(x5, .asInstanceOf[java.lang.Integer]) = x7*/
              val x27 = x26==x7
              val x28 = if (x27) {
                1
              } else {
                0
              }
              val x29 = x28 == 0
              if (x29) {
                val x30 = 5.asInstanceOf[java.lang.Integer]
                /* cse: WrappedArray(x5, .asInstanceOf[java.lang.Integer]) = x7*/
                val x31 = x30==x7
                val x32 = if (x31) {
                  1
                } else {
                  0
                }
                val x33 = x32 == 0
                if (x33) {
                  val x34 = 6.asInstanceOf[java.lang.Integer]
                  /* cse: WrappedArray(x5, .asInstanceOf[java.lang.Integer]) = x7*/
                  val x35 = x34==x7
                  val x36 = if (x35) {
                    1
                  } else {
                    0
                  }
                  val x37 = x36 == 0
                  if (x37) {
                    val PHI_4_6 = x5 // LUBC(PHI_4_6:Int,x5:Int)
                    val PHI_4_7 = 0 // LUBC(PHI_4_7:Int,0:Int)
                    BLOCK_101(PHI_4_6,PHI_4_7,x0,x1,x2,x3,x4)
                  } else {
                    val PHI_4_6 = x5 // LUBC(PHI_4_6:Int,x5:Int)
                    val PHI_4_7 = 1 // LUBC(PHI_4_7:Int,1:Int)
                    BLOCK_101(PHI_4_6,PHI_4_7,x0,x1,x2,x3,x4)
                  }
                } else {
                  val PHI_4_6 = x5 // LUBC(PHI_4_6:Int,x5:Int)
                  val PHI_4_7 = 1 // LUBC(PHI_4_7:Int,1:Int)
                  BLOCK_101(PHI_4_6,PHI_4_7,x0,x1,x2,x3,x4)
                }
              } else {
                val PHI_4_6 = x5 // LUBC(PHI_4_6:Int,x5:Int)
                val PHI_4_7 = 1 // LUBC(PHI_4_7:Int,1:Int)
                BLOCK_101(PHI_4_6,PHI_4_7,x0,x1,x2,x3,x4)
              }
            } else {
              val PHI_4_6 = x5 // LUBC(PHI_4_6:Int,x5:Int)
              val PHI_4_7 = 1 // LUBC(PHI_4_7:Int,1:Int)
              BLOCK_101(PHI_4_6,PHI_4_7,x0,x1,x2,x3,x4)
            }
          } else {
            val PHI_4_6 = x5 // LUBC(PHI_4_6:Int,x5:Int)
            val PHI_4_7 = 1 // LUBC(PHI_4_7:Int,1:Int)
            BLOCK_101(PHI_4_6,PHI_4_7,x0,x1,x2,x3,x4)
          }
        } else {
          val PHI_4_6 = x5 // LUBC(PHI_4_6:Int,x5:Int)
          val PHI_4_7 = 1 // LUBC(PHI_4_7:Int,1:Int)
          BLOCK_101(PHI_4_6,PHI_4_7,x0,x1,x2,x3,x4)
        }
      }
      def BLOCK_101(PHI_4_6:Int,PHI_4_7:Int,x0:scala.collection.Seq[_],x1:Object,x2:Object,x3:Object,x4:Boolean): Unit = {
        val x38 = PHI_4_7 == 1
        val x39 = x38.asInstanceOf[java.lang.Boolean]
        (RES = x39) // return to root
      }
      // (no return?)
      RES.asInstanceOf[Boolean]
  }}
  val x41 = x40.asInstanceOf[scala.collection.Seq[_]] // checkCast
  (RES = x41) // return to root
  // (no return?)
}; BODY.RES }
}

compilation: ok
<decompiled>
