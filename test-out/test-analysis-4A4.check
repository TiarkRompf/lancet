prog: {
  Assign(x,Const(0))
  Assign(y,Const(10))
  Assign(a,New(A))
  Put(Ref(a),Ref(x),Times(Ref(x),Const(2)))
  While(Less(Ref(x),Const(100)),{
    Put(Ref(a),Ref(x),Times(Ref(x),Const(2)))
    Assign(x,Plus(Ref(x),Const(1)))
    Assign(y,Plus(Ref(y),Const(1)))
  })
  Assign(r,Ref(a))
}
val x0 = Map()
val x1 = Map("val" -> 0)
val x2 = Map("&x" -> x1)
val x3 = Map("val" -> 10)
val x4 = Map("&x" -> x1, "&y" -> x3)
val x5 = Map("&x" -> x1, "&y" -> x3, (A,1) -> Map())
val x6 = Map("val" -> (A,1))
val x7 = Map("&x" -> x1, "&y" -> x3, "&a" -> x6)
val x8 = Map(0 -> 0)
val x9 = Map("&x" -> x1, "&y" -> x3, "&a" -> x6, (A,1) -> x8)
val x12 = (1,x11)
starting spec loop with x9
val x13 = Map("val" -> 1)
val x14 = Map("&x" -> x13, "&y" -> x3, "&a" -> x6, (A,1) -> x8)
val x15 = Map("val" -> 11)
val x16 = Map("&x" -> x13, "&y" -> x15, "&a" -> x6, (A,1) -> x8)
lub(x9, x16) = ?
lub_x10(x9,x9,x16)
lub_x10_&x(x1,x1,x13)
lub_x10_&x_val(0,0,1)
0
1
1
confirmed iterative loop, d = 1
val x17 = x11 + -1
Set(("val",(x17,x11)))
val x18 = Map("val" -> x17)
val x19 = Map("val" -> x11)
lub_x10_&y(x3,x3,x15)
lub_x10_&y_val(10,10,11)
10
11
1
confirmed iterative loop, d = 1
val x20 = x11 + 9
val x21 = x11 + 10
Set(("val",(x20,x21)))
val x22 = Map("val" -> x20)
val x23 = Map("val" -> x21)
lub_x10_&a(x6,x6,x6)
lub_x10_(A,1)(x8,x8,x8)
Set(("&x",(x18,x19)), ("&y",(x22,x23)), ("&a",(x6,x6)), ((A,1),(x8,x8)))
val x24 = Map("&x" -> x18, "&y" -> x22, "&a" -> x6, (A,1) -> x8)
val x25 = Map("&x" -> x19, "&y" -> x23, "&a" -> x6, (A,1) -> x8)
lub(x9, x16) = x24
starting spec loop with x24
val x26 = x11 < 101
val x27 = x11 * 2
val x28 = x27 + -2
val x29 = x8 + (x17 -> x28)
val x30 = Map("&x" -> x18, "&y" -> x22, "&a" -> x6, (A,1) -> x29)
val x31 = Map("&x" -> x19, "&y" -> x22, "&a" -> x6, (A,1) -> x29)
val x32 = Map("&x" -> x19, "&y" -> x23, "&a" -> x6, (A,1) -> x29)
lub(x9, x32) = ?
lub_x10(x9,x24,x32)
lub_x10_&x(x1,x18,x19)
lub_x10_&x_val(0,x17,x11)
val x33 = x11 * -1
val x34 = x33 + 1
x11 + -1
x11
1
confirmed iterative loop, d = 1
Set(("val",(x17,x11)))
lub_x10_&y(x3,x22,x23)
lub_x10_&y_val(10,x20,x21)
val x35 = x33 + -9
x11 + 9
x11 + 10
1
confirmed iterative loop, d = 1
Set(("val",(x20,x21)))
lub_x10_&a(x6,x6,x6)
lub_x10_(A,1)(x8,x8,x29)
val x36 = x8 * -1
val x37 = x29 + x36
Map(0 -> 0)
Map(0 -> 0) + (x11 + -1 -> x11 * 2 + -2)
Map(0 -> 0) + (x11 + -1 -> x11 * 2 + -2) + Map(0 -> 0) * -1
poly: List()
giving up: deriv List(); recursive fun x10_(A,1)
val x38 = x10_(A,1)(x17)
val x39 = 0 < x11
val x40 = if (x39) x38 else x8
val x41 = x10_(A,1)(x11)
val x42 = if (x39) x41 else x8
Set(("&x",(x18,x19)), ("&y",(x22,x23)), ("&a",(x6,x6)), ((A,1),(x40,x42)))
val x43 = Map("&x" -> x18, "&y" -> x22, "&a" -> x6, (A,1) -> x40)
val x44 = Map("&x" -> x19, "&y" -> x23, "&a" -> x6, (A,1) -> x42)
lub(x9, x32) = x43
starting spec loop with x43
val x45 = x38 + (x17 -> x28)
val x46 = if (x39) x45 else x29
val x47 = Map("&x" -> x18, "&y" -> x22, "&a" -> x6, (A,1) -> x46)
val x48 = Map("&x" -> x19, "&y" -> x22, "&a" -> x6, (A,1) -> x46)
val x49 = Map("&x" -> x19, "&y" -> x23, "&a" -> x6, (A,1) -> x46)
lub(x9, x49) = ?
lub_x10(x9,x43,x49)
lub_x10_&x(x1,x18,x19)
lub_x10_&x_val(0,x17,x11)
x11 + -1
x11
1
confirmed iterative loop, d = 1
Set(("val",(x17,x11)))
lub_x10_&y(x3,x22,x23)
lub_x10_&y_val(10,x20,x21)
x11 + 9
x11 + 10
1
confirmed iterative loop, d = 1
Set(("val",(x20,x21)))
lub_x10_&a(x6,x6,x6)
lub_x10_(A,1)(x8,x40,x46)
val x50 = x38 * -1
val x51 = if (x39) x50 else x36
val x52 = x45 + x51
val x53 = x29 + x51
val x54 = x45 + x50
val x55 = if (x39) x54 else x37
if (0 < x11) x10_(A,1)(x11 + -1) else Map(0 -> 0)
if (0 < x11) x10_(A,1)(x11 + -1) + (x11 + -1 -> x11 * 2 + -2) else Map(0 -> 0) + (x11 + -1 -> x11 * 2 + -2)
if (0 < x11) x10_(A,1)(x11 + -1) + (x11 + -1 -> x11 * 2 + -2) + x10_(A,1)(x11 + -1) * -1 else Map(0 -> 0) + (x11 + -1 -> x11 * 2 + -2) + Map(0 -> 0) * -1
poly: List()
giving up: deriv List(); recursive fun x10_(A,1)
Set(("&x",(x18,x19)), ("&y",(x22,x23)), ("&a",(x6,x6)), ((A,1),(x40,x42)))
lub(x9, x49) = x43
val x10_&x_val = { x11 => x11 }
val x10_&y_val = { x11 => x21 }
val x10_(A,1) = { x11 => x46 }
val x56 = Map("&x" -> x19, "&y" -> x23, "&a" -> x6, (A,1) -> x41)
val x10 = { x11 => x56 }
fixindex: 100
val x57 = Map("val" -> 100)
val x58 = Map("val" -> 110)
val x59 = x10_(A,1)(100)
val x60 = Map("&x" -> x57, "&y" -> x58, "&a" -> x6, (A,1) -> x59)
val x61 = Map("&x" -> x57, "&y" -> x58, "&a" -> x6, "&r" -> x6, (A,1) -> x59)
res: ()
store: x61
transformed: x61
sched:
val x17 = x11 + -1
val x27 = x11 * 2
val x28 = x27 + -2
val x39 = 0 < x11
val x8 = Map(0 -> 0)
val x29 = x8 + (x17 -> x28)
val x38 = x10_(A,1)(x17)
val x45 = x38 + (x17 -> x28)
val x46 = if (x39) x45 else x29
val x10_(A,1) = { x11 => x46 }
val x59 = x10_(A,1)(100)
val x58 = Map("val" -> 110)
val x57 = Map("val" -> 100)
val x6 = Map("val" -> (A,1))
val x61 = Map("&x" -> x57, "&y" -> x58, "&a" -> x6, "&r" -> x6, (A,1) -> x59)
term:
val x10_(A,1) = { x11 => if (0 < x11) x10_(A,1)(x11 + -1) + (x11 + -1 -> x11 * 2 + -2) else Map(0 -> 0) + (x11 + -1 -> x11 * 2 + -2) }
Map("&a" -> Map("val" -> (A,1)), "&x" -> Map("val" -> 100), "&y" -> Map("val" -> 110), "&r" -> Map("val" -> (A,1)), (A,1) -> x10_(A,1)(100))
----
