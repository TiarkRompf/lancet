// constants: <function1>,lancet.interpreter.TestInterpreter1$$anonfun$testC$1$Foo$3@378103b4,Array(),Array(h, e, l, l, o, :,  ),Array(-128, -127, -126, -125, -124, -123, -122, -121, -120, -119, -118, -117, -116, -115, -114, -113, -112, -111, -110, -109, -108, -107, -106, -105, -104, -103, -102, -101, -100, -99, -98, -97, -96, -95, -94, -93, -92, -91, -90, -89, -88, -87, -86, -85, -84, -83, -82, -81, -80, -79, -78, -77, -76, -75, -74, -73, -72, -71, -70, -69, -68, -67, -66, -65, -64, -63, -62, -61, -60, -59, -58, -57, -56, -55, -54, -53, -52, -51, -50, -49, -48, -47, -46, -45, -44, -43, -42, -41, -40, -39, -38, -37, -36, -35, -34, -33, -32, -31, -30, -29, -28, -27, -26, -25, -24, -23, -22, -21, -20, -19, -18, -17, -16, -15, -14, -13, -12, -11, -10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127),Array(9, 99, 999, 9999, 99999, 999999, 9999999, 99999999, 999999999, 2147483647),Array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z),java.io.PrintStream@65184504,java.io.FileOutputStream@771a3ae3,java.io.BufferedWriter@50d9d46f,java.io.OutputStreamWriter@6146b99e,Array(
class Generated(CONST_0: lancet.interpreter.TestInterpreter1$$anonfun$testC$1$$anonfun$2,CONST_1: lancet.interpreter.TestInterpreter1$$anonfun$testC$1$Foo$3,CONST_2: Array[Char],CONST_3: Array[Char],CONST_4: Array[java.lang.Integer],CONST_5: Array[Int],CONST_6: Array[Char],CONST_7: java.io.PrintStream,CONST_8: java.io.FileOutputStream,CONST_9: java.io.BufferedWriter,CONST_10: java.io.OutputStreamWriter,CONST_11: Array[Char],CONST_12: sun.nio.cs.StreamEncoder) extends (Int=>Int){
import sun.misc.Unsafe
val unsafe = { val fld = classOf[Unsafe].getDeclaredField("theUnsafe"); fld.setAccessible(true); fld.get(classOf[Unsafe]).asInstanceOf[Unsafe]; }
type char = Char
def WARN = assert(false, "WARN")
def ERROR = assert(false, "ERROR")
def apply(ARG: Int): Int = { object BODY {
  var RES = null.asInstanceOf[Int]
  val x0 = ARG
  val x1 = x0.asInstanceOf[Int]
  val x2 = unsafe.allocateInstance(Class.forName("scala.collection.mutable.StringBuilder"))
  val x3 = unsafe.allocateInstance(Class.forName("java.lang.StringBuilder"))
  val x4 = new Array[char](16.asInstanceOf[Int])
  val x5 = unsafe.putObject(x3,24.asInstanceOf[Long], x4)
  val x6 = java.lang.System.arraycopy(CONST_2.asInstanceOf[Object],0.asInstanceOf[Int],x4,0.asInstanceOf[Int],0.asInstanceOf[Int]).asInstanceOf[Object]
  val x7 = unsafe.putInt(x3,16.asInstanceOf[Long], 0.asInstanceOf[Int])
  val x8 = unsafe.putObject(x2,16.asInstanceOf[Long], x3)
  val x9 = java.lang.System.arraycopy(CONST_3.asInstanceOf[Object],0.asInstanceOf[Int],x4,0.asInstanceOf[Int],7.asInstanceOf[Int]).asInstanceOf[Object]
  val x10 = unsafe.putInt(x3,16.asInstanceOf[Long], 7.asInstanceOf[Int])
  val x11 = new Array[char](1.asInstanceOf[Int])
  val x12 = unsafe.getChar(CONST_6.asInstanceOf[Object],40.asInstanceOf[Long])
  val x13 = x12.toInt
  val x14 = x13.toChar
  val x15 = unsafe.putChar(x11,24.asInstanceOf[Long], x14)
  val x16 = unsafe.allocateInstance(Class.forName("java.lang.String"))
  val x17 = unsafe.putInt(x16,28.asInstanceOf[Long], 0.asInstanceOf[Int])
  val x18 = unsafe.putObject(x16,16.asInstanceOf[Long], x11)
  val x19 = java.lang.System.arraycopy(x11,0.asInstanceOf[Int],x4,7.asInstanceOf[Int],1.asInstanceOf[Int]).asInstanceOf[Object]
  val x20 = unsafe.putInt(x3,16.asInstanceOf[Long], 8.asInstanceOf[Int])
  val x21 = unsafe.allocateInstance(Class.forName("java.lang.String"))
  val x22 = unsafe.putInt(x21,28.asInstanceOf[Long], 0.asInstanceOf[Int])
  val x23 = new Array[char](8.asInstanceOf[Int])
  val x24 = java.lang.System.arraycopy(x4,0.asInstanceOf[Int],x23,0.asInstanceOf[Int],8.asInstanceOf[Int]).asInstanceOf[Object]
  val x25 = unsafe.putObject(x21,16.asInstanceOf[Long], x23)
  val x26 = unsafe.monitorEnter(CONST_7.asInstanceOf[Object])
  val x27 = unsafe.monitorEnter(CONST_7.asInstanceOf[Object])
  val x28 = unsafe.monitorEnter(CONST_10.asInstanceOf[Object])
  val x29 = unsafe.getInt(CONST_9.asInstanceOf[Object],40.asInstanceOf[Long])
  val x30 = unsafe.getInt(CONST_9.asInstanceOf[Object],44.asInstanceOf[Long])
  val x31 = -x30
  val x32 = x31 + x29
  val x33 = 8.asInstanceOf[Int] <= x32
  val x304 = if (x33) {
    val x34 = unsafe.getInt(CONST_9.asInstanceOf[Object],44.asInstanceOf[Long])
    val x35 = java.lang.System.arraycopy(x23,0.asInstanceOf[Int],CONST_11.asInstanceOf[Object],x34,8.asInstanceOf[Int]).asInstanceOf[Object]
    val x36 = unsafe.getInt(CONST_9.asInstanceOf[Object],44.asInstanceOf[Long])
    val x37 = 8.asInstanceOf[Int] + x36
    val x38 = unsafe.putInt(CONST_9.asInstanceOf[Object],44.asInstanceOf[Long], x37)
    val x39 = unsafe.getInt(CONST_9.asInstanceOf[Object],40.asInstanceOf[Long])
    val x40 = x39 > x37
    val x60 = if (x40) {
      val x41 = unsafe.monitorExit(CONST_10.asInstanceOf[Object])
      val x42 = unsafe.monitorEnter(CONST_10.asInstanceOf[Object])
      val x43 = x37 != 0.asInstanceOf[Int]
      val x47 = if (x43) {
        val x44 = WARN // refuse 0:<StreamEncoder.write>([CII)V // 10:<OutputStreamWriter.write>([CII)V // 37:<BufferedWriter.flushBuffer>()V // 23:<PrintStream.write>(Ljava/lang/String;)V // 12:<PrintStream.print>(Ljava/lang/String;)V // 9:<PrintStream.println>(Ljava/lang/String;)V // 28:<TestInterpreter1$$anonfun$testC$1$Foo$3.bar>(I)I // 9:<TestInterpreter1$$anonfun$testC$1$$anonfun$2.apply$mcII$sp>(I)I // 5:<TestInterpreter1$$anonfun$testC$1$$anonfun$2.apply>(I)I // 0:<BytecodeInterpreter_Impl.execute>(Ljava/lang/reflect/Method;[Ljava/lang/Object;)Ljava/lang/Object;
        x44
      } else {
        val x45 = unsafe.monitorExit(CONST_10.asInstanceOf[Object])
        val x46 = WARN // refuse 0:<StreamEncoder.flushBuffer>()V // 7:<OutputStreamWriter.flushBuffer>()V // 30:<PrintStream.write>(Ljava/lang/String;)V // 12:<PrintStream.print>(Ljava/lang/String;)V // 9:<PrintStream.println>(Ljava/lang/String;)V // 28:<TestInterpreter1$$anonfun$testC$1$Foo$3.bar>(I)I // 9:<TestInterpreter1$$anonfun$testC$1$$anonfun$2.apply$mcII$sp>(I)I // 5:<TestInterpreter1$$anonfun$testC$1$$anonfun$2.apply>(I)I // 0:<BytecodeInterpreter_Impl.execute>(Ljava/lang/reflect/Method;[Ljava/lang/Object;)Ljava/lang/Object;
        x46
      }
      x47
    } else {
      val x48 = unsafe.monitorEnter(CONST_10.asInstanceOf[Object])
      val x49 = x37 != 0.asInstanceOf[Int]
      val x59 = if (x49) {
        val x50 = WARN // refuse 0:<StreamEncoder.write>([CII)V // 10:<OutputStreamWriter.write>([CII)V // 37:<BufferedWriter.flushBuffer>()V // 99:<BufferedWriter.write>(Ljava/lang/String;II)V // 10:<Writer.write>(Ljava/lang/String;)V // 16:<PrintStream.write>(Ljava/lang/String;)V // 12:<PrintStream.print>(Ljava/lang/String;)V // 9:<PrintStream.println>(Ljava/lang/String;)V // 28:<TestInterpreter1$$anonfun$testC$1$Foo$3.bar>(I)I // 9:<TestInterpreter1$$anonfun$testC$1$$anonfun$2.apply$mcII$sp>(I)I // 5:<TestInterpreter1$$anonfun$testC$1$$anonfun$2.apply>(I)I // 0:<BytecodeInterpreter_Impl.execute>(Ljava/lang/reflect/Method;[Ljava/lang/Object;)Ljava/lang/Object;
        x50
      } else {
        val x51 = unsafe.monitorExit(CONST_10.asInstanceOf[Object])
        val x52 = unsafe.monitorExit(CONST_10.asInstanceOf[Object])
        val x53 = unsafe.monitorEnter(CONST_10.asInstanceOf[Object])
        val x54 = x37 != 0.asInstanceOf[Int]
        val x58 = if (x54) {
          val x55 = WARN // refuse 0:<StreamEncoder.write>([CII)V // 10:<OutputStreamWriter.write>([CII)V // 37:<BufferedWriter.flushBuffer>()V // 23:<PrintStream.write>(Ljava/lang/String;)V // 12:<PrintStream.print>(Ljava/lang/String;)V // 9:<PrintStream.println>(Ljava/lang/String;)V // 28:<TestInterpreter1$$anonfun$testC$1$Foo$3.bar>(I)I // 9:<TestInterpreter1$$anonfun$testC$1$$anonfun$2.apply$mcII$sp>(I)I // 5:<TestInterpreter1$$anonfun$testC$1$$anonfun$2.apply>(I)I // 0:<BytecodeInterpreter_Impl.execute>(Ljava/lang/reflect/Method;[Ljava/lang/Object;)Ljava/lang/Object;
          x55
        } else {
          val x56 = unsafe.monitorExit(CONST_10.asInstanceOf[Object])
          val x57 = WARN // refuse 0:<StreamEncoder.flushBuffer>()V // 7:<OutputStreamWriter.flushBuffer>()V // 30:<PrintStream.write>(Ljava/lang/String;)V // 12:<PrintStream.print>(Ljava/lang/String;)V // 9:<PrintStream.println>(Ljava/lang/String;)V // 28:<TestInterpreter1$$anonfun$testC$1$Foo$3.bar>(I)I // 9:<TestInterpreter1$$anonfun$testC$1$$anonfun$2.apply$mcII$sp>(I)I // 5:<TestInterpreter1$$anonfun$testC$1$$anonfun$2.apply>(I)I // 0:<BytecodeInterpreter_Impl.execute>(Ljava/lang/reflect/Method;[Ljava/lang/Object;)Ljava/lang/Object;
          x57
        }
        x58
      }
      x59
    }
    x60
  } else {
    val x61 = unsafe.getInt(CONST_9.asInstanceOf[Object],44.asInstanceOf[Long])
    val x62 = 8.asInstanceOf[Int] >= x32
    val x303 = if (x62) {
      val x63 = x32 >= 0.asInstanceOf[Int]
      val x300 = if (x63) {
        val x64 = java.lang.System.arraycopy(x23,0.asInstanceOf[Int],CONST_11.asInstanceOf[Object],x61,x32).asInstanceOf[Object]
        val x65 = unsafe.getInt(CONST_9.asInstanceOf[Object],44.asInstanceOf[Long])
        val x66 = x32 + x65
        val x67 = unsafe.putInt(CONST_9.asInstanceOf[Object],44.asInstanceOf[Long], x66)
        val x68 = unsafe.getInt(CONST_9.asInstanceOf[Object],40.asInstanceOf[Long])
        val x69 = x68 > x66
        val x297 = if (x69) {
          val x70 = 8.asInstanceOf[Int] <= x32
          val x180 = if (x70) {
            val x71 = unsafe.monitorExit(CONST_10.asInstanceOf[Object])
            val x72 = unsafe.monitorEnter(CONST_10.asInstanceOf[Object])
            val x73 = x66 != 0.asInstanceOf[Int]
            val x77 = if (x73) {
              val x74 = WARN // refuse 0:<StreamEncoder.write>([CII)V // 10:<OutputStreamWriter.write>([CII)V // 37:<BufferedWriter.flushBuffer>()V // 23:<PrintStream.write>(Ljava/lang/String;)V // 12:<PrintStream.print>(Ljava/lang/String;)V // 9:<PrintStream.println>(Ljava/lang/String;)V // 28:<TestInterpreter1$$anonfun$testC$1$Foo$3.bar>(I)I // 9:<TestInterpreter1$$anonfun$testC$1$$anonfun$2.apply$mcII$sp>(I)I // 5:<TestInterpreter1$$anonfun$testC$1$$anonfun$2.apply>(I)I // 0:<BytecodeInterpreter_Impl.execute>(Ljava/lang/reflect/Method;[Ljava/lang/Object;)Ljava/lang/Object;
              x74
            } else {
              val x75 = unsafe.monitorExit(CONST_10.asInstanceOf[Object])
              val x76 = WARN // refuse 0:<StreamEncoder.flushBuffer>()V // 7:<OutputStreamWriter.flushBuffer>()V // 30:<PrintStream.write>(Ljava/lang/String;)V // 12:<PrintStream.print>(Ljava/lang/String;)V // 9:<PrintStream.println>(Ljava/lang/String;)V // 28:<TestInterpreter1$$anonfun$testC$1$Foo$3.bar>(I)I // 9:<TestInterpreter1$$anonfun$testC$1$$anonfun$2.apply$mcII$sp>(I)I // 5:<TestInterpreter1$$anonfun$testC$1$$anonfun$2.apply>(I)I // 0:<BytecodeInterpreter_Impl.execute>(Ljava/lang/reflect/Method;[Ljava/lang/Object;)Ljava/lang/Object;
              x76
            }
            x77
          } else {
            val PHI_9_8 = x32 // LUBC(0.asInstanceOf[Int],x32)
            val PHI_9_10 = x32 // LUBC(null,x32)
            val LUB_CONST_9_44 = x66 // Alias(None,Some(x66))
            def loop208(PHI_9_10:Int,PHI_9_8:Int)(LUB_CONST_9_44:Int): Unit = {
            val x78 = unsafe.getInt(CONST_9.asInstanceOf[Object],40.asInstanceOf[Long])
            val x79 = -LUB_CONST_9_44
            val x80 = x79 + x78
            val x81 = -PHI_9_8
            val x82 = x81 + 8.asInstanceOf[Int]
            val x83 = x82 <= x80
            val x178 = if (x83) {
              val x84 = x82 + PHI_9_8
              val x85 = PHI_9_8 >= 0.asInstanceOf[Int]
              val x130 = if (x85) {
                val x86 = 8.asInstanceOf[Int] >= x84
                val x127 = if (x86) {
                  val x87 = x84 >= PHI_9_8
                  val x124 = if (x87) {
                    val x88 = -PHI_9_8
                    val x89 = x88 + x84
                    val x90 = java.lang.System.arraycopy(x23,PHI_9_8,CONST_11.asInstanceOf[Object],LUB_CONST_9_44,x89).asInstanceOf[Object]
                    val x91 = x82 + PHI_9_8
                    val x92 = x82 + LUB_CONST_9_44
                    val x93 = unsafe.putInt(CONST_9.asInstanceOf[Object],44.asInstanceOf[Long], x92)
                    val x94 = unsafe.getInt(CONST_9.asInstanceOf[Object],40.asInstanceOf[Long])
                    val x95 = x94 > x92
                    val x119 = if (x95) {
                      val x96 = 8.asInstanceOf[Int] <= x91
                      val x104 = if (x96) {
                        val x97 = unsafe.monitorExit(CONST_10.asInstanceOf[Object])
                        val x98 = unsafe.monitorEnter(CONST_10.asInstanceOf[Object])
                        val x99 = x92 != 0.asInstanceOf[Int]
                        val x103 = if (x99) {
                          val x100 = WARN // refuse 0:<StreamEncoder.write>([CII)V // 10:<OutputStreamWriter.write>([CII)V // 37:<BufferedWriter.flushBuffer>()V // 23:<PrintStream.write>(Ljava/lang/String;)V // 12:<PrintStream.print>(Ljava/lang/String;)V // 9:<PrintStream.println>(Ljava/lang/String;)V // 28:<TestInterpreter1$$anonfun$testC$1$Foo$3.bar>(I)I // 9:<TestInterpreter1$$anonfun$testC$1$$anonfun$2.apply$mcII$sp>(I)I // 5:<TestInterpreter1$$anonfun$testC$1$$anonfun$2.apply>(I)I // 0:<BytecodeInterpreter_Impl.execute>(Ljava/lang/reflect/Method;[Ljava/lang/Object;)Ljava/lang/Object;
                          x100
                        } else {
                          val x101 = unsafe.monitorExit(CONST_10.asInstanceOf[Object])
                          val x102 = WARN // refuse 0:<StreamEncoder.flushBuffer>()V // 7:<OutputStreamWriter.flushBuffer>()V // 30:<PrintStream.write>(Ljava/lang/String;)V // 12:<PrintStream.print>(Ljava/lang/String;)V // 9:<PrintStream.println>(Ljava/lang/String;)V // 28:<TestInterpreter1$$anonfun$testC$1$Foo$3.bar>(I)I // 9:<TestInterpreter1$$anonfun$testC$1$$anonfun$2.apply$mcII$sp>(I)I // 5:<TestInterpreter1$$anonfun$testC$1$$anonfun$2.apply>(I)I // 0:<BytecodeInterpreter_Impl.execute>(Ljava/lang/reflect/Method;[Ljava/lang/Object;)Ljava/lang/Object;
                          x102
                        }
                        x103
                      } else {
                        ;{val PHI_9_8 = x91 // LUBC(0.asInstanceOf[Int],x91)
                        val PHI_9_10 = x82 // LUBC(null,x82)
                        val LUB_CONST_9_44 = x92 // Alias(None,Some(x92))
                        loop208(PHI_9_10,PHI_9_8)(LUB_CONST_9_44)}
                      }
                      x104
                    } else {
                      val x105 = unsafe.monitorEnter(CONST_10.asInstanceOf[Object])
                      val x106 = x92 != 0.asInstanceOf[Int]
                      val x118 = if (x106) {
                        val x107 = WARN // refuse 0:<StreamEncoder.write>([CII)V // 10:<OutputStreamWriter.write>([CII)V // 37:<BufferedWriter.flushBuffer>()V // 99:<BufferedWriter.write>(Ljava/lang/String;II)V // 10:<Writer.write>(Ljava/lang/String;)V // 16:<PrintStream.write>(Ljava/lang/String;)V // 12:<PrintStream.print>(Ljava/lang/String;)V // 9:<PrintStream.println>(Ljava/lang/String;)V // 28:<TestInterpreter1$$anonfun$testC$1$Foo$3.bar>(I)I // 9:<TestInterpreter1$$anonfun$testC$1$$anonfun$2.apply$mcII$sp>(I)I // 5:<TestInterpreter1$$anonfun$testC$1$$anonfun$2.apply>(I)I // 0:<BytecodeInterpreter_Impl.execute>(Ljava/lang/reflect/Method;[Ljava/lang/Object;)Ljava/lang/Object;
                        x107
                      } else {
                        val x108 = unsafe.monitorExit(CONST_10.asInstanceOf[Object])
                        val x109 = 8.asInstanceOf[Int] <= x91
                        val x117 = if (x109) {
                          val x110 = unsafe.monitorExit(CONST_10.asInstanceOf[Object])
                          val x111 = unsafe.monitorEnter(CONST_10.asInstanceOf[Object])
                          val x112 = x92 != 0.asInstanceOf[Int]
                          val x116 = if (x112) {
                            val x113 = WARN // refuse 0:<StreamEncoder.write>([CII)V // 10:<OutputStreamWriter.write>([CII)V // 37:<BufferedWriter.flushBuffer>()V // 23:<PrintStream.write>(Ljava/lang/String;)V // 12:<PrintStream.print>(Ljava/lang/String;)V // 9:<PrintStream.println>(Ljava/lang/String;)V // 28:<TestInterpreter1$$anonfun$testC$1$Foo$3.bar>(I)I // 9:<TestInterpreter1$$anonfun$testC$1$$anonfun$2.apply$mcII$sp>(I)I // 5:<TestInterpreter1$$anonfun$testC$1$$anonfun$2.apply>(I)I // 0:<BytecodeInterpreter_Impl.execute>(Ljava/lang/reflect/Method;[Ljava/lang/Object;)Ljava/lang/Object;
                            x113
                          } else {
                            val x114 = unsafe.monitorExit(CONST_10.asInstanceOf[Object])
                            val x115 = WARN // refuse 0:<StreamEncoder.flushBuffer>()V // 7:<OutputStreamWriter.flushBuffer>()V // 30:<PrintStream.write>(Ljava/lang/String;)V // 12:<PrintStream.print>(Ljava/lang/String;)V // 9:<PrintStream.println>(Ljava/lang/String;)V // 28:<TestInterpreter1$$anonfun$testC$1$Foo$3.bar>(I)I // 9:<TestInterpreter1$$anonfun$testC$1$$anonfun$2.apply$mcII$sp>(I)I // 5:<TestInterpreter1$$anonfun$testC$1$$anonfun$2.apply>(I)I // 0:<BytecodeInterpreter_Impl.execute>(Ljava/lang/reflect/Method;[Ljava/lang/Object;)Ljava/lang/Object;
                            x115
                          }
                          x116
                        } else {
                          ;{val PHI_9_8 = x91 // LUBC(0.asInstanceOf[Int],x91)
                          val PHI_9_10 = x82 // LUBC(null,x82)
                          val LUB_CONST_9_44 = x92 // Alias(None,Some(x92))
                          loop208(PHI_9_10,PHI_9_8)(LUB_CONST_9_44)}
                        }
                        x117
                      }
                      x118
                    }
                    x119
                  } else {
                    val x120 = unsafe.allocateInstance(Class.forName("java.lang.StringIndexOutOfBoundsException"))
                    val x121 = -PHI_9_8
                    val x122 = x121 + x84
                    val x123 = WARN // refuse 0:<StringIndexOutOfBoundsException.<init>>(I)V // 46:<String.getChars>(II[CI)V // 66:<BufferedWriter.write>(Ljava/lang/String;II)V // 10:<Writer.write>(Ljava/lang/String;)V // 16:<PrintStream.write>(Ljava/lang/String;)V // 12:<PrintStream.print>(Ljava/lang/String;)V // 9:<PrintStream.println>(Ljava/lang/String;)V // 28:<TestInterpreter1$$anonfun$testC$1$Foo$3.bar>(I)I // 9:<TestInterpreter1$$anonfun$testC$1$$anonfun$2.apply$mcII$sp>(I)I // 5:<TestInterpreter1$$anonfun$testC$1$$anonfun$2.apply>(I)I // 0:<BytecodeInterpreter_Impl.execute>(Ljava/lang/reflect/Method;[Ljava/lang/Object;)Ljava/lang/Object;
                    x123
                  }
                  x124
                } else {
                  val x125 = unsafe.allocateInstance(Class.forName("java.lang.StringIndexOutOfBoundsException"))
                  val x126 = WARN // refuse 0:<StringIndexOutOfBoundsException.<init>>(I)V // 30:<String.getChars>(II[CI)V // 66:<BufferedWriter.write>(Ljava/lang/String;II)V // 10:<Writer.write>(Ljava/lang/String;)V // 16:<PrintStream.write>(Ljava/lang/String;)V // 12:<PrintStream.print>(Ljava/lang/String;)V // 9:<PrintStream.println>(Ljava/lang/String;)V // 28:<TestInterpreter1$$anonfun$testC$1$Foo$3.bar>(I)I // 9:<TestInterpreter1$$anonfun$testC$1$$anonfun$2.apply$mcII$sp>(I)I // 5:<TestInterpreter1$$anonfun$testC$1$$anonfun$2.apply>(I)I // 0:<BytecodeInterpreter_Impl.execute>(Ljava/lang/reflect/Method;[Ljava/lang/Object;)Ljava/lang/Object;
                  x126
                }
                x127
              } else {
                val x128 = unsafe.allocateInstance(Class.forName("java.lang.StringIndexOutOfBoundsException"))
                val x129 = WARN // refuse 0:<StringIndexOutOfBoundsException.<init>>(I)V // 12:<String.getChars>(II[CI)V // 66:<BufferedWriter.write>(Ljava/lang/String;II)V // 10:<Writer.write>(Ljava/lang/String;)V // 16:<PrintStream.write>(Ljava/lang/String;)V // 12:<PrintStream.print>(Ljava/lang/String;)V // 9:<PrintStream.println>(Ljava/lang/String;)V // 28:<TestInterpreter1$$anonfun$testC$1$Foo$3.bar>(I)I // 9:<TestInterpreter1$$anonfun$testC$1$$anonfun$2.apply$mcII$sp>(I)I // 5:<TestInterpreter1$$anonfun$testC$1$$anonfun$2.apply>(I)I // 0:<BytecodeInterpreter_Impl.execute>(Ljava/lang/reflect/Method;[Ljava/lang/Object;)Ljava/lang/Object;
                x129
              }
              x130
            } else {
              val x131 = x80 + PHI_9_8
              val x132 = PHI_9_8 >= 0.asInstanceOf[Int]
              val x177 = if (x132) {
                val x133 = 8.asInstanceOf[Int] >= x131
                val x174 = if (x133) {
                  val x134 = x131 >= PHI_9_8
                  val x171 = if (x134) {
                    val x135 = -PHI_9_8
                    val x136 = x135 + x131
                    val x137 = java.lang.System.arraycopy(x23,PHI_9_8,CONST_11.asInstanceOf[Object],LUB_CONST_9_44,x136).asInstanceOf[Object]
                    val x138 = x80 + PHI_9_8
                    val x139 = x80 + LUB_CONST_9_44
                    val x140 = unsafe.putInt(CONST_9.asInstanceOf[Object],44.asInstanceOf[Long], x139)
                    val x141 = unsafe.getInt(CONST_9.asInstanceOf[Object],40.asInstanceOf[Long])
                    val x142 = x141 > x139
                    val x166 = if (x142) {
                      val x143 = 8.asInstanceOf[Int] <= x138
                      val x151 = if (x143) {
                        val x144 = unsafe.monitorExit(CONST_10.asInstanceOf[Object])
                        val x145 = unsafe.monitorEnter(CONST_10.asInstanceOf[Object])
                        val x146 = x139 != 0.asInstanceOf[Int]
                        val x150 = if (x146) {
                          val x147 = WARN // refuse 0:<StreamEncoder.write>([CII)V // 10:<OutputStreamWriter.write>([CII)V // 37:<BufferedWriter.flushBuffer>()V // 23:<PrintStream.write>(Ljava/lang/String;)V // 12:<PrintStream.print>(Ljava/lang/String;)V // 9:<PrintStream.println>(Ljava/lang/String;)V // 28:<TestInterpreter1$$anonfun$testC$1$Foo$3.bar>(I)I // 9:<TestInterpreter1$$anonfun$testC$1$$anonfun$2.apply$mcII$sp>(I)I // 5:<TestInterpreter1$$anonfun$testC$1$$anonfun$2.apply>(I)I // 0:<BytecodeInterpreter_Impl.execute>(Ljava/lang/reflect/Method;[Ljava/lang/Object;)Ljava/lang/Object;
                          x147
                        } else {
                          val x148 = unsafe.monitorExit(CONST_10.asInstanceOf[Object])
                          val x149 = WARN // refuse 0:<StreamEncoder.flushBuffer>()V // 7:<OutputStreamWriter.flushBuffer>()V // 30:<PrintStream.write>(Ljava/lang/String;)V // 12:<PrintStream.print>(Ljava/lang/String;)V // 9:<PrintStream.println>(Ljava/lang/String;)V // 28:<TestInterpreter1$$anonfun$testC$1$Foo$3.bar>(I)I // 9:<TestInterpreter1$$anonfun$testC$1$$anonfun$2.apply$mcII$sp>(I)I // 5:<TestInterpreter1$$anonfun$testC$1$$anonfun$2.apply>(I)I // 0:<BytecodeInterpreter_Impl.execute>(Ljava/lang/reflect/Method;[Ljava/lang/Object;)Ljava/lang/Object;
                          x149
                        }
                        x150
                      } else {
                        ;{val PHI_9_8 = x138 // LUBC(0.asInstanceOf[Int],x138)
                        val PHI_9_10 = x80 // LUBC(null,x80)
                        val LUB_CONST_9_44 = x139 // Alias(None,Some(x139))
                        loop208(PHI_9_10,PHI_9_8)(LUB_CONST_9_44)}
                      }
                      x151
                    } else {
                      val x152 = unsafe.monitorEnter(CONST_10.asInstanceOf[Object])
                      val x153 = x139 != 0.asInstanceOf[Int]
                      val x165 = if (x153) {
                        val x154 = WARN // refuse 0:<StreamEncoder.write>([CII)V // 10:<OutputStreamWriter.write>([CII)V // 37:<BufferedWriter.flushBuffer>()V // 99:<BufferedWriter.write>(Ljava/lang/String;II)V // 10:<Writer.write>(Ljava/lang/String;)V // 16:<PrintStream.write>(Ljava/lang/String;)V // 12:<PrintStream.print>(Ljava/lang/String;)V // 9:<PrintStream.println>(Ljava/lang/String;)V // 28:<TestInterpreter1$$anonfun$testC$1$Foo$3.bar>(I)I // 9:<TestInterpreter1$$anonfun$testC$1$$anonfun$2.apply$mcII$sp>(I)I // 5:<TestInterpreter1$$anonfun$testC$1$$anonfun$2.apply>(I)I // 0:<BytecodeInterpreter_Impl.execute>(Ljava/lang/reflect/Method;[Ljava/lang/Object;)Ljava/lang/Object;
                        x154
                      } else {
                        val x155 = unsafe.monitorExit(CONST_10.asInstanceOf[Object])
                        val x156 = 8.asInstanceOf[Int] <= x138
                        val x164 = if (x156) {
                          val x157 = unsafe.monitorExit(CONST_10.asInstanceOf[Object])
                          val x158 = unsafe.monitorEnter(CONST_10.asInstanceOf[Object])
                          val x159 = x139 != 0.asInstanceOf[Int]
                          val x163 = if (x159) {
                            val x160 = WARN // refuse 0:<StreamEncoder.write>([CII)V // 10:<OutputStreamWriter.write>([CII)V // 37:<BufferedWriter.flushBuffer>()V // 23:<PrintStream.write>(Ljava/lang/String;)V // 12:<PrintStream.print>(Ljava/lang/String;)V // 9:<PrintStream.println>(Ljava/lang/String;)V // 28:<TestInterpreter1$$anonfun$testC$1$Foo$3.bar>(I)I // 9:<TestInterpreter1$$anonfun$testC$1$$anonfun$2.apply$mcII$sp>(I)I // 5:<TestInterpreter1$$anonfun$testC$1$$anonfun$2.apply>(I)I // 0:<BytecodeInterpreter_Impl.execute>(Ljava/lang/reflect/Method;[Ljava/lang/Object;)Ljava/lang/Object;
                            x160
                          } else {
                            val x161 = unsafe.monitorExit(CONST_10.asInstanceOf[Object])
                            val x162 = WARN // refuse 0:<StreamEncoder.flushBuffer>()V // 7:<OutputStreamWriter.flushBuffer>()V // 30:<PrintStream.write>(Ljava/lang/String;)V // 12:<PrintStream.print>(Ljava/lang/String;)V // 9:<PrintStream.println>(Ljava/lang/String;)V // 28:<TestInterpreter1$$anonfun$testC$1$Foo$3.bar>(I)I // 9:<TestInterpreter1$$anonfun$testC$1$$anonfun$2.apply$mcII$sp>(I)I // 5:<TestInterpreter1$$anonfun$testC$1$$anonfun$2.apply>(I)I // 0:<BytecodeInterpreter_Impl.execute>(Ljava/lang/reflect/Method;[Ljava/lang/Object;)Ljava/lang/Object;
                            x162
                          }
                          x163
                        } else {
                          ;{val PHI_9_8 = x138 // LUBC(0.asInstanceOf[Int],x138)
                          val PHI_9_10 = x80 // LUBC(null,x80)
                          val LUB_CONST_9_44 = x139 // Alias(None,Some(x139))
                          loop208(PHI_9_10,PHI_9_8)(LUB_CONST_9_44)}
                        }
                        x164
                      }
                      x165
                    }
                    x166
                  } else {
                    val x167 = unsafe.allocateInstance(Class.forName("java.lang.StringIndexOutOfBoundsException"))
                    val x168 = -PHI_9_8
                    val x169 = x168 + x131
                    val x170 = WARN // refuse 0:<StringIndexOutOfBoundsException.<init>>(I)V // 46:<String.getChars>(II[CI)V // 66:<BufferedWriter.write>(Ljava/lang/String;II)V // 10:<Writer.write>(Ljava/lang/String;)V // 16:<PrintStream.write>(Ljava/lang/String;)V // 12:<PrintStream.print>(Ljava/lang/String;)V // 9:<PrintStream.println>(Ljava/lang/String;)V // 28:<TestInterpreter1$$anonfun$testC$1$Foo$3.bar>(I)I // 9:<TestInterpreter1$$anonfun$testC$1$$anonfun$2.apply$mcII$sp>(I)I // 5:<TestInterpreter1$$anonfun$testC$1$$anonfun$2.apply>(I)I // 0:<BytecodeInterpreter_Impl.execute>(Ljava/lang/reflect/Method;[Ljava/lang/Object;)Ljava/lang/Object;
                    x170
                  }
                  x171
                } else {
                  val x172 = unsafe.allocateInstance(Class.forName("java.lang.StringIndexOutOfBoundsException"))
                  val x173 = WARN // refuse 0:<StringIndexOutOfBoundsException.<init>>(I)V // 30:<String.getChars>(II[CI)V // 66:<BufferedWriter.write>(Ljava/lang/String;II)V // 10:<Writer.write>(Ljava/lang/String;)V // 16:<PrintStream.write>(Ljava/lang/String;)V // 12:<PrintStream.print>(Ljava/lang/String;)V // 9:<PrintStream.println>(Ljava/lang/String;)V // 28:<TestInterpreter1$$anonfun$testC$1$Foo$3.bar>(I)I // 9:<TestInterpreter1$$anonfun$testC$1$$anonfun$2.apply$mcII$sp>(I)I // 5:<TestInterpreter1$$anonfun$testC$1$$anonfun$2.apply>(I)I // 0:<BytecodeInterpreter_Impl.execute>(Ljava/lang/reflect/Method;[Ljava/lang/Object;)Ljava/lang/Object;
                  x173
                }
                x174
              } else {
                val x175 = unsafe.allocateInstance(Class.forName("java.lang.StringIndexOutOfBoundsException"))
                val x176 = WARN // refuse 0:<StringIndexOutOfBoundsException.<init>>(I)V // 12:<String.getChars>(II[CI)V // 66:<BufferedWriter.write>(Ljava/lang/String;II)V // 10:<Writer.write>(Ljava/lang/String;)V // 16:<PrintStream.write>(Ljava/lang/String;)V // 12:<PrintStream.print>(Ljava/lang/String;)V // 9:<PrintStream.println>(Ljava/lang/String;)V // 28:<TestInterpreter1$$anonfun$testC$1$Foo$3.bar>(I)I // 9:<TestInterpreter1$$anonfun$testC$1$$anonfun$2.apply$mcII$sp>(I)I // 5:<TestInterpreter1$$anonfun$testC$1$$anonfun$2.apply>(I)I // 0:<BytecodeInterpreter_Impl.execute>(Ljava/lang/reflect/Method;[Ljava/lang/Object;)Ljava/lang/Object;
                x176
              }
              x177
            }
            x178
            }
            val x179 = loop208(PHI_9_10,PHI_9_8)(LUB_CONST_9_44)
            x179
          }
          x180
        } else {
          val x181 = unsafe.monitorEnter(CONST_10.asInstanceOf[Object])
          val x182 = x66 != 0.asInstanceOf[Int]
          val x296 = if (x182) {
            val x183 = WARN // refuse 0:<StreamEncoder.write>([CII)V // 10:<OutputStreamWriter.write>([CII)V // 37:<BufferedWriter.flushBuffer>()V // 99:<BufferedWriter.write>(Ljava/lang/String;II)V // 10:<Writer.write>(Ljava/lang/String;)V // 16:<PrintStream.write>(Ljava/lang/String;)V // 12:<PrintStream.print>(Ljava/lang/String;)V // 9:<PrintStream.println>(Ljava/lang/String;)V // 28:<TestInterpreter1$$anonfun$testC$1$Foo$3.bar>(I)I // 9:<TestInterpreter1$$anonfun$testC$1$$anonfun$2.apply$mcII$sp>(I)I // 5:<TestInterpreter1$$anonfun$testC$1$$anonfun$2.apply>(I)I // 0:<BytecodeInterpreter_Impl.execute>(Ljava/lang/reflect/Method;[Ljava/lang/Object;)Ljava/lang/Object;
            x183
          } else {
            val x184 = unsafe.monitorExit(CONST_10.asInstanceOf[Object])
            val x185 = 8.asInstanceOf[Int] <= x32
            val x295 = if (x185) {
              val x186 = unsafe.monitorExit(CONST_10.asInstanceOf[Object])
              val x187 = unsafe.monitorEnter(CONST_10.asInstanceOf[Object])
              val x188 = x66 != 0.asInstanceOf[Int]
              val x192 = if (x188) {
                val x189 = WARN // refuse 0:<StreamEncoder.write>([CII)V // 10:<OutputStreamWriter.write>([CII)V // 37:<BufferedWriter.flushBuffer>()V // 23:<PrintStream.write>(Ljava/lang/String;)V // 12:<PrintStream.print>(Ljava/lang/String;)V // 9:<PrintStream.println>(Ljava/lang/String;)V // 28:<TestInterpreter1$$anonfun$testC$1$Foo$3.bar>(I)I // 9:<TestInterpreter1$$anonfun$testC$1$$anonfun$2.apply$mcII$sp>(I)I // 5:<TestInterpreter1$$anonfun$testC$1$$anonfun$2.apply>(I)I // 0:<BytecodeInterpreter_Impl.execute>(Ljava/lang/reflect/Method;[Ljava/lang/Object;)Ljava/lang/Object;
                x189
              } else {
                val x190 = unsafe.monitorExit(CONST_10.asInstanceOf[Object])
                val x191 = WARN // refuse 0:<StreamEncoder.flushBuffer>()V // 7:<OutputStreamWriter.flushBuffer>()V // 30:<PrintStream.write>(Ljava/lang/String;)V // 12:<PrintStream.print>(Ljava/lang/String;)V // 9:<PrintStream.println>(Ljava/lang/String;)V // 28:<TestInterpreter1$$anonfun$testC$1$Foo$3.bar>(I)I // 9:<TestInterpreter1$$anonfun$testC$1$$anonfun$2.apply$mcII$sp>(I)I // 5:<TestInterpreter1$$anonfun$testC$1$$anonfun$2.apply>(I)I // 0:<BytecodeInterpreter_Impl.execute>(Ljava/lang/reflect/Method;[Ljava/lang/Object;)Ljava/lang/Object;
                x191
              }
              x192
            } else {
              val PHI_9_8 = x32 // LUBC(0.asInstanceOf[Int],x32)
              val PHI_9_10 = x32 // LUBC(null,x32)
              val LUB_CONST_9_44 = x66 // Alias(None,Some(x66))
              def loop208(PHI_9_10:Int,PHI_9_8:Int)(LUB_CONST_9_44:Int): Unit = {
              val x193 = unsafe.getInt(CONST_9.asInstanceOf[Object],40.asInstanceOf[Long])
              val x194 = -LUB_CONST_9_44
              val x195 = x194 + x193
              val x196 = -PHI_9_8
              val x197 = x196 + 8.asInstanceOf[Int]
              val x198 = x197 <= x195
              val x293 = if (x198) {
                val x199 = x197 + PHI_9_8
                val x200 = PHI_9_8 >= 0.asInstanceOf[Int]
                val x245 = if (x200) {
                  val x201 = 8.asInstanceOf[Int] >= x199
                  val x242 = if (x201) {
                    val x202 = x199 >= PHI_9_8
                    val x239 = if (x202) {
                      val x203 = -PHI_9_8
                      val x204 = x203 + x199
                      val x205 = java.lang.System.arraycopy(x23,PHI_9_8,CONST_11.asInstanceOf[Object],LUB_CONST_9_44,x204).asInstanceOf[Object]
                      val x206 = x197 + PHI_9_8
                      val x207 = x197 + LUB_CONST_9_44
                      val x208 = unsafe.putInt(CONST_9.asInstanceOf[Object],44.asInstanceOf[Long], x207)
                      val x209 = unsafe.getInt(CONST_9.asInstanceOf[Object],40.asInstanceOf[Long])
                      val x210 = x209 > x207
                      val x234 = if (x210) {
                        val x211 = 8.asInstanceOf[Int] <= x206
                        val x219 = if (x211) {
                          val x212 = unsafe.monitorExit(CONST_10.asInstanceOf[Object])
                          val x213 = unsafe.monitorEnter(CONST_10.asInstanceOf[Object])
                          val x214 = x207 != 0.asInstanceOf[Int]
                          val x218 = if (x214) {
                            val x215 = WARN // refuse 0:<StreamEncoder.write>([CII)V // 10:<OutputStreamWriter.write>([CII)V // 37:<BufferedWriter.flushBuffer>()V // 23:<PrintStream.write>(Ljava/lang/String;)V // 12:<PrintStream.print>(Ljava/lang/String;)V // 9:<PrintStream.println>(Ljava/lang/String;)V // 28:<TestInterpreter1$$anonfun$testC$1$Foo$3.bar>(I)I // 9:<TestInterpreter1$$anonfun$testC$1$$anonfun$2.apply$mcII$sp>(I)I // 5:<TestInterpreter1$$anonfun$testC$1$$anonfun$2.apply>(I)I // 0:<BytecodeInterpreter_Impl.execute>(Ljava/lang/reflect/Method;[Ljava/lang/Object;)Ljava/lang/Object;
                            x215
                          } else {
                            val x216 = unsafe.monitorExit(CONST_10.asInstanceOf[Object])
                            val x217 = WARN // refuse 0:<StreamEncoder.flushBuffer>()V // 7:<OutputStreamWriter.flushBuffer>()V // 30:<PrintStream.write>(Ljava/lang/String;)V // 12:<PrintStream.print>(Ljava/lang/String;)V // 9:<PrintStream.println>(Ljava/lang/String;)V // 28:<TestInterpreter1$$anonfun$testC$1$Foo$3.bar>(I)I // 9:<TestInterpreter1$$anonfun$testC$1$$anonfun$2.apply$mcII$sp>(I)I // 5:<TestInterpreter1$$anonfun$testC$1$$anonfun$2.apply>(I)I // 0:<BytecodeInterpreter_Impl.execute>(Ljava/lang/reflect/Method;[Ljava/lang/Object;)Ljava/lang/Object;
                            x217
                          }
                          x218
                        } else {
                          ;{val PHI_9_8 = x206 // LUBC(0.asInstanceOf[Int],x206)
                          val PHI_9_10 = x197 // LUBC(null,x197)
                          val LUB_CONST_9_44 = x207 // Alias(None,Some(x207))
                          loop208(PHI_9_10,PHI_9_8)(LUB_CONST_9_44)}
                        }
                        x219
                      } else {
                        val x220 = unsafe.monitorEnter(CONST_10.asInstanceOf[Object])
                        val x221 = x207 != 0.asInstanceOf[Int]
                        val x233 = if (x221) {
                          val x222 = WARN // refuse 0:<StreamEncoder.write>([CII)V // 10:<OutputStreamWriter.write>([CII)V // 37:<BufferedWriter.flushBuffer>()V // 99:<BufferedWriter.write>(Ljava/lang/String;II)V // 10:<Writer.write>(Ljava/lang/String;)V // 16:<PrintStream.write>(Ljava/lang/String;)V // 12:<PrintStream.print>(Ljava/lang/String;)V // 9:<PrintStream.println>(Ljava/lang/String;)V // 28:<TestInterpreter1$$anonfun$testC$1$Foo$3.bar>(I)I // 9:<TestInterpreter1$$anonfun$testC$1$$anonfun$2.apply$mcII$sp>(I)I // 5:<TestInterpreter1$$anonfun$testC$1$$anonfun$2.apply>(I)I // 0:<BytecodeInterpreter_Impl.execute>(Ljava/lang/reflect/Method;[Ljava/lang/Object;)Ljava/lang/Object;
                          x222
                        } else {
                          val x223 = unsafe.monitorExit(CONST_10.asInstanceOf[Object])
                          val x224 = 8.asInstanceOf[Int] <= x206
                          val x232 = if (x224) {
                            val x225 = unsafe.monitorExit(CONST_10.asInstanceOf[Object])
                            val x226 = unsafe.monitorEnter(CONST_10.asInstanceOf[Object])
                            val x227 = x207 != 0.asInstanceOf[Int]
                            val x231 = if (x227) {
                              val x228 = WARN // refuse 0:<StreamEncoder.write>([CII)V // 10:<OutputStreamWriter.write>([CII)V // 37:<BufferedWriter.flushBuffer>()V // 23:<PrintStream.write>(Ljava/lang/String;)V // 12:<PrintStream.print>(Ljava/lang/String;)V // 9:<PrintStream.println>(Ljava/lang/String;)V // 28:<TestInterpreter1$$anonfun$testC$1$Foo$3.bar>(I)I // 9:<TestInterpreter1$$anonfun$testC$1$$anonfun$2.apply$mcII$sp>(I)I // 5:<TestInterpreter1$$anonfun$testC$1$$anonfun$2.apply>(I)I // 0:<BytecodeInterpreter_Impl.execute>(Ljava/lang/reflect/Method;[Ljava/lang/Object;)Ljava/lang/Object;
                              x228
                            } else {
                              val x229 = unsafe.monitorExit(CONST_10.asInstanceOf[Object])
                              val x230 = WARN // refuse 0:<StreamEncoder.flushBuffer>()V // 7:<OutputStreamWriter.flushBuffer>()V // 30:<PrintStream.write>(Ljava/lang/String;)V // 12:<PrintStream.print>(Ljava/lang/String;)V // 9:<PrintStream.println>(Ljava/lang/String;)V // 28:<TestInterpreter1$$anonfun$testC$1$Foo$3.bar>(I)I // 9:<TestInterpreter1$$anonfun$testC$1$$anonfun$2.apply$mcII$sp>(I)I // 5:<TestInterpreter1$$anonfun$testC$1$$anonfun$2.apply>(I)I // 0:<BytecodeInterpreter_Impl.execute>(Ljava/lang/reflect/Method;[Ljava/lang/Object;)Ljava/lang/Object;
                              x230
                            }
                            x231
                          } else {
                            ;{val PHI_9_8 = x206 // LUBC(0.asInstanceOf[Int],x206)
                            val PHI_9_10 = x197 // LUBC(null,x197)
                            val LUB_CONST_9_44 = x207 // Alias(None,Some(x207))
                            loop208(PHI_9_10,PHI_9_8)(LUB_CONST_9_44)}
                          }
                          x232
                        }
                        x233
                      }
                      x234
                    } else {
                      val x235 = unsafe.allocateInstance(Class.forName("java.lang.StringIndexOutOfBoundsException"))
                      val x236 = -PHI_9_8
                      val x237 = x236 + x199
                      val x238 = WARN // refuse 0:<StringIndexOutOfBoundsException.<init>>(I)V // 46:<String.getChars>(II[CI)V // 66:<BufferedWriter.write>(Ljava/lang/String;II)V // 10:<Writer.write>(Ljava/lang/String;)V // 16:<PrintStream.write>(Ljava/lang/String;)V // 12:<PrintStream.print>(Ljava/lang/String;)V // 9:<PrintStream.println>(Ljava/lang/String;)V // 28:<TestInterpreter1$$anonfun$testC$1$Foo$3.bar>(I)I // 9:<TestInterpreter1$$anonfun$testC$1$$anonfun$2.apply$mcII$sp>(I)I // 5:<TestInterpreter1$$anonfun$testC$1$$anonfun$2.apply>(I)I // 0:<BytecodeInterpreter_Impl.execute>(Ljava/lang/reflect/Method;[Ljava/lang/Object;)Ljava/lang/Object;
                      x238
                    }
                    x239
                  } else {
                    val x240 = unsafe.allocateInstance(Class.forName("java.lang.StringIndexOutOfBoundsException"))
                    val x241 = WARN // refuse 0:<StringIndexOutOfBoundsException.<init>>(I)V // 30:<String.getChars>(II[CI)V // 66:<BufferedWriter.write>(Ljava/lang/String;II)V // 10:<Writer.write>(Ljava/lang/String;)V // 16:<PrintStream.write>(Ljava/lang/String;)V // 12:<PrintStream.print>(Ljava/lang/String;)V // 9:<PrintStream.println>(Ljava/lang/String;)V // 28:<TestInterpreter1$$anonfun$testC$1$Foo$3.bar>(I)I // 9:<TestInterpreter1$$anonfun$testC$1$$anonfun$2.apply$mcII$sp>(I)I // 5:<TestInterpreter1$$anonfun$testC$1$$anonfun$2.apply>(I)I // 0:<BytecodeInterpreter_Impl.execute>(Ljava/lang/reflect/Method;[Ljava/lang/Object;)Ljava/lang/Object;
                    x241
                  }
                  x242
                } else {
                  val x243 = unsafe.allocateInstance(Class.forName("java.lang.StringIndexOutOfBoundsException"))
                  val x244 = WARN // refuse 0:<StringIndexOutOfBoundsException.<init>>(I)V // 12:<String.getChars>(II[CI)V // 66:<BufferedWriter.write>(Ljava/lang/String;II)V // 10:<Writer.write>(Ljava/lang/String;)V // 16:<PrintStream.write>(Ljava/lang/String;)V // 12:<PrintStream.print>(Ljava/lang/String;)V // 9:<PrintStream.println>(Ljava/lang/String;)V // 28:<TestInterpreter1$$anonfun$testC$1$Foo$3.bar>(I)I // 9:<TestInterpreter1$$anonfun$testC$1$$anonfun$2.apply$mcII$sp>(I)I // 5:<TestInterpreter1$$anonfun$testC$1$$anonfun$2.apply>(I)I // 0:<BytecodeInterpreter_Impl.execute>(Ljava/lang/reflect/Method;[Ljava/lang/Object;)Ljava/lang/Object;
                  x244
                }
                x245
              } else {
                val x246 = x195 + PHI_9_8
                val x247 = PHI_9_8 >= 0.asInstanceOf[Int]
                val x292 = if (x247) {
                  val x248 = 8.asInstanceOf[Int] >= x246
                  val x289 = if (x248) {
                    val x249 = x246 >= PHI_9_8
                    val x286 = if (x249) {
                      val x250 = -PHI_9_8
                      val x251 = x250 + x246
                      val x252 = java.lang.System.arraycopy(x23,PHI_9_8,CONST_11.asInstanceOf[Object],LUB_CONST_9_44,x251).asInstanceOf[Object]
                      val x253 = x195 + PHI_9_8
                      val x254 = x195 + LUB_CONST_9_44
                      val x255 = unsafe.putInt(CONST_9.asInstanceOf[Object],44.asInstanceOf[Long], x254)
                      val x256 = unsafe.getInt(CONST_9.asInstanceOf[Object],40.asInstanceOf[Long])
                      val x257 = x256 > x254
                      val x281 = if (x257) {
                        val x258 = 8.asInstanceOf[Int] <= x253
                        val x266 = if (x258) {
                          val x259 = unsafe.monitorExit(CONST_10.asInstanceOf[Object])
                          val x260 = unsafe.monitorEnter(CONST_10.asInstanceOf[Object])
                          val x261 = x254 != 0.asInstanceOf[Int]
                          val x265 = if (x261) {
                            val x262 = WARN // refuse 0:<StreamEncoder.write>([CII)V // 10:<OutputStreamWriter.write>([CII)V // 37:<BufferedWriter.flushBuffer>()V // 23:<PrintStream.write>(Ljava/lang/String;)V // 12:<PrintStream.print>(Ljava/lang/String;)V // 9:<PrintStream.println>(Ljava/lang/String;)V // 28:<TestInterpreter1$$anonfun$testC$1$Foo$3.bar>(I)I // 9:<TestInterpreter1$$anonfun$testC$1$$anonfun$2.apply$mcII$sp>(I)I // 5:<TestInterpreter1$$anonfun$testC$1$$anonfun$2.apply>(I)I // 0:<BytecodeInterpreter_Impl.execute>(Ljava/lang/reflect/Method;[Ljava/lang/Object;)Ljava/lang/Object;
                            x262
                          } else {
                            val x263 = unsafe.monitorExit(CONST_10.asInstanceOf[Object])
                            val x264 = WARN // refuse 0:<StreamEncoder.flushBuffer>()V // 7:<OutputStreamWriter.flushBuffer>()V // 30:<PrintStream.write>(Ljava/lang/String;)V // 12:<PrintStream.print>(Ljava/lang/String;)V // 9:<PrintStream.println>(Ljava/lang/String;)V // 28:<TestInterpreter1$$anonfun$testC$1$Foo$3.bar>(I)I // 9:<TestInterpreter1$$anonfun$testC$1$$anonfun$2.apply$mcII$sp>(I)I // 5:<TestInterpreter1$$anonfun$testC$1$$anonfun$2.apply>(I)I // 0:<BytecodeInterpreter_Impl.execute>(Ljava/lang/reflect/Method;[Ljava/lang/Object;)Ljava/lang/Object;
                            x264
                          }
                          x265
                        } else {
                          ;{val PHI_9_8 = x253 // LUBC(0.asInstanceOf[Int],x253)
                          val PHI_9_10 = x195 // LUBC(null,x195)
                          val LUB_CONST_9_44 = x254 // Alias(None,Some(x254))
                          loop208(PHI_9_10,PHI_9_8)(LUB_CONST_9_44)}
                        }
                        x266
                      } else {
                        val x267 = unsafe.monitorEnter(CONST_10.asInstanceOf[Object])
                        val x268 = x254 != 0.asInstanceOf[Int]
                        val x280 = if (x268) {
                          val x269 = WARN // refuse 0:<StreamEncoder.write>([CII)V // 10:<OutputStreamWriter.write>([CII)V // 37:<BufferedWriter.flushBuffer>()V // 99:<BufferedWriter.write>(Ljava/lang/String;II)V // 10:<Writer.write>(Ljava/lang/String;)V // 16:<PrintStream.write>(Ljava/lang/String;)V // 12:<PrintStream.print>(Ljava/lang/String;)V // 9:<PrintStream.println>(Ljava/lang/String;)V // 28:<TestInterpreter1$$anonfun$testC$1$Foo$3.bar>(I)I // 9:<TestInterpreter1$$anonfun$testC$1$$anonfun$2.apply$mcII$sp>(I)I // 5:<TestInterpreter1$$anonfun$testC$1$$anonfun$2.apply>(I)I // 0:<BytecodeInterpreter_Impl.execute>(Ljava/lang/reflect/Method;[Ljava/lang/Object;)Ljava/lang/Object;
                          x269
                        } else {
                          val x270 = unsafe.monitorExit(CONST_10.asInstanceOf[Object])
                          val x271 = 8.asInstanceOf[Int] <= x253
                          val x279 = if (x271) {
                            val x272 = unsafe.monitorExit(CONST_10.asInstanceOf[Object])
                            val x273 = unsafe.monitorEnter(CONST_10.asInstanceOf[Object])
                            val x274 = x254 != 0.asInstanceOf[Int]
                            val x278 = if (x274) {
                              val x275 = WARN // refuse 0:<StreamEncoder.write>([CII)V // 10:<OutputStreamWriter.write>([CII)V // 37:<BufferedWriter.flushBuffer>()V // 23:<PrintStream.write>(Ljava/lang/String;)V // 12:<PrintStream.print>(Ljava/lang/String;)V // 9:<PrintStream.println>(Ljava/lang/String;)V // 28:<TestInterpreter1$$anonfun$testC$1$Foo$3.bar>(I)I // 9:<TestInterpreter1$$anonfun$testC$1$$anonfun$2.apply$mcII$sp>(I)I // 5:<TestInterpreter1$$anonfun$testC$1$$anonfun$2.apply>(I)I // 0:<BytecodeInterpreter_Impl.execute>(Ljava/lang/reflect/Method;[Ljava/lang/Object;)Ljava/lang/Object;
                              x275
                            } else {
                              val x276 = unsafe.monitorExit(CONST_10.asInstanceOf[Object])
                              val x277 = WARN // refuse 0:<StreamEncoder.flushBuffer>()V // 7:<OutputStreamWriter.flushBuffer>()V // 30:<PrintStream.write>(Ljava/lang/String;)V // 12:<PrintStream.print>(Ljava/lang/String;)V // 9:<PrintStream.println>(Ljava/lang/String;)V // 28:<TestInterpreter1$$anonfun$testC$1$Foo$3.bar>(I)I // 9:<TestInterpreter1$$anonfun$testC$1$$anonfun$2.apply$mcII$sp>(I)I // 5:<TestInterpreter1$$anonfun$testC$1$$anonfun$2.apply>(I)I // 0:<BytecodeInterpreter_Impl.execute>(Ljava/lang/reflect/Method;[Ljava/lang/Object;)Ljava/lang/Object;
                              x277
                            }
                            x278
                          } else {
                            ;{val PHI_9_8 = x253 // LUBC(0.asInstanceOf[Int],x253)
                            val PHI_9_10 = x195 // LUBC(null,x195)
                            val LUB_CONST_9_44 = x254 // Alias(None,Some(x254))
                            loop208(PHI_9_10,PHI_9_8)(LUB_CONST_9_44)}
                          }
                          x279
                        }
                        x280
                      }
                      x281
                    } else {
                      val x282 = unsafe.allocateInstance(Class.forName("java.lang.StringIndexOutOfBoundsException"))
                      val x283 = -PHI_9_8
                      val x284 = x283 + x246
                      val x285 = WARN // refuse 0:<StringIndexOutOfBoundsException.<init>>(I)V // 46:<String.getChars>(II[CI)V // 66:<BufferedWriter.write>(Ljava/lang/String;II)V // 10:<Writer.write>(Ljava/lang/String;)V // 16:<PrintStream.write>(Ljava/lang/String;)V // 12:<PrintStream.print>(Ljava/lang/String;)V // 9:<PrintStream.println>(Ljava/lang/String;)V // 28:<TestInterpreter1$$anonfun$testC$1$Foo$3.bar>(I)I // 9:<TestInterpreter1$$anonfun$testC$1$$anonfun$2.apply$mcII$sp>(I)I // 5:<TestInterpreter1$$anonfun$testC$1$$anonfun$2.apply>(I)I // 0:<BytecodeInterpreter_Impl.execute>(Ljava/lang/reflect/Method;[Ljava/lang/Object;)Ljava/lang/Object;
                      x285
                    }
                    x286
                  } else {
                    val x287 = unsafe.allocateInstance(Class.forName("java.lang.StringIndexOutOfBoundsException"))
                    val x288 = WARN // refuse 0:<StringIndexOutOfBoundsException.<init>>(I)V // 30:<String.getChars>(II[CI)V // 66:<BufferedWriter.write>(Ljava/lang/String;II)V // 10:<Writer.write>(Ljava/lang/String;)V // 16:<PrintStream.write>(Ljava/lang/String;)V // 12:<PrintStream.print>(Ljava/lang/String;)V // 9:<PrintStream.println>(Ljava/lang/String;)V // 28:<TestInterpreter1$$anonfun$testC$1$Foo$3.bar>(I)I // 9:<TestInterpreter1$$anonfun$testC$1$$anonfun$2.apply$mcII$sp>(I)I // 5:<TestInterpreter1$$anonfun$testC$1$$anonfun$2.apply>(I)I // 0:<BytecodeInterpreter_Impl.execute>(Ljava/lang/reflect/Method;[Ljava/lang/Object;)Ljava/lang/Object;
                    x288
                  }
                  x289
                } else {
                  val x290 = unsafe.allocateInstance(Class.forName("java.lang.StringIndexOutOfBoundsException"))
                  val x291 = WARN // refuse 0:<StringIndexOutOfBoundsException.<init>>(I)V // 12:<String.getChars>(II[CI)V // 66:<BufferedWriter.write>(Ljava/lang/String;II)V // 10:<Writer.write>(Ljava/lang/String;)V // 16:<PrintStream.write>(Ljava/lang/String;)V // 12:<PrintStream.print>(Ljava/lang/String;)V // 9:<PrintStream.println>(Ljava/lang/String;)V // 28:<TestInterpreter1$$anonfun$testC$1$Foo$3.bar>(I)I // 9:<TestInterpreter1$$anonfun$testC$1$$anonfun$2.apply$mcII$sp>(I)I // 5:<TestInterpreter1$$anonfun$testC$1$$anonfun$2.apply>(I)I // 0:<BytecodeInterpreter_Impl.execute>(Ljava/lang/reflect/Method;[Ljava/lang/Object;)Ljava/lang/Object;
                  x291
                }
                x292
              }
              x293
              }
              val x294 = loop208(PHI_9_10,PHI_9_8)(LUB_CONST_9_44)
              x294
            }
            x295
          }
          x296
        }
        x297
      } else {
        val x298 = unsafe.allocateInstance(Class.forName("java.lang.StringIndexOutOfBoundsException"))
        val x299 = WARN // refuse 0:<StringIndexOutOfBoundsException.<init>>(I)V // 46:<String.getChars>(II[CI)V // 66:<BufferedWriter.write>(Ljava/lang/String;II)V // 10:<Writer.write>(Ljava/lang/String;)V // 16:<PrintStream.write>(Ljava/lang/String;)V // 12:<PrintStream.print>(Ljava/lang/String;)V // 9:<PrintStream.println>(Ljava/lang/String;)V // 28:<TestInterpreter1$$anonfun$testC$1$Foo$3.bar>(I)I // 9:<TestInterpreter1$$anonfun$testC$1$$anonfun$2.apply$mcII$sp>(I)I // 5:<TestInterpreter1$$anonfun$testC$1$$anonfun$2.apply>(I)I // 0:<BytecodeInterpreter_Impl.execute>(Ljava/lang/reflect/Method;[Ljava/lang/Object;)Ljava/lang/Object;
        x299
      }
      x300
    } else {
      val x301 = unsafe.allocateInstance(Class.forName("java.lang.StringIndexOutOfBoundsException"))
      val x302 = WARN // refuse 0:<StringIndexOutOfBoundsException.<init>>(I)V // 30:<String.getChars>(II[CI)V // 66:<BufferedWriter.write>(Ljava/lang/String;II)V // 10:<Writer.write>(Ljava/lang/String;)V // 16:<PrintStream.write>(Ljava/lang/String;)V // 12:<PrintStream.print>(Ljava/lang/String;)V // 9:<PrintStream.println>(Ljava/lang/String;)V // 28:<TestInterpreter1$$anonfun$testC$1$Foo$3.bar>(I)I // 9:<TestInterpreter1$$anonfun$testC$1$$anonfun$2.apply$mcII$sp>(I)I // 5:<TestInterpreter1$$anonfun$testC$1$$anonfun$2.apply>(I)I // 0:<BytecodeInterpreter_Impl.execute>(Ljava/lang/reflect/Method;[Ljava/lang/Object;)Ljava/lang/Object;
      x302
    }
    x303
  }
}; BODY.RES }
}

compilation: ok
hello: 8