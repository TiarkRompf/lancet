// constants: <function1>,99,lancet.interpreter.TestInterpreter6$Decompiler@3babbd0e,HotSpotMethod<TestInterpreter6$$anonfun$test1$1$$anonfun$2.apply>,Array(CONST_0, x0),HotSpotMethod<BytecodeInterpreter_Exec.execute>,HotSpotMethod<TestInterpreter6$$anonfun$test1$1$$anonfun$2.apply$mcII$sp>,<function0>,HotSpotMethod<TestInterpreter6$$anonfun$test1$1.lancet$interpreter$TestInterpreter6$$anonfun$$compute$1>
class Generated0(CONST_0: lancet.interpreter.TestInterpreter6$$anonfun$test1$1$$anonfun$2,CONST_1: scala.runtime.IntRef,CONST_2: lancet.interpreter.TestInterpreter6$Decompiler,CONST_3: com.oracle.graal.hotspot.meta.HotSpotResolvedJavaMethod,CONST_4: Array[lancet.core.Base_LIR$Rep],CONST_5: com.oracle.graal.hotspot.meta.HotSpotResolvedJavaMethod,CONST_6: com.oracle.graal.hotspot.meta.HotSpotResolvedJavaMethod,CONST_7: lancet.interpreter.TestInterpreter6$$anonfun$test1$1,CONST_8: com.oracle.graal.hotspot.meta.HotSpotResolvedJavaMethod) extends (Int=>Int){
import sun.misc.Unsafe
val unsafe = { val fld = classOf[Unsafe].getDeclaredField("theUnsafe"); fld.setAccessible(true); fld.get(classOf[Unsafe]).asInstanceOf[Unsafe]; }
type char = Char
def WARN = assert(false, "WARN")
def ERROR = assert(false, "ERROR")
def apply(ARG: Int): Int = { object BODY {
  var RES = null.asInstanceOf[Int]
  val x0 = ARG
  val x1 = x0.asInstanceOf[Int]
  // WARNING: multiple returns (2) in HotSpotMethod<TestInterpreter6$$anonfun$test1$1$$anonfun$2.apply$mcII$sp>
  ;{
    var vLUB_CONST_1_elem = null.asInstanceOf[Int]
    var vPHI_2_5 = null.asInstanceOf[Int]
    var vx0 = null.asInstanceOf[Int]
    var vx1 = null.asInstanceOf[Int]
    var vx16 = null.asInstanceOf[Boolean]
    ;{
      val PHI_3_5 = 0 // LUBC(PHI_3_5:Int,0:Int)
      val x32 = unsafe.getInt(CONST_1,16L)
      val LUB_CONST_1_elem = x32 // XXX LUBC(Some(LUB_CONST_1_elem),None)
      BLOCK_2(LUB_CONST_1_elem,PHI_3_5,x0,x1)
    }
    def BLOCK_2(LUB_CONST_1_elem:Int,PHI_3_5:Int,x0:Int,x1:Int): Unit = {
      val x16 = x1 <= PHI_3_5
      if (x16) {
        // return 4_0 to 5:<TestInterpreter6$$anonfun$test1$1$$anonfun$2.apply><(I)I> // 0:<BytecodeInterpreter_Exec.execute><(Ljava/lang/reflect/Method;[Ljava/lang/Object;)Ljava/lang/Object;>
        /*R_1_4_0;*/;{
          val PHI_2_5 = PHI_3_5 // LUBC(x26:Int,PHI_3_5:Int)
          vLUB_CONST_1_elem = LUB_CONST_1_elem
          vPHI_2_5 = PHI_2_5
          vx0 = x0
          vx1 = x1
          vx16 = x16
        };
      } else {
        // WARNING: multiple returns (2) in HotSpotMethod<TestInterpreter6$$anonfun$test1$1.lancet$interpreter$TestInterpreter6$$anonfun$$compute$1>
        val x17 = unsafe.allocateInstance(Class.forName("lancet.interpreter.TestInterpreter6$$anonfun$test1$1$$anonfun$1"))
        unsafe.putObject(x17,16L, CONST_1)
        // return 0_0 to 4:<AbstractFunction0.<init>><()V> // 4:<AbstractFunction0$mcI$sp.<init>><()V> // 9:<TestInterpreter6$$anonfun$test1$1$$anonfun$1.<init>><(Llancet/interpreter/TestInterpreter6$$anonfun$test1$1;Lscala/runtime/IntRef;)V> // 10:<TestInterpreter6$$anonfun$test1$1.lancet$interpreter$TestInterpreter6$$anonfun$$compute$1><(ILlancet/interpreter/TestInterpreter6$Decompiler;Lscala/runtime/IntRef;)I> // 23:<TestInterpreter6$$anonfun$test1$1$$anonfun$2.apply$mcII$sp><(I)I> // 5:<TestInterpreter6$$anonfun$test1$1$$anonfun$2.apply><(I)I> // 0:<BytecodeInterpreter_Exec.execute><(Ljava/lang/reflect/Method;[Ljava/lang/Object;)Ljava/lang/Object;>
        // ret single HotSpotMethod<Object.<init>>
        // return 0_0 to 8:<AbstractFunction0.<init>><()V> // 4:<AbstractFunction0$mcI$sp.<init>><()V> // 9:<TestInterpreter6$$anonfun$test1$1$$anonfun$1.<init>><(Llancet/interpreter/TestInterpreter6$$anonfun$test1$1;Lscala/runtime/IntRef;)V> // 10:<TestInterpreter6$$anonfun$test1$1.lancet$interpreter$TestInterpreter6$$anonfun$$compute$1><(ILlancet/interpreter/TestInterpreter6$Decompiler;Lscala/runtime/IntRef;)I> // 23:<TestInterpreter6$$anonfun$test1$1$$anonfun$2.apply$mcII$sp><(I)I> // 5:<TestInterpreter6$$anonfun$test1$1$$anonfun$2.apply><(I)I> // 0:<BytecodeInterpreter_Exec.execute><(Ljava/lang/reflect/Method;[Ljava/lang/Object;)Ljava/lang/Object;>
        // ret single HotSpotMethod<Function0$class.$init$>
        // return 2_0 to 4:<AbstractFunction0$mcI$sp.<init>><()V> // 9:<TestInterpreter6$$anonfun$test1$1$$anonfun$1.<init>><(Llancet/interpreter/TestInterpreter6$$anonfun$test1$1;Lscala/runtime/IntRef;)V> // 10:<TestInterpreter6$$anonfun$test1$1.lancet$interpreter$TestInterpreter6$$anonfun$$compute$1><(ILlancet/interpreter/TestInterpreter6$Decompiler;Lscala/runtime/IntRef;)I> // 23:<TestInterpreter6$$anonfun$test1$1$$anonfun$2.apply$mcII$sp><(I)I> // 5:<TestInterpreter6$$anonfun$test1$1$$anonfun$2.apply><(I)I> // 0:<BytecodeInterpreter_Exec.execute><(Ljava/lang/reflect/Method;[Ljava/lang/Object;)Ljava/lang/Object;>
        // ret single HotSpotMethod<AbstractFunction0.<init>>
        // return 0_0 to 8:<AbstractFunction0$mcI$sp.<init>><()V> // 9:<TestInterpreter6$$anonfun$test1$1$$anonfun$1.<init>><(Llancet/interpreter/TestInterpreter6$$anonfun$test1$1;Lscala/runtime/IntRef;)V> // 10:<TestInterpreter6$$anonfun$test1$1.lancet$interpreter$TestInterpreter6$$anonfun$$compute$1><(ILlancet/interpreter/TestInterpreter6$Decompiler;Lscala/runtime/IntRef;)I> // 23:<TestInterpreter6$$anonfun$test1$1$$anonfun$2.apply$mcII$sp><(I)I> // 5:<TestInterpreter6$$anonfun$test1$1$$anonfun$2.apply><(I)I> // 0:<BytecodeInterpreter_Exec.execute><(Ljava/lang/reflect/Method;[Ljava/lang/Object;)Ljava/lang/Object;>
        // ret single HotSpotMethod<Function0$mcI$sp$class.$init$>
        // return 2_0 to 9:<TestInterpreter6$$anonfun$test1$1$$anonfun$1.<init>><(Llancet/interpreter/TestInterpreter6$$anonfun$test1$1;Lscala/runtime/IntRef;)V> // 10:<TestInterpreter6$$anonfun$test1$1.lancet$interpreter$TestInterpreter6$$anonfun$$compute$1><(ILlancet/interpreter/TestInterpreter6$Decompiler;Lscala/runtime/IntRef;)I> // 23:<TestInterpreter6$$anonfun$test1$1$$anonfun$2.apply$mcII$sp><(I)I> // 5:<TestInterpreter6$$anonfun$test1$1$$anonfun$2.apply><(I)I> // 0:<BytecodeInterpreter_Exec.execute><(Ljava/lang/reflect/Method;[Ljava/lang/Object;)Ljava/lang/Object;>
        // ret single HotSpotMethod<AbstractFunction0$mcI$sp.<init>>
        // return 1_0 to 10:<TestInterpreter6$$anonfun$test1$1.lancet$interpreter$TestInterpreter6$$anonfun$$compute$1><(ILlancet/interpreter/TestInterpreter6$Decompiler;Lscala/runtime/IntRef;)I> // 23:<TestInterpreter6$$anonfun$test1$1$$anonfun$2.apply$mcII$sp><(I)I> // 5:<TestInterpreter6$$anonfun$test1$1$$anonfun$2.apply><(I)I> // 0:<BytecodeInterpreter_Exec.execute><(Ljava/lang/reflect/Method;[Ljava/lang/Object;)Ljava/lang/Object;>
        // ret single HotSpotMethod<TestInterpreter6$$anonfun$test1$1$$anonfun$1.<init>>
        val x18 = 99.asInstanceOf[Int]
        val x19 = x18.asInstanceOf[Int]
        val x20 = LUB_CONST_1_elem == x19
        if (x20) {
          print("static:  ")
          val x27 = x19.asInstanceOf[Integer]
          println(x27)
          print("dynamic: ")
          val x28 = LUB_CONST_1_elem.asInstanceOf[Integer]
          println(x28)
          val x29 = 50 <= PHI_3_5
          if (x29) {
            val PHI_4_9 = 1 // LUBC(PHI_4_9:Int,1:Int)
            BLOCK_28(LUB_CONST_1_elem,PHI_3_5,PHI_4_9,x0,x1,x16,x17,x18,x19,x20,x27,x28,x29)
          } else {
            val PHI_4_9 = 0 // LUBC(PHI_4_9:Int,0:Int)
            BLOCK_28(LUB_CONST_1_elem,PHI_3_5,PHI_4_9,x0,x1,x16,x17,x18,x19,x20,x27,x28,x29)
          }
        } else {
          val x21 = CONST_2.mkCompilerFrame(Array[Object](null.asInstanceOf[AnyRef],null.asInstanceOf[AnyRef],null.asInstanceOf[AnyRef],CONST_2.asInstanceOf[AnyRef],CONST_3.asInstanceOf[AnyRef],CONST_4.asInstanceOf[AnyRef],null.asInstanceOf[AnyRef],null.asInstanceOf[AnyRef],null.asInstanceOf[AnyRef],null.asInstanceOf[AnyRef],null.asInstanceOf[AnyRef],null.asInstanceOf[AnyRef]), -1, 6, CONST_5, null)
          val x22 = CONST_2.mkCompilerFrame(Array[Object](null.asInstanceOf[AnyRef],null.asInstanceOf[AnyRef],null.asInstanceOf[AnyRef],CONST_0.asInstanceOf[AnyRef],x1.asInstanceOf[AnyRef],null.asInstanceOf[AnyRef],null.asInstanceOf[AnyRef]), 5, 5, CONST_3, x21)
          val x23 = CONST_2.mkCompilerFrame(Array[Object](null.asInstanceOf[AnyRef],null.asInstanceOf[AnyRef],null.asInstanceOf[AnyRef],CONST_0.asInstanceOf[AnyRef],x1.asInstanceOf[AnyRef],PHI_3_5.asInstanceOf[AnyRef],null.asInstanceOf[AnyRef],null.asInstanceOf[AnyRef],null.asInstanceOf[AnyRef],null.asInstanceOf[AnyRef]), 23, 6, CONST_6, x22)
          val x24 = CONST_2.mkCompilerFrame(Array[Object](null.asInstanceOf[AnyRef],null.asInstanceOf[AnyRef],null.asInstanceOf[AnyRef],CONST_7.asInstanceOf[AnyRef],PHI_3_5.asInstanceOf[AnyRef],CONST_2.asInstanceOf[AnyRef],CONST_1.asInstanceOf[AnyRef],x19.asInstanceOf[AnyRef],null.asInstanceOf[AnyRef],null.asInstanceOf[AnyRef],null.asInstanceOf[AnyRef],null.asInstanceOf[AnyRef],null.asInstanceOf[AnyRef]), 35, 8, CONST_8, x23)
          val x25 = CONST_2.execCompiler(x24).asInstanceOf[Int] // drop into freshly compiled
          // old parent: 30:<TestInterpreter6$$anonfun$test1$1.lancet$interpreter$TestInterpreter6$$anonfun$$compute$1><(ILlancet/interpreter/TestInterpreter6$Decompiler;Lscala/runtime/IntRef;)I> // 23:<TestInterpreter6$$anonfun$test1$1$$anonfun$2.apply$mcII$sp><(I)I> // 5:<TestInterpreter6$$anonfun$test1$1$$anonfun$2.apply><(I)I> // 0:<BytecodeInterpreter_Exec.execute><(Ljava/lang/reflect/Method;[Ljava/lang/Object;)Ljava/lang/Object;>
          // new parent: 5:<TestInterpreter6$$anonfun$test1$1$$anonfun$2.apply><(I)I> // 0:<BytecodeInterpreter_Exec.execute><(Ljava/lang/reflect/Method;[Ljava/lang/Object;)Ljava/lang/Object;>
          val x26 = x25.asInstanceOf[Int]
          // return 4_0 to 5:<TestInterpreter6$$anonfun$test1$1$$anonfun$2.apply><(I)I> // 0:<BytecodeInterpreter_Exec.execute><(Ljava/lang/reflect/Method;[Ljava/lang/Object;)Ljava/lang/Object;>
          // return 2_0 to 5:<TestInterpreter6$$anonfun$test1$1$$anonfun$2.apply><(I)I> // 0:<BytecodeInterpreter_Exec.execute><(Ljava/lang/reflect/Method;[Ljava/lang/Object;)Ljava/lang/Object;>
          /*R_1_2_0;*/;{
            val PHI_2_5 = x26 // LUBC(PHI_3_5:Int,x26:Int)
            vLUB_CONST_1_elem = LUB_CONST_1_elem
            vPHI_2_5 = PHI_2_5
            vx0 = x0
            vx1 = x1
            vx16 = x16
          };
        }
        def BLOCK_28(LUB_CONST_1_elem:Int,PHI_3_5:Int,PHI_4_9:Int,x0:Int,x1:Int,x16:Boolean,x17:Object,x18:Int,x19:Int,x20:Boolean,x27:java.lang.Integer,x28:java.lang.Integer,x29:Boolean): Unit = {
          unsafe.putInt(CONST_1,16L, PHI_4_9)
          // return 14_0 to 23:<TestInterpreter6$$anonfun$test1$1$$anonfun$2.apply$mcII$sp><(I)I> // 5:<TestInterpreter6$$anonfun$test1$1$$anonfun$2.apply><(I)I> // 0:<BytecodeInterpreter_Exec.execute><(Ljava/lang/reflect/Method;[Ljava/lang/Object;)Ljava/lang/Object;>
          val x30 = 1 + PHI_3_5
          ;{
            val PHI_3_5 = x30 // LUBC(PHI_3_5:Int,x30:Int)
            val LUB_CONST_1_elem = PHI_4_9 // Alias(Some(LUB_CONST_1_elem),Some(PHI_4_9))
            BLOCK_2(LUB_CONST_1_elem,PHI_3_5,x0,x1)
          }
        }
      }
    }
    ;{
      // ret multi HotSpotMethod<TestInterpreter6$$anonfun$test1$1$$anonfun$2.apply$mcII$sp>
      val LUB_CONST_1_elem = vLUB_CONST_1_elem
      val PHI_2_5 = vPHI_2_5
      val x0 = vx0
      val x1 = vx1
      val x16 = vx16
      (RES = PHI_2_5) // return to root
  }}
  // (no return?)
}; BODY.RES }
}

compilation: ok
static:  99
dynamic: 99
-- start compiling
frame:
HotSpotMethod<TestInterpreter6$$anonfun$test1$1.lancet$interpreter$TestInterpreter6$$anonfun$$compute$1>
CONST_7,1,CONST_2,CONST_1,99,null,null,null,null,null
HotSpotMethod<TestInterpreter6$$anonfun$test1$1$$anonfun$2.apply$mcII$sp>
CONST_0,100,1,null,null,null,null
HotSpotMethod<TestInterpreter6$$anonfun$test1$1$$anonfun$2.apply>
CONST_0,100,null,null
HotSpotMethod<BytecodeInterpreter_Exec.execute>
CONST_2,CONST_3,CONST_4,null,null,null,null,null,null
root:
HotSpotMethod<BytecodeInterpreter_Exec.execute>
CONST_2,CONST_3,CONST_4,null,null,null,null,null,null
// constants: 0,<function1>,lancet.interpreter.TestInterpreter6$Decompiler@3babbd0e,HotSpotMethod<TestInterpreter6$$anonfun$test1$1$$anonfun$2.apply>,Array(CONST_1, x0),HotSpotMethod<BytecodeInterpreter_Exec.execute>,HotSpotMethod<TestInterpreter6$$anonfun$test1$1$$anonfun$2.apply$mcII$sp>,<function0>,HotSpotMethod<TestInterpreter6$$anonfun$test1$1.lancet$interpreter$TestInterpreter6$$anonfun$$compute$1>
class Generated1(CONST_0: scala.runtime.IntRef,CONST_1: lancet.interpreter.TestInterpreter6$$anonfun$test1$1$$anonfun$2,CONST_2: lancet.interpreter.TestInterpreter6$Decompiler,CONST_3: com.oracle.graal.hotspot.meta.HotSpotResolvedJavaMethod,CONST_4: Array[lancet.core.Base_LIR$Rep],CONST_5: com.oracle.graal.hotspot.meta.HotSpotResolvedJavaMethod,CONST_6: com.oracle.graal.hotspot.meta.HotSpotResolvedJavaMethod,CONST_7: lancet.interpreter.TestInterpreter6$$anonfun$test1$1,CONST_8: com.oracle.graal.hotspot.meta.HotSpotResolvedJavaMethod) extends (Unit=>Int){
import sun.misc.Unsafe
val unsafe = { val fld = classOf[Unsafe].getDeclaredField("theUnsafe"); fld.setAccessible(true); fld.get(classOf[Unsafe]).asInstanceOf[Unsafe]; }
type char = Char
def WARN = assert(false, "WARN")
def ERROR = assert(false, "ERROR")
def apply(ARG: Unit): Int = { object BODY {
  var RES = null.asInstanceOf[Int]
  ARG
  // need to fix block ordering for bci=35
  // old: B0[0->7],B1[10->10],B2[15->15],B3[18->26],B4[29->30],B5[35->40],B6[43->48],B7[51->51],B8[54->59],B9[62->69],B10[72->72],B11[75->79],B12[82->83],B13[86->86],B14[87->92]
  // new: B5[35->40],B6[43->48],B7[51->51],B8[54->59],B9[62->69],B10[72->72],B11[75->79],B12[82->83],B13[86->86],B14[87->92]
  // fixed: B0[35->40],B1[43->48],B2[51->51],B3[54->59],B4[62->69],B5[72->72],B6[75->79],B7[82->83],B8[86->86],B9[87->92]
  print("static:  ")
  val x33 = 99.asInstanceOf[Integer]
  println(x33)
  print("dynamic: ")
  val x34 = unsafe.getInt(CONST_0,16L)
  val x35 = x34.asInstanceOf[Integer]
  println(x35)
  unsafe.putInt(CONST_0,16L, 0)
  // return 9_0 to 23:<TestInterpreter6$$anonfun$test1$1$$anonfun$2.apply$mcII$sp><(I)I> // 5:<TestInterpreter6$$anonfun$test1$1$$anonfun$2.apply><(I)I> // -1:<BytecodeInterpreter_Exec.execute><(Ljava/lang/reflect/Method;[Ljava/lang/Object;)Ljava/lang/Object;>
  // ret single HotSpotMethod<TestInterpreter6$$anonfun$test1$1.lancet$interpreter$TestInterpreter6$$anonfun$$compute$1>
  // need to fix block ordering for bci=23
  // old: B0[0->1],B1[2->4 L],B2[7->20],B3[23->32],B4[35->36]
  // new: B3[23->32],B1[2->4 L],B2[7->20],B4[35->36]
  // fixed: B0[23->32],B1[2->4 L],B2[7->20],B3[35->36]
  // WARNING: multiple returns (2) in HotSpotMethod<TestInterpreter6$$anonfun$test1$1$$anonfun$2.apply$mcII$sp>
  ;{
    var vLUB_CONST_0_elem = null.asInstanceOf[Int]
    var vPHI_2_5 = null.asInstanceOf[Int]
    var vx33 = null.asInstanceOf[java.lang.Integer]
    var vx34 = null.asInstanceOf[Int]
    var vx35 = null.asInstanceOf[java.lang.Integer]
    var vx63 = null.asInstanceOf[Int]
    var vx64 = null.asInstanceOf[Boolean]
    // should not inline start block 0
    ;{
      val PHI_3_5 = 1 // LUBC(PHI_3_5:Int,1:Int)
      val PHI_3_7 = null // LUBC(PHI_3_7:scala.runtime.Null$,null:scala.runtime.Null$)
      val PHI_3_8 = null // LUBC(PHI_3_8:scala.runtime.Null$,null:scala.runtime.Null$)
      val PHI_3_9 = null // LUBC(PHI_3_9:scala.runtime.Null$,null:scala.runtime.Null$)
      val LUB_CONST_0_elem = 0 // Alias(Some(LUB_CONST_0_elem),Some(0))
      BLOCK_42(LUB_CONST_0_elem,PHI_3_5,PHI_3_7,PHI_3_8,PHI_3_9,x33,x34,x35)
    }
    def BLOCK_42(LUB_CONST_0_elem:Int,PHI_3_5:Int,PHI_3_7:scala.runtime.Null$,PHI_3_8:scala.runtime.Null$,PHI_3_9:scala.runtime.Null$,x33:java.lang.Integer,x34:Int,x35:java.lang.Integer): Unit = {
      val x63 = 1 + PHI_3_5
      val x64 = 100 <= x63
      if (x64) {
        // return 3_0 to 5:<TestInterpreter6$$anonfun$test1$1$$anonfun$2.apply><(I)I> // -1:<BytecodeInterpreter_Exec.execute><(Ljava/lang/reflect/Method;[Ljava/lang/Object;)Ljava/lang/Object;>
        /*R_42_3_0;*/;{
          val PHI_2_5 = x63 // LUBC(x74:Int,x63:Int)
          vLUB_CONST_0_elem = LUB_CONST_0_elem
          vPHI_2_5 = PHI_2_5
          vx33 = x33
          vx34 = x34
          vx35 = x35
          vx63 = x63
          vx64 = x64
        };
      } else {
        // WARNING: multiple returns (2) in HotSpotMethod<TestInterpreter6$$anonfun$test1$1.lancet$interpreter$TestInterpreter6$$anonfun$$compute$1>
        val x65 = unsafe.allocateInstance(Class.forName("lancet.interpreter.TestInterpreter6$$anonfun$test1$1$$anonfun$1"))
        unsafe.putObject(x65,16L, CONST_0)
        // return 0_0 to 4:<AbstractFunction0.<init>><()V> // 4:<AbstractFunction0$mcI$sp.<init>><()V> // 9:<TestInterpreter6$$anonfun$test1$1$$anonfun$1.<init>><(Llancet/interpreter/TestInterpreter6$$anonfun$test1$1;Lscala/runtime/IntRef;)V> // 10:<TestInterpreter6$$anonfun$test1$1.lancet$interpreter$TestInterpreter6$$anonfun$$compute$1><(ILlancet/interpreter/TestInterpreter6$Decompiler;Lscala/runtime/IntRef;)I> // 23:<TestInterpreter6$$anonfun$test1$1$$anonfun$2.apply$mcII$sp><(I)I> // 5:<TestInterpreter6$$anonfun$test1$1$$anonfun$2.apply><(I)I> // -1:<BytecodeInterpreter_Exec.execute><(Ljava/lang/reflect/Method;[Ljava/lang/Object;)Ljava/lang/Object;>
        // ret single HotSpotMethod<Object.<init>>
        // return 0_0 to 8:<AbstractFunction0.<init>><()V> // 4:<AbstractFunction0$mcI$sp.<init>><()V> // 9:<TestInterpreter6$$anonfun$test1$1$$anonfun$1.<init>><(Llancet/interpreter/TestInterpreter6$$anonfun$test1$1;Lscala/runtime/IntRef;)V> // 10:<TestInterpreter6$$anonfun$test1$1.lancet$interpreter$TestInterpreter6$$anonfun$$compute$1><(ILlancet/interpreter/TestInterpreter6$Decompiler;Lscala/runtime/IntRef;)I> // 23:<TestInterpreter6$$anonfun$test1$1$$anonfun$2.apply$mcII$sp><(I)I> // 5:<TestInterpreter6$$anonfun$test1$1$$anonfun$2.apply><(I)I> // -1:<BytecodeInterpreter_Exec.execute><(Ljava/lang/reflect/Method;[Ljava/lang/Object;)Ljava/lang/Object;>
        // ret single HotSpotMethod<Function0$class.$init$>
        // return 2_0 to 4:<AbstractFunction0$mcI$sp.<init>><()V> // 9:<TestInterpreter6$$anonfun$test1$1$$anonfun$1.<init>><(Llancet/interpreter/TestInterpreter6$$anonfun$test1$1;Lscala/runtime/IntRef;)V> // 10:<TestInterpreter6$$anonfun$test1$1.lancet$interpreter$TestInterpreter6$$anonfun$$compute$1><(ILlancet/interpreter/TestInterpreter6$Decompiler;Lscala/runtime/IntRef;)I> // 23:<TestInterpreter6$$anonfun$test1$1$$anonfun$2.apply$mcII$sp><(I)I> // 5:<TestInterpreter6$$anonfun$test1$1$$anonfun$2.apply><(I)I> // -1:<BytecodeInterpreter_Exec.execute><(Ljava/lang/reflect/Method;[Ljava/lang/Object;)Ljava/lang/Object;>
        // ret single HotSpotMethod<AbstractFunction0.<init>>
        // return 0_0 to 8:<AbstractFunction0$mcI$sp.<init>><()V> // 9:<TestInterpreter6$$anonfun$test1$1$$anonfun$1.<init>><(Llancet/interpreter/TestInterpreter6$$anonfun$test1$1;Lscala/runtime/IntRef;)V> // 10:<TestInterpreter6$$anonfun$test1$1.lancet$interpreter$TestInterpreter6$$anonfun$$compute$1><(ILlancet/interpreter/TestInterpreter6$Decompiler;Lscala/runtime/IntRef;)I> // 23:<TestInterpreter6$$anonfun$test1$1$$anonfun$2.apply$mcII$sp><(I)I> // 5:<TestInterpreter6$$anonfun$test1$1$$anonfun$2.apply><(I)I> // -1:<BytecodeInterpreter_Exec.execute><(Ljava/lang/reflect/Method;[Ljava/lang/Object;)Ljava/lang/Object;>
        // ret single HotSpotMethod<Function0$mcI$sp$class.$init$>
        // return 2_0 to 9:<TestInterpreter6$$anonfun$test1$1$$anonfun$1.<init>><(Llancet/interpreter/TestInterpreter6$$anonfun$test1$1;Lscala/runtime/IntRef;)V> // 10:<TestInterpreter6$$anonfun$test1$1.lancet$interpreter$TestInterpreter6$$anonfun$$compute$1><(ILlancet/interpreter/TestInterpreter6$Decompiler;Lscala/runtime/IntRef;)I> // 23:<TestInterpreter6$$anonfun$test1$1$$anonfun$2.apply$mcII$sp><(I)I> // 5:<TestInterpreter6$$anonfun$test1$1$$anonfun$2.apply><(I)I> // -1:<BytecodeInterpreter_Exec.execute><(Ljava/lang/reflect/Method;[Ljava/lang/Object;)Ljava/lang/Object;>
        // ret single HotSpotMethod<AbstractFunction0$mcI$sp.<init>>
        // return 1_0 to 10:<TestInterpreter6$$anonfun$test1$1.lancet$interpreter$TestInterpreter6$$anonfun$$compute$1><(ILlancet/interpreter/TestInterpreter6$Decompiler;Lscala/runtime/IntRef;)I> // 23:<TestInterpreter6$$anonfun$test1$1$$anonfun$2.apply$mcII$sp><(I)I> // 5:<TestInterpreter6$$anonfun$test1$1$$anonfun$2.apply><(I)I> // -1:<BytecodeInterpreter_Exec.execute><(Ljava/lang/reflect/Method;[Ljava/lang/Object;)Ljava/lang/Object;>
        // ret single HotSpotMethod<TestInterpreter6$$anonfun$test1$1$$anonfun$1.<init>>
        val x66 = 0.asInstanceOf[Int]
        val x67 = x66.asInstanceOf[Int]
        val x68 = LUB_CONST_0_elem == x67
        if (x68) {
          print("static:  ")
          val x75 = x67.asInstanceOf[Integer]
          println(x75)
          print("dynamic: ")
          val x76 = LUB_CONST_0_elem.asInstanceOf[Integer]
          println(x76)
          val x77 = 50 <= x63
          if (x77) {
            val PHI_4_9 = 1 // LUBC(PHI_4_9:Int,1:Int)
            BLOCK_41(LUB_CONST_0_elem,PHI_4_9,x33,x34,x35,x63,x64,x65,x66,x67,x68,x75,x76,x77)
          } else {
            val PHI_4_9 = 0 // LUBC(PHI_4_9:Int,0:Int)
            BLOCK_41(LUB_CONST_0_elem,PHI_4_9,x33,x34,x35,x63,x64,x65,x66,x67,x68,x75,x76,x77)
          }
        } else {
          val x69 = CONST_2.mkCompilerFrame(Array[Object](null.asInstanceOf[AnyRef],null.asInstanceOf[AnyRef],null.asInstanceOf[AnyRef],CONST_2.asInstanceOf[AnyRef],CONST_3.asInstanceOf[AnyRef],CONST_4.asInstanceOf[AnyRef],null.asInstanceOf[AnyRef],null.asInstanceOf[AnyRef],null.asInstanceOf[AnyRef],null.asInstanceOf[AnyRef],null.asInstanceOf[AnyRef],null.asInstanceOf[AnyRef]), -1, 6, CONST_5, null)
          val x70 = CONST_2.mkCompilerFrame(Array[Object](null.asInstanceOf[AnyRef],null.asInstanceOf[AnyRef],null.asInstanceOf[AnyRef],CONST_1.asInstanceOf[AnyRef],100.asInstanceOf[AnyRef],null.asInstanceOf[AnyRef],null.asInstanceOf[AnyRef]), 5, 5, CONST_3, x69)
          val x71 = CONST_2.mkCompilerFrame(Array[Object](null.asInstanceOf[AnyRef],null.asInstanceOf[AnyRef],null.asInstanceOf[AnyRef],CONST_1.asInstanceOf[AnyRef],100.asInstanceOf[AnyRef],x63.asInstanceOf[AnyRef],null.asInstanceOf[AnyRef],null.asInstanceOf[AnyRef],null.asInstanceOf[AnyRef],null.asInstanceOf[AnyRef]), 23, 6, CONST_6, x70)
          val x72 = CONST_2.mkCompilerFrame(Array[Object](null.asInstanceOf[AnyRef],null.asInstanceOf[AnyRef],null.asInstanceOf[AnyRef],CONST_7.asInstanceOf[AnyRef],x63.asInstanceOf[AnyRef],CONST_2.asInstanceOf[AnyRef],CONST_0.asInstanceOf[AnyRef],x67.asInstanceOf[AnyRef],null.asInstanceOf[AnyRef],null.asInstanceOf[AnyRef],null.asInstanceOf[AnyRef],null.asInstanceOf[AnyRef],null.asInstanceOf[AnyRef]), 35, 8, CONST_8, x71)
          val x73 = CONST_2.execCompiler(x72).asInstanceOf[Int] // drop into freshly compiled
          // old parent: 30:<TestInterpreter6$$anonfun$test1$1.lancet$interpreter$TestInterpreter6$$anonfun$$compute$1><(ILlancet/interpreter/TestInterpreter6$Decompiler;Lscala/runtime/IntRef;)I> // 23:<TestInterpreter6$$anonfun$test1$1$$anonfun$2.apply$mcII$sp><(I)I> // 5:<TestInterpreter6$$anonfun$test1$1$$anonfun$2.apply><(I)I> // -1:<BytecodeInterpreter_Exec.execute><(Ljava/lang/reflect/Method;[Ljava/lang/Object;)Ljava/lang/Object;>
          // new parent: 5:<TestInterpreter6$$anonfun$test1$1$$anonfun$2.apply><(I)I> // -1:<BytecodeInterpreter_Exec.execute><(Ljava/lang/reflect/Method;[Ljava/lang/Object;)Ljava/lang/Object;>
          val x74 = x73.asInstanceOf[Int]
          // return 4_0 to 5:<TestInterpreter6$$anonfun$test1$1$$anonfun$2.apply><(I)I> // -1:<BytecodeInterpreter_Exec.execute><(Ljava/lang/reflect/Method;[Ljava/lang/Object;)Ljava/lang/Object;>
          // return 2_0 to 5:<TestInterpreter6$$anonfun$test1$1$$anonfun$2.apply><(I)I> // -1:<BytecodeInterpreter_Exec.execute><(Ljava/lang/reflect/Method;[Ljava/lang/Object;)Ljava/lang/Object;>
          /*R_42_2_0;*/;{
            val PHI_2_5 = x74 // LUBC(x63:Int,x74:Int)
            vLUB_CONST_0_elem = LUB_CONST_0_elem
            vPHI_2_5 = PHI_2_5
            vx33 = x33
            vx34 = x34
            vx35 = x35
            vx63 = x63
            vx64 = x64
          };
        }
        def BLOCK_41(LUB_CONST_0_elem:Int,PHI_4_9:Int,x33:java.lang.Integer,x34:Int,x35:java.lang.Integer,x63:Int,x64:Boolean,x65:Object,x66:Int,x67:Int,x68:Boolean,x75:java.lang.Integer,x76:java.lang.Integer,x77:Boolean): Unit = {
          unsafe.putInt(CONST_0,16L, PHI_4_9)
          // return 14_0 to 23:<TestInterpreter6$$anonfun$test1$1$$anonfun$2.apply$mcII$sp><(I)I> // 5:<TestInterpreter6$$anonfun$test1$1$$anonfun$2.apply><(I)I> // -1:<BytecodeInterpreter_Exec.execute><(Ljava/lang/reflect/Method;[Ljava/lang/Object;)Ljava/lang/Object;>
          ;{
            val PHI_3_5 = x63 // LUBC(PHI_3_5:Int,x63:Int)
            val PHI_3_7 = null.asInstanceOf[scala.runtime.Null$] // LUBC(PHI_3_7,null)
            val PHI_3_8 = null.asInstanceOf[scala.runtime.Null$] // LUBC(PHI_3_8,null)
            val PHI_3_9 = null.asInstanceOf[scala.runtime.Null$] // LUBC(PHI_3_9,null)
            val LUB_CONST_0_elem = PHI_4_9 // Alias(Some(LUB_CONST_0_elem),Some(PHI_4_9))
            BLOCK_42(LUB_CONST_0_elem,PHI_3_5,PHI_3_7,PHI_3_8,PHI_3_9,x33,x34,x35)
          }
        }
      }
    }
    ;{
      // ret multi HotSpotMethod<TestInterpreter6$$anonfun$test1$1$$anonfun$2.apply$mcII$sp>
      val LUB_CONST_0_elem = vLUB_CONST_0_elem
      val PHI_2_5 = vPHI_2_5
      val x33 = vx33
      val x34 = vx34
      val x35 = vx35
      val x63 = vx63
      val x64 = vx64
      // need to fix block ordering for bci=5
      // old: B0[0->2],B1[5->5]
      // new: B1[5->5]
      // fixed: B0[5->5]
      (RES = PHI_2_5) // return to root
      // (no return?)
  }}
  val x78 = {println("BOO!");666} // recompiled result -- never seen; not assigned to RES
}; BODY.RES }
}

<stdin>:10: warning: a pure expression does nothing in statement position; you may be omitting necessary parentheses
  ARG
  ^
one warning found
compilation: ok
-- compiled
static:  99
dynamic: 0
static:  0
dynamic: 0
static:  0
dynamic: 0
static:  0
dynamic: 0
static:  0
dynamic: 0
static:  0
dynamic: 0
static:  0
dynamic: 0
static:  0
dynamic: 0
static:  0
dynamic: 0
static:  0
dynamic: 0
static:  0
dynamic: 0
static:  0
dynamic: 0
static:  0
dynamic: 0
static:  0
dynamic: 0
static:  0
dynamic: 0
static:  0
dynamic: 0
static:  0
dynamic: 0
static:  0
dynamic: 0
static:  0
dynamic: 0
static:  0
dynamic: 0
static:  0
dynamic: 0
static:  0
dynamic: 0
static:  0
dynamic: 0
static:  0
dynamic: 0
static:  0
dynamic: 0
static:  0
dynamic: 0
static:  0
dynamic: 0
static:  0
dynamic: 0
static:  0
dynamic: 0
static:  0
dynamic: 0
static:  0
dynamic: 0
static:  0
dynamic: 0
static:  0
dynamic: 0
static:  0
dynamic: 0
static:  0
dynamic: 0
static:  0
dynamic: 0
static:  0
dynamic: 0
static:  0
dynamic: 0
static:  0
dynamic: 0
static:  0
dynamic: 0
static:  0
dynamic: 0
static:  0
dynamic: 0
static:  0
dynamic: 0
static:  0
dynamic: 0
static:  0
dynamic: 0
static:  0
dynamic: 0
static:  0
dynamic: 0
static:  0
dynamic: 0
static:  0
dynamic: 0
static:  0
dynamic: 0
-- start compiling
frame:
HotSpotMethod<TestInterpreter6$$anonfun$test1$1.lancet$interpreter$TestInterpreter6$$anonfun$$compute$1>
CONST_7,51,CONST_2,CONST_0,0,null,null,null,null,null
HotSpotMethod<TestInterpreter6$$anonfun$test1$1$$anonfun$2.apply$mcII$sp>
CONST_1,100,51,null,null,null,null
HotSpotMethod<TestInterpreter6$$anonfun$test1$1$$anonfun$2.apply>
CONST_1,100,null,null
HotSpotMethod<BytecodeInterpreter_Exec.execute>
CONST_2,CONST_3,CONST_4,null,null,null,null,null,null
root:
HotSpotMethod<BytecodeInterpreter_Exec.execute>
CONST_2,CONST_3,CONST_4,null,null,null,null,null,null
// constants: 1,<function1>,lancet.interpreter.TestInterpreter6$Decompiler@3babbd0e,HotSpotMethod<TestInterpreter6$$anonfun$test1$1$$anonfun$2.apply>,Array(CONST_1, x0),HotSpotMethod<BytecodeInterpreter_Exec.execute>,HotSpotMethod<TestInterpreter6$$anonfun$test1$1$$anonfun$2.apply$mcII$sp>,<function0>,HotSpotMethod<TestInterpreter6$$anonfun$test1$1.lancet$interpreter$TestInterpreter6$$anonfun$$compute$1>
class Generated2(CONST_0: scala.runtime.IntRef,CONST_1: lancet.interpreter.TestInterpreter6$$anonfun$test1$1$$anonfun$2,CONST_2: lancet.interpreter.TestInterpreter6$Decompiler,CONST_3: com.oracle.graal.hotspot.meta.HotSpotResolvedJavaMethod,CONST_4: Array[lancet.core.Base_LIR$Rep],CONST_5: com.oracle.graal.hotspot.meta.HotSpotResolvedJavaMethod,CONST_6: com.oracle.graal.hotspot.meta.HotSpotResolvedJavaMethod,CONST_7: lancet.interpreter.TestInterpreter6$$anonfun$test1$1,CONST_8: com.oracle.graal.hotspot.meta.HotSpotResolvedJavaMethod) extends (Unit=>Int){
import sun.misc.Unsafe
val unsafe = { val fld = classOf[Unsafe].getDeclaredField("theUnsafe"); fld.setAccessible(true); fld.get(classOf[Unsafe]).asInstanceOf[Unsafe]; }
type char = Char
def WARN = assert(false, "WARN")
def ERROR = assert(false, "ERROR")
def apply(ARG: Unit): Int = { object BODY {
  var RES = null.asInstanceOf[Int]
  ARG
  // need to fix block ordering for bci=35
  // old: B0[0->7],B1[10->10],B2[15->15],B3[18->26],B4[29->30],B5[35->40],B6[43->48],B7[51->51],B8[54->59],B9[62->69],B10[72->72],B11[75->79],B12[82->83],B13[86->86],B14[87->92]
  // new: B5[35->40],B6[43->48],B7[51->51],B8[54->59],B9[62->69],B10[72->72],B11[75->79],B12[82->83],B13[86->86],B14[87->92]
  // fixed: B0[35->40],B1[43->48],B2[51->51],B3[54->59],B4[62->69],B5[72->72],B6[75->79],B7[82->83],B8[86->86],B9[87->92]
  print("static:  ")
  val x79 = 0.asInstanceOf[Integer]
  println(x79)
  print("dynamic: ")
  val x80 = unsafe.getInt(CONST_0,16L)
  val x81 = x80.asInstanceOf[Integer]
  println(x81)
  unsafe.putInt(CONST_0,16L, 1)
  // return 9_0 to 23:<TestInterpreter6$$anonfun$test1$1$$anonfun$2.apply$mcII$sp><(I)I> // 5:<TestInterpreter6$$anonfun$test1$1$$anonfun$2.apply><(I)I> // -1:<BytecodeInterpreter_Exec.execute><(Ljava/lang/reflect/Method;[Ljava/lang/Object;)Ljava/lang/Object;>
  // ret single HotSpotMethod<TestInterpreter6$$anonfun$test1$1.lancet$interpreter$TestInterpreter6$$anonfun$$compute$1>
  // need to fix block ordering for bci=23
  // old: B0[0->1],B1[2->4 L],B2[7->20],B3[23->32],B4[35->36]
  // new: B3[23->32],B1[2->4 L],B2[7->20],B4[35->36]
  // fixed: B0[23->32],B1[2->4 L],B2[7->20],B3[35->36]
  // WARNING: multiple returns (2) in HotSpotMethod<TestInterpreter6$$anonfun$test1$1$$anonfun$2.apply$mcII$sp>
  ;{
    var vLUB_CONST_0_elem = null.asInstanceOf[Int]
    var vPHI_2_5 = null.asInstanceOf[Int]
    var vx109 = null.asInstanceOf[Int]
    var vx110 = null.asInstanceOf[Boolean]
    var vx79 = null.asInstanceOf[java.lang.Integer]
    var vx80 = null.asInstanceOf[Int]
    var vx81 = null.asInstanceOf[java.lang.Integer]
    // should not inline start block 0
    ;{
      val PHI_3_5 = 51 // LUBC(PHI_3_5:Int,51:Int)
      val PHI_3_7 = null // LUBC(PHI_3_7:scala.runtime.Null$,null:scala.runtime.Null$)
      val PHI_3_8 = null // LUBC(PHI_3_8:scala.runtime.Null$,null:scala.runtime.Null$)
      val PHI_3_9 = null // LUBC(PHI_3_9:scala.runtime.Null$,null:scala.runtime.Null$)
      val LUB_CONST_0_elem = 1 // Alias(Some(LUB_CONST_0_elem),Some(1))
      BLOCK_42(LUB_CONST_0_elem,PHI_3_5,PHI_3_7,PHI_3_8,PHI_3_9,x79,x80,x81)
    }
    def BLOCK_42(LUB_CONST_0_elem:Int,PHI_3_5:Int,PHI_3_7:scala.runtime.Null$,PHI_3_8:scala.runtime.Null$,PHI_3_9:scala.runtime.Null$,x79:java.lang.Integer,x80:Int,x81:java.lang.Integer): Unit = {
      val x109 = 1 + PHI_3_5
      val x110 = 100 <= x109
      if (x110) {
        // return 3_0 to 5:<TestInterpreter6$$anonfun$test1$1$$anonfun$2.apply><(I)I> // -1:<BytecodeInterpreter_Exec.execute><(Ljava/lang/reflect/Method;[Ljava/lang/Object;)Ljava/lang/Object;>
        /*R_42_3_0;*/;{
          val PHI_2_5 = x109 // LUBC(x120:Int,x109:Int)
          vLUB_CONST_0_elem = LUB_CONST_0_elem
          vPHI_2_5 = PHI_2_5
          vx109 = x109
          vx110 = x110
          vx79 = x79
          vx80 = x80
          vx81 = x81
        };
      } else {
        // WARNING: multiple returns (2) in HotSpotMethod<TestInterpreter6$$anonfun$test1$1.lancet$interpreter$TestInterpreter6$$anonfun$$compute$1>
        val x111 = unsafe.allocateInstance(Class.forName("lancet.interpreter.TestInterpreter6$$anonfun$test1$1$$anonfun$1"))
        unsafe.putObject(x111,16L, CONST_0)
        // return 0_0 to 4:<AbstractFunction0.<init>><()V> // 4:<AbstractFunction0$mcI$sp.<init>><()V> // 9:<TestInterpreter6$$anonfun$test1$1$$anonfun$1.<init>><(Llancet/interpreter/TestInterpreter6$$anonfun$test1$1;Lscala/runtime/IntRef;)V> // 10:<TestInterpreter6$$anonfun$test1$1.lancet$interpreter$TestInterpreter6$$anonfun$$compute$1><(ILlancet/interpreter/TestInterpreter6$Decompiler;Lscala/runtime/IntRef;)I> // 23:<TestInterpreter6$$anonfun$test1$1$$anonfun$2.apply$mcII$sp><(I)I> // 5:<TestInterpreter6$$anonfun$test1$1$$anonfun$2.apply><(I)I> // -1:<BytecodeInterpreter_Exec.execute><(Ljava/lang/reflect/Method;[Ljava/lang/Object;)Ljava/lang/Object;>
        // ret single HotSpotMethod<Object.<init>>
        // return 0_0 to 8:<AbstractFunction0.<init>><()V> // 4:<AbstractFunction0$mcI$sp.<init>><()V> // 9:<TestInterpreter6$$anonfun$test1$1$$anonfun$1.<init>><(Llancet/interpreter/TestInterpreter6$$anonfun$test1$1;Lscala/runtime/IntRef;)V> // 10:<TestInterpreter6$$anonfun$test1$1.lancet$interpreter$TestInterpreter6$$anonfun$$compute$1><(ILlancet/interpreter/TestInterpreter6$Decompiler;Lscala/runtime/IntRef;)I> // 23:<TestInterpreter6$$anonfun$test1$1$$anonfun$2.apply$mcII$sp><(I)I> // 5:<TestInterpreter6$$anonfun$test1$1$$anonfun$2.apply><(I)I> // -1:<BytecodeInterpreter_Exec.execute><(Ljava/lang/reflect/Method;[Ljava/lang/Object;)Ljava/lang/Object;>
        // ret single HotSpotMethod<Function0$class.$init$>
        // return 2_0 to 4:<AbstractFunction0$mcI$sp.<init>><()V> // 9:<TestInterpreter6$$anonfun$test1$1$$anonfun$1.<init>><(Llancet/interpreter/TestInterpreter6$$anonfun$test1$1;Lscala/runtime/IntRef;)V> // 10:<TestInterpreter6$$anonfun$test1$1.lancet$interpreter$TestInterpreter6$$anonfun$$compute$1><(ILlancet/interpreter/TestInterpreter6$Decompiler;Lscala/runtime/IntRef;)I> // 23:<TestInterpreter6$$anonfun$test1$1$$anonfun$2.apply$mcII$sp><(I)I> // 5:<TestInterpreter6$$anonfun$test1$1$$anonfun$2.apply><(I)I> // -1:<BytecodeInterpreter_Exec.execute><(Ljava/lang/reflect/Method;[Ljava/lang/Object;)Ljava/lang/Object;>
        // ret single HotSpotMethod<AbstractFunction0.<init>>
        // return 0_0 to 8:<AbstractFunction0$mcI$sp.<init>><()V> // 9:<TestInterpreter6$$anonfun$test1$1$$anonfun$1.<init>><(Llancet/interpreter/TestInterpreter6$$anonfun$test1$1;Lscala/runtime/IntRef;)V> // 10:<TestInterpreter6$$anonfun$test1$1.lancet$interpreter$TestInterpreter6$$anonfun$$compute$1><(ILlancet/interpreter/TestInterpreter6$Decompiler;Lscala/runtime/IntRef;)I> // 23:<TestInterpreter6$$anonfun$test1$1$$anonfun$2.apply$mcII$sp><(I)I> // 5:<TestInterpreter6$$anonfun$test1$1$$anonfun$2.apply><(I)I> // -1:<BytecodeInterpreter_Exec.execute><(Ljava/lang/reflect/Method;[Ljava/lang/Object;)Ljava/lang/Object;>
        // ret single HotSpotMethod<Function0$mcI$sp$class.$init$>
        // return 2_0 to 9:<TestInterpreter6$$anonfun$test1$1$$anonfun$1.<init>><(Llancet/interpreter/TestInterpreter6$$anonfun$test1$1;Lscala/runtime/IntRef;)V> // 10:<TestInterpreter6$$anonfun$test1$1.lancet$interpreter$TestInterpreter6$$anonfun$$compute$1><(ILlancet/interpreter/TestInterpreter6$Decompiler;Lscala/runtime/IntRef;)I> // 23:<TestInterpreter6$$anonfun$test1$1$$anonfun$2.apply$mcII$sp><(I)I> // 5:<TestInterpreter6$$anonfun$test1$1$$anonfun$2.apply><(I)I> // -1:<BytecodeInterpreter_Exec.execute><(Ljava/lang/reflect/Method;[Ljava/lang/Object;)Ljava/lang/Object;>
        // ret single HotSpotMethod<AbstractFunction0$mcI$sp.<init>>
        // return 1_0 to 10:<TestInterpreter6$$anonfun$test1$1.lancet$interpreter$TestInterpreter6$$anonfun$$compute$1><(ILlancet/interpreter/TestInterpreter6$Decompiler;Lscala/runtime/IntRef;)I> // 23:<TestInterpreter6$$anonfun$test1$1$$anonfun$2.apply$mcII$sp><(I)I> // 5:<TestInterpreter6$$anonfun$test1$1$$anonfun$2.apply><(I)I> // -1:<BytecodeInterpreter_Exec.execute><(Ljava/lang/reflect/Method;[Ljava/lang/Object;)Ljava/lang/Object;>
        // ret single HotSpotMethod<TestInterpreter6$$anonfun$test1$1$$anonfun$1.<init>>
        val x112 = 1.asInstanceOf[Int]
        val x113 = x112.asInstanceOf[Int]
        val x114 = LUB_CONST_0_elem == x113
        if (x114) {
          print("static:  ")
          val x121 = x113.asInstanceOf[Integer]
          println(x121)
          print("dynamic: ")
          val x122 = LUB_CONST_0_elem.asInstanceOf[Integer]
          println(x122)
          val x123 = 50 <= x109
          if (x123) {
            val PHI_4_9 = 1 // LUBC(PHI_4_9:Int,1:Int)
            BLOCK_41(LUB_CONST_0_elem,PHI_4_9,x109,x110,x111,x112,x113,x114,x121,x122,x123,x79,x80,x81)
          } else {
            val PHI_4_9 = 0 // LUBC(PHI_4_9:Int,0:Int)
            BLOCK_41(LUB_CONST_0_elem,PHI_4_9,x109,x110,x111,x112,x113,x114,x121,x122,x123,x79,x80,x81)
          }
        } else {
          val x115 = CONST_2.mkCompilerFrame(Array[Object](null.asInstanceOf[AnyRef],null.asInstanceOf[AnyRef],null.asInstanceOf[AnyRef],CONST_2.asInstanceOf[AnyRef],CONST_3.asInstanceOf[AnyRef],CONST_4.asInstanceOf[AnyRef],null.asInstanceOf[AnyRef],null.asInstanceOf[AnyRef],null.asInstanceOf[AnyRef],null.asInstanceOf[AnyRef],null.asInstanceOf[AnyRef],null.asInstanceOf[AnyRef]), -1, 6, CONST_5, null)
          val x116 = CONST_2.mkCompilerFrame(Array[Object](null.asInstanceOf[AnyRef],null.asInstanceOf[AnyRef],null.asInstanceOf[AnyRef],CONST_1.asInstanceOf[AnyRef],100.asInstanceOf[AnyRef],null.asInstanceOf[AnyRef],null.asInstanceOf[AnyRef]), 5, 5, CONST_3, x115)
          val x117 = CONST_2.mkCompilerFrame(Array[Object](null.asInstanceOf[AnyRef],null.asInstanceOf[AnyRef],null.asInstanceOf[AnyRef],CONST_1.asInstanceOf[AnyRef],100.asInstanceOf[AnyRef],x109.asInstanceOf[AnyRef],null.asInstanceOf[AnyRef],null.asInstanceOf[AnyRef],null.asInstanceOf[AnyRef],null.asInstanceOf[AnyRef]), 23, 6, CONST_6, x116)
          val x118 = CONST_2.mkCompilerFrame(Array[Object](null.asInstanceOf[AnyRef],null.asInstanceOf[AnyRef],null.asInstanceOf[AnyRef],CONST_7.asInstanceOf[AnyRef],x109.asInstanceOf[AnyRef],CONST_2.asInstanceOf[AnyRef],CONST_0.asInstanceOf[AnyRef],x113.asInstanceOf[AnyRef],null.asInstanceOf[AnyRef],null.asInstanceOf[AnyRef],null.asInstanceOf[AnyRef],null.asInstanceOf[AnyRef],null.asInstanceOf[AnyRef]), 35, 8, CONST_8, x117)
          val x119 = CONST_2.execCompiler(x118).asInstanceOf[Int] // drop into freshly compiled
          // old parent: 30:<TestInterpreter6$$anonfun$test1$1.lancet$interpreter$TestInterpreter6$$anonfun$$compute$1><(ILlancet/interpreter/TestInterpreter6$Decompiler;Lscala/runtime/IntRef;)I> // 23:<TestInterpreter6$$anonfun$test1$1$$anonfun$2.apply$mcII$sp><(I)I> // 5:<TestInterpreter6$$anonfun$test1$1$$anonfun$2.apply><(I)I> // -1:<BytecodeInterpreter_Exec.execute><(Ljava/lang/reflect/Method;[Ljava/lang/Object;)Ljava/lang/Object;>
          // new parent: 5:<TestInterpreter6$$anonfun$test1$1$$anonfun$2.apply><(I)I> // -1:<BytecodeInterpreter_Exec.execute><(Ljava/lang/reflect/Method;[Ljava/lang/Object;)Ljava/lang/Object;>
          val x120 = x119.asInstanceOf[Int]
          // return 4_0 to 5:<TestInterpreter6$$anonfun$test1$1$$anonfun$2.apply><(I)I> // -1:<BytecodeInterpreter_Exec.execute><(Ljava/lang/reflect/Method;[Ljava/lang/Object;)Ljava/lang/Object;>
          // return 2_0 to 5:<TestInterpreter6$$anonfun$test1$1$$anonfun$2.apply><(I)I> // -1:<BytecodeInterpreter_Exec.execute><(Ljava/lang/reflect/Method;[Ljava/lang/Object;)Ljava/lang/Object;>
          /*R_42_2_0;*/;{
            val PHI_2_5 = x120 // LUBC(x109:Int,x120:Int)
            vLUB_CONST_0_elem = LUB_CONST_0_elem
            vPHI_2_5 = PHI_2_5
            vx109 = x109
            vx110 = x110
            vx79 = x79
            vx80 = x80
            vx81 = x81
          };
        }
        def BLOCK_41(LUB_CONST_0_elem:Int,PHI_4_9:Int,x109:Int,x110:Boolean,x111:Object,x112:Int,x113:Int,x114:Boolean,x121:java.lang.Integer,x122:java.lang.Integer,x123:Boolean,x79:java.lang.Integer,x80:Int,x81:java.lang.Integer): Unit = {
          unsafe.putInt(CONST_0,16L, PHI_4_9)
          // return 14_0 to 23:<TestInterpreter6$$anonfun$test1$1$$anonfun$2.apply$mcII$sp><(I)I> // 5:<TestInterpreter6$$anonfun$test1$1$$anonfun$2.apply><(I)I> // -1:<BytecodeInterpreter_Exec.execute><(Ljava/lang/reflect/Method;[Ljava/lang/Object;)Ljava/lang/Object;>
          ;{
            val PHI_3_5 = x109 // LUBC(PHI_3_5:Int,x109:Int)
            val PHI_3_7 = null.asInstanceOf[scala.runtime.Null$] // LUBC(PHI_3_7,null)
            val PHI_3_8 = null.asInstanceOf[scala.runtime.Null$] // LUBC(PHI_3_8,null)
            val PHI_3_9 = null.asInstanceOf[scala.runtime.Null$] // LUBC(PHI_3_9,null)
            val LUB_CONST_0_elem = PHI_4_9 // Alias(Some(LUB_CONST_0_elem),Some(PHI_4_9))
            BLOCK_42(LUB_CONST_0_elem,PHI_3_5,PHI_3_7,PHI_3_8,PHI_3_9,x79,x80,x81)
          }
        }
      }
    }
    ;{
      // ret multi HotSpotMethod<TestInterpreter6$$anonfun$test1$1$$anonfun$2.apply$mcII$sp>
      val LUB_CONST_0_elem = vLUB_CONST_0_elem
      val PHI_2_5 = vPHI_2_5
      val x109 = vx109
      val x110 = vx110
      val x79 = vx79
      val x80 = vx80
      val x81 = vx81
      // need to fix block ordering for bci=5
      // old: B0[0->2],B1[5->5]
      // new: B1[5->5]
      // fixed: B0[5->5]
      (RES = PHI_2_5) // return to root
      // (no return?)
  }}
  val x124 = {println("BOO!");666} // recompiled result -- never seen; not assigned to RES
}; BODY.RES }
}

<stdin>:10: warning: a pure expression does nothing in statement position; you may be omitting necessary parentheses
  ARG
  ^
one warning found
compilation: ok
-- compiled
static:  0
dynamic: 1
static:  1
dynamic: 1
static:  1
dynamic: 1
static:  1
dynamic: 1
static:  1
dynamic: 1
static:  1
dynamic: 1
static:  1
dynamic: 1
static:  1
dynamic: 1
static:  1
dynamic: 1
static:  1
dynamic: 1
static:  1
dynamic: 1
static:  1
dynamic: 1
static:  1
dynamic: 1
static:  1
dynamic: 1
static:  1
dynamic: 1
static:  1
dynamic: 1
static:  1
dynamic: 1
static:  1
dynamic: 1
static:  1
dynamic: 1
static:  1
dynamic: 1
static:  1
dynamic: 1
static:  1
dynamic: 1
static:  1
dynamic: 1
static:  1
dynamic: 1
static:  1
dynamic: 1
static:  1
dynamic: 1
static:  1
dynamic: 1
static:  1
dynamic: 1
static:  1
dynamic: 1
static:  1
dynamic: 1
static:  1
dynamic: 1
static:  1
dynamic: 1
static:  1
dynamic: 1
static:  1
dynamic: 1
static:  1
dynamic: 1
static:  1
dynamic: 1
static:  1
dynamic: 1
static:  1
dynamic: 1
static:  1
dynamic: 1
static:  1
dynamic: 1
static:  1
dynamic: 1
static:  1
dynamic: 1
static:  1
dynamic: 1
static:  1
dynamic: 1
static:  1
dynamic: 1
static:  1
dynamic: 1
static:  1
dynamic: 1
static:  1
dynamic: 1
static:  1
dynamic: 1
BOO!
result: 100
BOO!
result: 100
100
