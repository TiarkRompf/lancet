  /*****************************************
  Emitting Generated Code
  *******************************************/
  class Generated extends ((Int)=>(Int)) {
    def apply(x185:Int): Int = {
      val x0 = x185;
      val x7 = x0.asInstanceOf[Int];
      val x40 = 0 >= x7;
      val x187: Int = {
        import sun.misc.Unsafe;
        val unsafe = { val fld = classOf[Unsafe].getDeclaredField("theUnsafe"); fld.setAccessible(true); fld.get(classOf[Unsafe]).asInstanceOf[Unsafe]; };
        type char = Char;
        def WARN = assert(false, "WARN");
        def ERROR = assert(false, "ERROR");
        var RES0 = null.asInstanceOf[Int];
        val x10: Object = unsafe.allocateInstance(Class.forName("lancet.interpreter.BaseTestInterpreter3$Bar"));
        if (x10 ne null) unsafe.putInt(x10,16L, 7) else println("BUG: putInt"+x10);;
        if (x40) {
          ;{;
            val LUB_b12_x10_intField = 7; // Alias(Some(DynExp(LUB_b12_x10_intField)),Some(Const(7)));
            BLOCK_12(LUB_b12_x10_intField,x10,x7);
          };
        } else {
          if (x10 ne null) unsafe.putInt(x10,16L, 9) else println("BUG: putInt"+x10);;
          ;{;
            val LUB_b12_x10_intField = 9; // Alias(Some(DynExp(LUB_b12_x10_intField)),Some(Const(9)));
            BLOCK_12(LUB_b12_x10_intField,x10,x7);
          };
        }
        def BLOCK_12(LUB_b12_x10_intField:Int,x10:Object,x7:Int): Unit = {
          ;{;
            val PHI_b13_3_6 = 0 // LUBC(DynExp(PHI_b13_3_6):Int,Const(0):Int);
            val LUB_b13_x10_intField = LUB_b12_x10_intField; // Alias(Some(DynExp(LUB_b13_x10_intField)),Some(DynExp(LUB_b12_x10_intField)));
            BLOCK_13(LUB_b13_x10_intField,PHI_b13_3_6,x10,x7);
          };
        }
        def BLOCK_13(LUB_b13_x10_intField:Int,PHI_b13_3_6:Int,x10:Object,x7:Int): Unit = {
          val x106 = 0 >= LUB_b13_x10_intField;
          val x10: Object = unsafe.allocateInstance(Class.forName("lancet.interpreter.BaseTestInterpreter3$Bar"));
          val x120 = -1 + LUB_b13_x10_intField;
          val x129 = 1 + PHI_b13_3_6;
          if (x106) {
            (RES0 = PHI_b13_3_6) // return to root;
          } else {
            if (x10 ne null) unsafe.putInt(x10,16L, x120) else println("BUG: putInt"+x10);;
            ;{;
              val PHI_b13_3_6 = x129 // LUBC(DynExp(PHI_b13_3_6):Int,Sym(129):Int);
              val LUB_b13_x10_intField = x120; // Alias(Some(DynExp(LUB_b13_x10_intField)),Some(Sym(120)));
              BLOCK_13(LUB_b13_x10_intField,PHI_b13_3_6,x10,x7);
            };
          }
        }
        // (no return?);
        RES0
      };
      x187
    }
  }
  /*****************************************
  End of Generated Code
  *******************************************/
Vector()
List()
compilation: ok
9
