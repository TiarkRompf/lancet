prog: {
  If(Get(Static(0),counter),{
    Put(Static(1),a,New())
    Put(Get(Static(1),a),foo,Const(5))
  },{
    Put(Static(1),a,New())
    Put(Get(Static(1),a),bar,Const(5))
  })
}
c PhiInt(ConstInt(0),PhiInt(ConstInt(1),PhiInt(ConstInt(2),PhiInt(ConstInt(3),PhiInt(ConstInt(4),PhiInt(ConstInt(5),PhiInt(ConstInt(6),PhiInt(ConstInt(7),PhiInt(ConstInt(8),ConstInt(9))))))))))
res: Prim(PhiInt(ConstInt(0),ConstInt(0)))
store: 
(0,ConstObj(Map(counter -> Prim(PhiInt(ConstInt(0),PhiInt(ConstInt(1),PhiInt(ConstInt(2),PhiInt(ConstInt(3),PhiInt(ConstInt(4),PhiInt(ConstInt(5),PhiInt(ConstInt(6),PhiInt(ConstInt(7),PhiInt(ConstInt(8),ConstInt(9))))))))))))))
(1,PhiObj(ConstObj(Map(a -> Ref(ConstAddr(100)))),ConstObj(Map(a -> Ref(ConstAddr(101))))))
(100,ConstObj(Map(foo -> Prim(ConstInt(5)))))
(101,ConstObj(Map(bar -> Prim(ConstInt(5)))))
partially flat store: 
(0,Map(counter -> Prim(PhiInt(ConstInt(0),PhiInt(ConstInt(1),PhiInt(ConstInt(2),PhiInt(ConstInt(3),PhiInt(ConstInt(4),PhiInt(ConstInt(5),PhiInt(ConstInt(6),PhiInt(ConstInt(7),PhiInt(ConstInt(8),ConstInt(9)))))))))))))
(1,Map(a -> Ref(PhiAddr(ConstAddr(100),ConstAddr(101)))))
(100,Map(foo -> Prim(ConstInt(5))))
(101,Map(bar -> Prim(ConstInt(5))))
flat store: 
(0,Map(counter -> must:Set()may:Set(0, 5, 1, 6, 9, 2, 7, 3, 8, 4)))
(1,Map(a -> must:Set()may:Set(100, 101)))
(100,Map(foo -> must:Set(5)may:Set(5)))
(101,Map(bar -> must:Set(5)may:Set(5)))
prog: {
  Put(Static(1),a,New())
  Put(Get(Static(1),a),baz,Const(3))
  If(Get(Static(0),counter),{
    Put(Static(1),a,New())
    Put(Get(Static(1),a),foo,Const(5))
  },{
    Put(Static(1),a,New())
    Put(Get(Static(1),a),bar,Const(5))
  })
  Put(Get(Static(1),a),bar,Const(7))
}
c PhiInt(ConstInt(0),PhiInt(ConstInt(1),PhiInt(ConstInt(2),PhiInt(ConstInt(3),PhiInt(ConstInt(4),PhiInt(ConstInt(5),PhiInt(ConstInt(6),PhiInt(ConstInt(7),PhiInt(ConstInt(8),ConstInt(9))))))))))
res: Prim(ConstInt(0))
store: 
(0,ConstObj(Map(counter -> Prim(PhiInt(ConstInt(0),PhiInt(ConstInt(1),PhiInt(ConstInt(2),PhiInt(ConstInt(3),PhiInt(ConstInt(4),PhiInt(ConstInt(5),PhiInt(ConstInt(6),PhiInt(ConstInt(7),PhiInt(ConstInt(8),ConstInt(9))))))))))))))
(1,PhiObj(ConstObj(Map(a -> Ref(ConstAddr(103)))),ConstObj(Map(a -> Ref(ConstAddr(104))))))
(102,ConstObj(Map(baz -> Prim(ConstInt(3)))))
(103,PhiObj(ConstObj(Map(foo -> Prim(ConstInt(5)))),PhiObj(PhiObj(ConstObj(Map(bar -> Prim(ConstInt(7)))),ConstObj(Map(foo -> Prim(ConstInt(5)), bar -> Prim(ConstInt(7))))),ConstObj(Map(bar -> Prim(ConstInt(7)))))))
(104,PhiObj(ConstObj(Map(bar -> Prim(ConstInt(5)))),PhiObj(PhiObj(ConstObj(Map(bar -> Prim(ConstInt(7)))),ConstObj(Map(foo -> Prim(ConstInt(5)), bar -> Prim(ConstInt(7))))),ConstObj(Map(bar -> Prim(ConstInt(7)))))))
partially flat store: 
(0,Map(counter -> Prim(PhiInt(ConstInt(0),PhiInt(ConstInt(1),PhiInt(ConstInt(2),PhiInt(ConstInt(3),PhiInt(ConstInt(4),PhiInt(ConstInt(5),PhiInt(ConstInt(6),PhiInt(ConstInt(7),PhiInt(ConstInt(8),ConstInt(9)))))))))))))
(1,Map(a -> Ref(PhiAddr(ConstAddr(103),ConstAddr(104)))))
(102,Map(baz -> Prim(ConstInt(3))))
(103,Map(foo -> Prim(PhiInt(ConstInt(5),PhiInt(PhiInt(UndefinedInt(),ConstInt(5)),UndefinedInt()))), bar -> Prim(PhiInt(UndefinedInt(),PhiInt(PhiInt(ConstInt(7),ConstInt(7)),ConstInt(7))))))
(104,Map(bar -> Prim(PhiInt(ConstInt(5),PhiInt(PhiInt(ConstInt(7),ConstInt(7)),ConstInt(7)))), foo -> Prim(PhiInt(UndefinedInt(),PhiInt(PhiInt(UndefinedInt(),ConstInt(5)),UndefinedInt())))))
flat store: 
(0,Map(counter -> must:Set()may:Set(0, 5, 1, 6, 9, 2, 7, 3, 8, 4)))
(1,Map(a -> must:Set()may:Set(103, 104)))
(102,Map(baz -> must:Set(3)may:Set(3)))
(103,Map(foo -> must:Set()may:Set(5), bar -> must:Set()may:Set(7)))
(104,Map(bar -> must:Set()may:Set(5, 7), foo -> must:Set()may:Set(5)))
strong updates: no baz field
