prog: {
  Assign(x,Const(0))
  Assign(a,New(A))
  Put(Ref(a),Const(field),Const(7))
  While(Less(Ref(x),Const(100)),{
    Put(Ref(a),Const(field),Const(7))
    Assign(x,Plus(Ref(x),Const(1)))
  })
  Assign(r,Ref(a))
}
val x0 = Map()
val x1 = Map("val" -> 0)
val x2 = Map("&x" -> x1)
val x3 = Map("&x" -> x1, (A,1) -> Map())
val x4 = Map("val" -> (A,1))
val x5 = Map("&x" -> x1, "&a" -> x4)
val x6 = Map("field" -> 7)
val x7 = Map("&x" -> x1, "&a" -> x4, (A,1) -> x6)
val x10 = (1,x9)
val x11 = 0 < x9
val x12 = x9 + -1
val x13 = x8(x12)
val x14 = if (x11) x13 else x7
val x15 = x13("&x")
val x16 = if (x11) x15 else x1
val x17 = x15("val")
val x18 = if (x11) x17 else 0
val x19 = x17 < 100
val x20 = if (x11) x19 else 1
val x21 = x13("&a")
val x22 = if (x11) x21 else x4
val x23 = x21("val")
val x24 = if (x11) x23 else (A,1)
val x25 = x13(x24)
val x26 = x23 == "&x"
val x27 = if (x26) x1 else "undefined"
val x28 = x23 == "&a"
val x29 = if (x28) x4 else x27
val x30 = x23 == (A,1)
val x31 = if (x30) x6 else x29
val x32 = if (x11) x31 else x6
val x33 = x13(x23)
val x34 = if (x11) x33 else x6
val x35 = x33 + ("field" -> 7)
val x36 = if (x11) x35 else x6
val x37 = x13 + (x24 -> x36)
val x38 = x7 + (x23 -> x36)
val x39 = Map("&x" -> x1, "&a" -> x4, (A,1) -> x36)
val x40 = x7 + (x23 -> x35)
val x41 = if (x11) x40 else x7
val x42 = x13 + (x23 -> x35)
val x43 = if (x11) x42 else x7
val x44 = if (x26) x35 else x15
val x45 = if (x11) x44 else x1
val x46 = x33("val")
val x47 = if (x26) x46 else x17
val x48 = if (x11) x47 else 0
val x49 = x46 + 1
val x50 = x17 + 1
val x51 = if (x26) x49 else x50
val x52 = if (x11) x51 else 1
val x53 = Map("val" -> x52)
val x54 = x42 + ("&x" -> x53)
val x55 = Map("&x" -> x53, "&a" -> x4, (A,1) -> x6)
val x56 = Map("val" -> x51)
val x57 = x42 + ("&x" -> x56)
val x58 = Map("val" -> 1)
val x59 = Map("&x" -> x58, "&a" -> x4, (A,1) -> x6)
val x60 = if (x11) x57 else x59
val x61 = if (x11) x57 else x7
val x8 = { x9 => x61 }
val x62 = fixindex(x9 => x19)
val x63 = x8(x62)
val x64 = x63("&x")
val x65 = x64("val")
val x66 = x65 < 100
val x67 = x63("&a")
val x68 = x67("val")
val x69 = Map("val" -> x68)
val x70 = x63 + ("&r" -> x69)
res: ()
store: x70
*** begin iterate split funcs: x70
funs:
val x8 = { x9 => x61 }
calls:
val x13 = x8(x12)
val x63 = x8(x62)
subst: Map(x9 -> 0)
val x71 = x8(-1)
val x72 = x71("&x")
val x73 = x72("val")
val x74 = x73 < 100
val x75 = x71("&a")
val x76 = x75("val")
val x77 = x71((A,1))
val x78 = x76 == "&x"
val x79 = if (x78) x1 else "undefined"
val x80 = x76 == "&a"
val x81 = if (x80) x4 else x79
val x82 = x76 == (A,1)
val x83 = if (x82) x6 else x81
val x84 = x71(x76)
val x85 = x84 + ("field" -> 7)
val x86 = x71 + ((A,1) -> x6)
val x87 = x7 + (x76 -> x6)
val x88 = x7 + (x76 -> x85)
val x89 = x71 + (x76 -> x85)
val x90 = if (x78) x85 else x72
val x91 = x84("val")
val x92 = if (x78) x91 else x73
val x93 = x91 + 1
val x94 = x73 + 1
val x95 = if (x78) x93 else x94
val x96 = x89 + ("&x" -> x58)
val x97 = Map("val" -> x95)
val x98 = x89 + ("&x" -> x97)
val x99 = fixindex(x9 => x74)
val x100 = x8(x99)
val x101 = x100("&x")
val x102 = x101("val")
val x103 = x102 < 100
val x104 = x100("&a")
val x105 = x104("val")
val x106 = Map("val" -> x105)
val x107 = x100 + ("&r" -> x106)
zeros: Map(x8 -> x7)
specializing for fields Set("&x", "&a", (A,1))
val x108 = x8_&x(x12)
val x109 = x8_&a(x12)
val x110 = x8_(A,1)(x12)
val x111 = Map("&x" -> x108, "&a" -> x109, (A,1) -> x110)
specializing for fields Set("&x", "&a", (A,1))
val x112 = x8_&x(x62)
val x113 = x8_&a(x62)
val x114 = x8_(A,1)(x62)
val x115 = Map("&x" -> x112, "&a" -> x113, (A,1) -> x114)
xform: Map(x13 -> x111, x63 -> x115)
val x116 = if (x11) x108 else x1
val x117 = if (x11) x109 else x4
val x118 = if (x11) x110 else x6
val x119 = Map("&x" -> x116, "&a" -> x117, (A,1) -> x118)
val x120 = x108("val")
val x121 = if (x11) x120 else 0
val x122 = x120 < 100
val x123 = if (x11) x122 else 1
val x124 = x109("val")
val x125 = if (x11) x124 else (A,1)
val x126 = x124 == "&x"
val x127 = if (x126) x108 else "undefined"
val x128 = x124 == "&a"
val x129 = if (x128) x109 else x127
val x130 = x124 == (A,1)
val x131 = if (x130) x110 else x129
val x132 = if (x11) x131 else x110
val x133 = if (x126) x1 else "undefined"
val x134 = if (x128) x4 else x133
val x135 = if (x130) x6 else x134
val x136 = if (x11) x135 else x6
val x137 = if (x11) x131 else x6
val x138 = x110 + ("field" -> 7)
val x139 = x109 + ("field" -> 7)
val x140 = x108 + ("field" -> 7)
val x141 = if (x126) x140 else x6
val x142 = if (x128) x139 else x141
val x143 = if (x130) x138 else x142
val x144 = if (x11) x143 else x6
val x145 = x111 + (x124 -> x144)
val x146 = Map("&x" -> x108, "&a" -> x109, (A,1) -> x144)
val x147 = x111 + (x124 -> x143)
val x148 = Map("&x" -> x108, "&a" -> x109, (A,1) -> x6)
val x149 = if (x11) x147 else x148
val x150 = x7 + (x124 -> x144)
val x151 = Map("&x" -> x1, "&a" -> x4, (A,1) -> x144)
val x152 = x7 + (x124 -> x143)
val x153 = if (x11) x152 else x7
val x154 = if (x11) x147 else x7
val x155 = if (x126) x142 else x108
val x156 = if (x126) x141 else x108
val x157 = if (x11) x156 else x1
val x158 = x110("val")
val x159 = "undefined"("val")
val x160 = if (x126) x120 else x159
val x161 = if (x128) x124 else x160
val x162 = if (x130) x158 else x161
val x163 = if (x126) x161 else x120
val x164 = if (x126) x160 else x120
val x165 = if (x11) x164 else 0
val x166 = x158 + 1
val x167 = x124 + 1
val x168 = x120 + 1
val x169 = x159 + 1
val x170 = if (x126) x168 else x169
val x171 = if (x128) x167 else x170
val x172 = if (x130) x166 else x171
val x173 = if (x126) x171 else x168
val x174 = if (x126) x170 else x168
val x175 = if (x11) x174 else 1
val x176 = Map("val" -> x175)
val x177 = x147 + ("&x" -> x176)
val x178 = Map("&x" -> x176, "&a" -> x4, (A,1) -> x6)
val x179 = Map("val" -> x173)
val x180 = x147 + ("&x" -> x179)
val x181 = Map("val" -> x174)
val x182 = x147 + ("&x" -> x181)
val x183 = if (x11) x182 else x59
val x184 = if (x11) x182 else x7
val x185 = fixindex(x9 => x122)
val x186 = x8(x185)
val x187 = x186("&x")
val x188 = x187("val")
val x189 = x188 < 100
val x190 = x186("&a")
val x191 = x190("val")
val x192 = Map("val" -> x191)
val x193 = x186 + ("&r" -> x192)
val x194 = x8_&x(x185)
val x195 = x8_&a(x185)
val x196 = x8_(A,1)(x185)
val x197 = Map("&x" -> x194, "&a" -> x195, (A,1) -> x196)
val x198 = if (x126) x140 else x108
val x199 = if (x11) x198 else x1
val x200 = if (x126) x120 else x120
val x201 = if (x126) x168 else x168
val x202 = if (x11) x168 else 1
val x203 = Map("val" -> x202)
val x204 = x147 + ("&x" -> x203)
val x205 = Map("&x" -> x203, "&a" -> x4, (A,1) -> x6)
val x206 = Map("val" -> x201)
val x207 = x147 + ("&x" -> x206)
val x208 = Map("val" -> x168)
val x209 = x147 + ("&x" -> x208)
val x210 = if (x11) x209 else x59
val x211 = if (x11) x209 else x7
XX not a map: Map("&x" -> x1, "&a" -> x4, (A,1) -> x6) if (x11) x182 else x7 
xform: Map()
XX not a map: Map("&x" -> x1, "&a" -> x4, (A,1) -> x6) if (x11) x57 else x7 
val x212 = if (x11) x51 else 0
val x213 = Map("val" -> x212)
val x8_&x = { x9 => x213 }
val x214 = if (x28) x35 else x21
val x215 = if (x11) x214 else x4
val x8_&a = { x9 => x215 }
val x216 = x13((A,1))
val x217 = if (x30) x35 else x216
val x218 = if (x11) x217 else x6
val x8_(A,1) = { x9 => x218 }
*** done iterate split funcs: x70
*** begin iterate loop inv: x70
funs:
val x8 = { x9 => x61 }
calls:
val x13 = x8(x12)
val x63 = x8(x62)
subst: Map(x9 -> 0)
val x219 = x8(-2)
val x220 = x219("&a")
val x221 = x220("val")
val x222 = x221 == "&x"
val x223 = x219(x221)
val x224 = x223("val")
val x225 = x224 + 1
val x226 = x219("&x")
val x227 = x226("val")
val x228 = x227 + 1
val x229 = if (x222) x225 else x228
val x230 = x221 == "&a"
val x231 = x223 + ("field" -> 7)
val x232 = if (x230) x231 else x220
val x233 = x221 == (A,1)
val x234 = x219((A,1))
val x235 = if (x233) x231 else x234
val x236 = 0 < x99
val x237 = x99 + -1
val x238 = x8(x237)
val x239 = x238("&a")
val x240 = x239("val")
val x241 = x240 == "&x"
val x242 = x238(x240)
val x243 = x242("val")
val x244 = x243 + 1
val x245 = x238("&x")
val x246 = x245("val")
val x247 = x246 + 1
val x248 = if (x241) x244 else x247
val x249 = if (x236) x248 else 0
val x250 = Map("val" -> x249)
val x251 = x240 == "&a"
val x252 = x242 + ("field" -> 7)
val x253 = if (x251) x252 else x239
val x254 = if (x236) x253 else x4
val x255 = x240 == (A,1)
val x256 = x238((A,1))
val x257 = if (x255) x252 else x256
val x258 = if (x236) x257 else x6
val x259 = Map("&x" -> x250, "&a" -> x254, (A,1) -> x258)
val x260 = Map("val" -> (A,1), "field" -> 7)
val x261 = Map("val" -> 0, "field" -> 7)
val x262 = "undefined" + 1
val x263 = (A,1) + 1
val x264 = fixindex(x9 => 1)
val x265 = x8(x264)
val x266 = x265("&x")
val x267 = x266("val")
val x268 = x267 < 100
val x269 = x265("&a")
val x270 = x269("val")
val x271 = Map("val" -> x270)
val x272 = x265 + ("&r" -> x271)
val x273 = 0 < x264
val x274 = x264 + -1
val x275 = x8(x274)
val x276 = x275("&a")
val x277 = x276("val")
val x278 = x277 == "&x"
val x279 = x275(x277)
val x280 = x279("val")
val x281 = x280 + 1
val x282 = x275("&x")
val x283 = x282("val")
val x284 = x283 + 1
val x285 = if (x278) x281 else x284
val x286 = if (x273) x285 else 0
val x287 = Map("val" -> x286)
val x288 = x277 == "&a"
val x289 = x279 + ("field" -> 7)
val x290 = if (x288) x289 else x276
val x291 = if (x273) x290 else x4
val x292 = x277 == (A,1)
val x293 = x275((A,1))
val x294 = if (x292) x289 else x293
val x295 = if (x273) x294 else x6
val x296 = Map("&x" -> x287, "&a" -> x291, (A,1) -> x295)
val x297 = if (x80) x85 else x75
val x298 = if (x82) x85 else x77
zeros: Map(x8 -> x7)
exclude: Set()
xform: Map(x13 -> x7, x63 -> x7)
val x299 = if (x11) 1 else 0
val x300 = Map("val" -> x299)
val x301 = Map("&x" -> x300, "&a" -> x4, (A,1) -> x6)
val x302 = 1 < x9
val x303 = x9 + -2
val x304 = x8(x303)
val x305 = x304("&a")
val x306 = x305("val")
val x307 = x306 == "&x"
val x308 = x304(x306)
val x309 = x308("val")
val x310 = x309 + 1
val x311 = x304("&x")
val x312 = x311("val")
val x313 = x312 + 1
val x314 = if (x307) x310 else x313
val x315 = if (x302) x314 else 0
val x316 = Map("val" -> x315)
val x317 = x306 == "&a"
val x318 = x308 + ("field" -> 7)
val x319 = if (x317) x318 else x305
val x320 = if (x302) x319 else x4
val x321 = x306 == (A,1)
val x322 = x304((A,1))
val x323 = if (x321) x318 else x322
val x324 = if (x302) x323 else x6
val x325 = Map("&x" -> x316, "&a" -> x320, (A,1) -> x324)
val x326 = if (x11) x315 else 0
val x327 = Map("val" -> x326)
val x328 = if (x11) x320 else x4
val x329 = if (x11) x324 else x6
val x330 = Map("&x" -> x327, "&a" -> x328, (A,1) -> x329)
val x331 = x309 < 99
val x332 = x312 < 99
val x333 = if (x307) x331 else x332
val x334 = x91 < 99
val x335 = x73 < 99
val x336 = if (x78) x334 else x335
val x337 = if (x302) x333 else 1
val x338 = if (x11) x337 else 1
val x339 = if (x317) x309 else x306
val x340 = if (x80) x91 else x76
val x341 = if (x302) x339 else (A,1)
val x342 = if (x11) x341 else (A,1)
val x343 = x309 == "&x"
val x344 = if (x317) x343 else x307
val x345 = x91 == "&x"
val x346 = if (x80) x345 else x78
val x347 = if (x302) x344 else 0
val x348 = if (x343) x316 else "undefined"
val x349 = if (x302) x310 else 0
val x350 = Map("val" -> x349)
val x351 = if (x307) x350 else "undefined"
val x352 = if (x302) x313 else 0
val x353 = Map("val" -> x352)
val x354 = if (x343) x353 else "undefined"
val x355 = if (x317) x354 else x351
val x356 = if (x345) x1 else "undefined"
val x357 = if (x80) x356 else x79
val x358 = Map("val" -> x313)
val x359 = if (x343) x358 else "undefined"
val x360 = Map("val" -> x310)
val x361 = if (x307) x360 else "undefined"
val x362 = if (x317) x359 else x361
val x363 = if (x302) x362 else "undefined"
val x364 = x309 == "&a"
val x365 = if (x317) x364 else 0
val x366 = x91 == "&a"
val x367 = if (x80) x366 else 0
val x368 = if (x302) x365 else 0
val x369 = Map("val" -> x94)
val x370 = if (x345) x369 else "undefined"
val x371 = Map("val" -> x93)
val x372 = if (x78) x371 else "undefined"
val x373 = if (x80) x370 else x372
val x374 = if (x364) x320 else x363
val x375 = if (x302) x318 else x4
val x376 = if (x302) x359 else "undefined"
val x377 = if (x364) x375 else x376
val x378 = if (x302) x361 else "undefined"
val x379 = if (x317) x377 else x378
val x380 = if (x366) x4 else "undefined"
val x381 = if (x80) x380 else "undefined"
val x382 = if (x364) x318 else x359
val x383 = if (x317) x382 else x361
val x384 = if (x302) x383 else "undefined"
val x385 = x309 == (A,1)
val x386 = if (x317) x385 else x321
val x387 = x91 == (A,1)
val x388 = if (x80) x387 else x82
val x389 = if (x302) x386 else 1
val x390 = if (x366) x85 else x370
val x391 = if (x80) x390 else x372
val x392 = if (x385) x324 else x384
val x393 = if (x302) x318 else x6
val x394 = if (x321) x393 else x384
val x395 = if (x302) x322 else x6
val x396 = if (x302) x382 else "undefined"
val x397 = if (x385) x395 else x396
val x398 = if (x321) x393 else x378
val x399 = if (x317) x397 else x398
val x400 = if (x387) x6 else "undefined"
val x401 = if (x82) x6 else "undefined"
val x402 = if (x80) x400 else x401
val x403 = if (x385) x322 else x382
val x404 = if (x321) x318 else x361
val x405 = if (x317) x403 else x404
val x406 = if (x302) x405 else x6
val x407 = if (x387) x77 else x390
val x408 = if (x82) x85 else x372
val x409 = if (x80) x407 else x408
val x410 = if (x11) x406 else x324
val x411 = if (x343) x1 else "undefined"
val x412 = if (x307) x1 else "undefined"
val x413 = if (x317) x411 else x412
val x414 = if (x302) x413 else "undefined"
val x415 = if (x364) x4 else x414
val x416 = if (x302) x411 else "undefined"
val x417 = if (x364) x4 else x416
val x418 = if (x302) x412 else "undefined"
val x419 = if (x317) x417 else x418
val x420 = if (x364) x4 else x411
val x421 = if (x317) x420 else x412
val x422 = if (x302) x421 else "undefined"
val x423 = if (x366) x4 else x356
val x424 = if (x80) x423 else x79
val x425 = if (x385) x6 else x422
val x426 = if (x321) x6 else x422
val x427 = if (x302) x420 else "undefined"
val x428 = if (x385) x6 else x427
val x429 = if (x321) x6 else x418
val x430 = if (x317) x428 else x429
val x431 = if (x385) x6 else x420
val x432 = if (x321) x6 else x412
val x433 = if (x317) x431 else x432
val x434 = if (x302) x433 else x6
val x435 = if (x387) x6 else x423
val x436 = if (x82) x6 else x79
val x437 = if (x80) x435 else x436
val x438 = if (x11) x434 else x6
val x439 = if (x11) x406 else x6
val x440 = x318 + ("field" -> 7)
val x441 = x322 + ("field" -> 7)
val x442 = if (x321) x440 else x441
val x443 = x85 + ("field" -> 7)
val x444 = x77 + ("field" -> 7)
val x445 = if (x82) x443 else x444
val x446 = if (x302) x442 else x6
val x447 = x305 + ("field" -> 7)
val x448 = if (x317) x440 else x447
val x449 = x75 + ("field" -> 7)
val x450 = if (x80) x443 else x449
val x451 = if (x302) x448 else x260
val x452 = Map("val" -> x315, "field" -> 7)
val x453 = if (x343) x315 else "nil"
val x454 = Map("val" -> x453, "field" -> 7)
val x455 = if (x307) x349 else "nil"
val x456 = Map("val" -> x455, "field" -> 7)
val x457 = if (x343) x352 else "nil"
val x458 = if (x317) x457 else x455
val x459 = Map("val" -> x458, "field" -> 7)
val x460 = if (x345) 0 else "nil"
val x461 = if (x78) 0 else "nil"
val x462 = if (x80) x460 else x461
val x463 = Map("val" -> x462, "field" -> 7)
val x464 = if (x343) x313 else "nil"
val x465 = if (x307) x310 else "nil"
val x466 = if (x317) x464 else x465
val x467 = if (x302) x466 else "nil"
val x468 = Map("val" -> x467, "field" -> 7)
val x469 = if (x345) x94 else "nil"
val x470 = if (x78) x93 else "nil"
val x471 = if (x80) x469 else x470
val x472 = if (x364) x451 else x468
val x473 = if (x302) x440 else x260
val x474 = if (x302) x464 else "nil"
val x475 = Map("val" -> x474, "field" -> 7)
val x476 = if (x364) x473 else x475
val x477 = if (x302) x465 else "nil"
val x478 = Map("val" -> x477, "field" -> 7)
val x479 = if (x317) x476 else x478
val x480 = Map("val" -> "nil", "field" -> 7)
val x481 = if (x366) (A,1) else "nil"
val x482 = Map("val" -> x481, "field" -> 7)
val x483 = if (x80) x481 else "nil"
val x484 = Map("val" -> x483, "field" -> 7)
val x485 = Map("val" -> x464, "field" -> 7)
val x486 = if (x364) x440 else x485
val x487 = Map("val" -> x465, "field" -> 7)
val x488 = if (x317) x486 else x487
val x489 = if (x302) x488 else x480
val x490 = Map("val" -> x469, "field" -> 7)
val x491 = if (x366) x443 else x490
val x492 = Map("val" -> x470, "field" -> 7)
val x493 = if (x80) x491 else x492
val x494 = if (x385) x446 else x489
val x495 = if (x302) x440 else x6
val x496 = if (x321) x495 else x489
val x497 = if (x302) x441 else x6
val x498 = if (x302) x486 else x480
val x499 = if (x385) x497 else x498
val x500 = if (x321) x495 else x478
val x501 = if (x317) x499 else x500
val x502 = if (x385) x441 else x486
val x503 = if (x321) x440 else x487
val x504 = if (x317) x502 else x503
val x505 = if (x302) x504 else x6
val x506 = if (x387) x444 else x491
val x507 = if (x82) x443 else x492
val x508 = if (x80) x506 else x507
val x509 = if (x11) x505 else x6
val x510 = x325 + (x309 -> x509)
val x511 = x325 + (x306 -> x509)
val x512 = Map("&x" -> x353, "&a" -> x375, (A,1) -> x395)
val x513 = if (x302) x502 else x6
val x514 = if (x11) x513 else x6
val x515 = x512 + (x309 -> x514)
val x516 = if (x302) x305 else x4
val x517 = Map("&x" -> x316, "&a" -> x516, (A,1) -> x324)
val x518 = if (x302) x503 else x6
val x519 = if (x11) x518 else x6
val x520 = x517 + (x306 -> x519)
val x521 = if (x317) x515 else x520
val x522 = Map("&x" -> x316, "&a" -> x320, (A,1) -> x509)
val x523 = x7 + (x91 -> x6)
val x524 = if (x80) x523 else x87
val x525 = Map("&x" -> x358, "&a" -> x318, (A,1) -> x322)
val x526 = if (x11) x502 else x6
val x527 = x525 + (x309 -> x526)
val x528 = Map("val" -> x314)
val x529 = Map("&x" -> x528, "&a" -> x305, (A,1) -> x323)
val x530 = if (x11) x503 else x6
val x531 = x529 + (x306 -> x530)
val x532 = if (x317) x527 else x531
val x533 = if (x302) x532 else x7
val x534 = x325 + (x309 -> x505)
val x535 = x325 + (x306 -> x505)
val x536 = x512 + (x309 -> x513)
val x537 = x517 + (x306 -> x518)
val x538 = if (x317) x536 else x537
val x539 = Map("&x" -> x316, "&a" -> x320, (A,1) -> x505)
val x540 = x525 + (x309 -> x502)
val x541 = x529 + (x306 -> x503)
val x542 = if (x317) x540 else x541
val x543 = if (x302) x542 else x7
val x544 = Map("&x" -> x316, "&a" -> x320, (A,1) -> x6)
val x545 = Map("&x" -> x369, "&a" -> x85, (A,1) -> x77)
val x546 = x545 + (x91 -> x506)
val x547 = Map("&x" -> x97, "&a" -> x75, (A,1) -> x298)
val x548 = x547 + (x76 -> x507)
val x549 = if (x80) x546 else x548
val x550 = if (x11) x543 else x544
val x551 = x7 + (x309 -> x509)
val x552 = x7 + (x306 -> x509)
val x553 = x7 + (x309 -> x514)
val x554 = x7 + (x306 -> x519)
val x555 = if (x317) x553 else x554
val x556 = Map("&x" -> x1, "&a" -> x4, (A,1) -> x509)
val x557 = x7 + (x309 -> x526)
val x558 = x7 + (x306 -> x530)
val x559 = if (x317) x557 else x558
val x560 = if (x302) x559 else x7
val x561 = x7 + (x309 -> x505)
val x562 = x7 + (x306 -> x505)
val x563 = x7 + (x309 -> x513)
val x564 = x7 + (x306 -> x518)
val x565 = if (x317) x563 else x564
val x566 = Map("&x" -> x1, "&a" -> x4, (A,1) -> x505)
val x567 = x7 + (x309 -> x502)
val x568 = x7 + (x306 -> x503)
val x569 = if (x317) x567 else x568
val x570 = if (x302) x569 else x7
val x571 = x7 + (x91 -> x506)
val x572 = x7 + (x76 -> x507)
val x573 = if (x80) x571 else x572
val x574 = if (x11) x570 else x7
val x575 = if (x11) x543 else x7
val x576 = Map("val" -> x466, "field" -> 7)
val x577 = Map("val" -> x471, "field" -> 7)
val x578 = if (x343) x468 else x316
val x579 = if (x307) x478 else x353
val x580 = if (x302) x313 else "nil"
val x581 = if (x343) x580 else x352
val x582 = if (x343) 7 else "nil"
val x583 = Map("val" -> x581, "field" -> x582)
val x584 = if (x302) x310 else "nil"
val x585 = if (x307) x584 else x352
val x586 = if (x307) 7 else "nil"
val x587 = Map("val" -> x585, "field" -> x586)
val x588 = if (x317) x583 else x587
val x589 = if (x345) "nil" else 0
val x590 = if (x345) 7 else "nil"
val x591 = Map("val" -> x589, "field" -> x590)
val x592 = if (x78) "nil" else 0
val x593 = if (x78) 7 else "nil"
val x594 = Map("val" -> x592, "field" -> x593)
val x595 = if (x80) x589 else x592
val x596 = if (x80) x590 else x593
val x597 = Map("val" -> x595, "field" -> x596)
val x598 = Map("val" -> x313, "field" -> x582)
val x599 = Map("val" -> x314, "field" -> x586)
val x600 = if (x317) x313 else x314
val x601 = if (x317) x582 else x586
val x602 = Map("val" -> x600, "field" -> x601)
val x603 = if (x302) x602 else x1
val x604 = if (x317) x313 else x465
val x605 = if (x80) x94 else x470
val x606 = if (x302) x604 else "nil"
val x607 = if (x343) x606 else x315
val x608 = Map("val" -> x607, "field" -> x582)
val x609 = if (x307) x477 else x352
val x610 = Map("val" -> x609, "field" -> x586)
val x611 = if (x317) x581 else x585
val x612 = Map("val" -> x611, "field" -> x601)
val x613 = if (x302) x600 else 0
val x614 = if (x302) x601 else "nil"
val x615 = Map("val" -> x613, "field" -> x614)
val x616 = if (x80) x94 else x95
val x617 = if (x11) x613 else 0
val x618 = if (x11) x614 else "nil"
val x619 = Map("val" -> x617, "field" -> x618)
val x620 = x322("val")
val x621 = if (x321) x309 else x620
val x622 = x77("val")
val x623 = if (x82) x91 else x622
val x624 = if (x302) x621 else "undefined"
val x625 = if (x343) x315 else x159
val x626 = if (x307) x349 else x159
val x627 = if (x343) x352 else x159
val x628 = if (x317) x627 else x626
val x629 = if (x345) 0 else x159
val x630 = if (x78) 0 else x159
val x631 = if (x80) x629 else x630
val x632 = if (x343) x313 else x159
val x633 = if (x307) x310 else x159
val x634 = if (x317) x632 else x633
val x635 = if (x302) x634 else x159
val x636 = if (x345) x94 else x159
val x637 = if (x78) x93 else x159
val x638 = if (x80) x636 else x637
val x639 = if (x364) x341 else x635
val x640 = if (x302) x309 else (A,1)
val x641 = if (x302) x632 else x159
val x642 = if (x364) x640 else x641
val x643 = if (x302) x633 else x159
val x644 = if (x317) x642 else x643
val x645 = if (x366) (A,1) else x159
val x646 = if (x80) x645 else x159
val x647 = if (x364) x309 else x632
val x648 = if (x317) x647 else x633
val x649 = if (x302) x648 else x159
val x650 = if (x366) x91 else x636
val x651 = if (x80) x650 else x637
val x652 = if (x385) x624 else x649
val x653 = if (x302) x309 else "undefined"
val x654 = if (x321) x653 else x649
val x655 = if (x302) x620 else "undefined"
val x656 = if (x302) x647 else x159
val x657 = if (x385) x655 else x656
val x658 = if (x321) x653 else x643
val x659 = if (x317) x657 else x658
val x660 = if (x387) "undefined" else x159
val x661 = if (x82) "undefined" else x159
val x662 = if (x80) x660 else x661
val x663 = if (x385) x620 else x647
val x664 = if (x321) x309 else x633
val x665 = if (x317) x663 else x664
val x666 = if (x302) x665 else "undefined"
val x667 = if (x343) x635 else x315
val x668 = if (x307) x643 else x352
val x669 = if (x302) x313 else x159
val x670 = if (x343) x669 else x352
val x671 = if (x302) x310 else x159
val x672 = if (x307) x671 else x352
val x673 = if (x317) x670 else x672
val x674 = if (x345) x159 else 0
val x675 = if (x78) x159 else 0
val x676 = if (x80) x674 else x675
val x677 = if (x317) x313 else x633
val x678 = if (x80) x94 else x637
val x679 = if (x302) x677 else x159
val x680 = if (x343) x679 else x315
val x681 = x620 + 1
val x682 = if (x321) x310 else x681
val x683 = x622 + 1
val x684 = if (x82) x93 else x683
val x685 = if (x302) x682 else x262
val x686 = x306 + 1
val x687 = if (x317) x310 else x686
val x688 = x76 + 1
val x689 = if (x80) x93 else x688
val x690 = if (x302) x687 else x263
val x691 = x309 + 2
val x692 = x312 + 2
val x693 = if (x307) x691 else x692
val x694 = x91 + 2
val x695 = x73 + 2
val x696 = if (x78) x694 else x695
val x697 = if (x302) x693 else 1
val x698 = if (x343) x697 else x169
val x699 = if (x302) x691 else 1
val x700 = if (x307) x699 else x169
val x701 = if (x302) x692 else 1
val x702 = if (x343) x701 else x169
val x703 = if (x317) x702 else x700
val x704 = if (x345) 1 else x169
val x705 = if (x78) 1 else x169
val x706 = if (x80) x704 else x705
val x707 = if (x343) x692 else x169
val x708 = if (x307) x691 else x169
val x709 = if (x317) x707 else x708
val x710 = if (x302) x709 else x169
val x711 = if (x345) x695 else x169
val x712 = if (x78) x694 else x169
val x713 = if (x80) x711 else x712
val x714 = if (x364) x690 else x710
val x715 = if (x302) x310 else x263
val x716 = if (x302) x707 else x169
val x717 = if (x364) x715 else x716
val x718 = if (x302) x708 else x169
val x719 = if (x317) x717 else x718
val x720 = if (x366) x263 else x169
val x721 = if (x80) x720 else x169
val x722 = if (x364) x310 else x707
val x723 = if (x317) x722 else x708
val x724 = if (x302) x723 else x169
val x725 = if (x366) x93 else x711
val x726 = if (x80) x725 else x712
val x727 = if (x385) x685 else x724
val x728 = if (x302) x310 else x262
val x729 = if (x321) x728 else x724
val x730 = if (x302) x681 else x262
val x731 = if (x302) x722 else x169
val x732 = if (x385) x730 else x731
val x733 = if (x321) x728 else x718
val x734 = if (x317) x732 else x733
val x735 = if (x387) x262 else x169
val x736 = if (x82) x262 else x169
val x737 = if (x80) x735 else x736
val x738 = if (x385) x681 else x722
val x739 = if (x321) x310 else x708
val x740 = if (x317) x738 else x739
val x741 = if (x302) x740 else x262
val x742 = if (x343) x710 else x697
val x743 = if (x307) x718 else x701
val x744 = if (x302) x692 else x169
val x745 = if (x343) x744 else x701
val x746 = if (x302) x691 else x169
val x747 = if (x307) x746 else x701
val x748 = if (x317) x745 else x747
val x749 = if (x345) x169 else 1
val x750 = if (x78) x169 else 1
val x751 = if (x80) x749 else x750
val x752 = if (x317) x692 else x693
val x753 = if (x302) x752 else 1
val x754 = if (x317) x692 else x708
val x755 = if (x80) x695 else x712
val x756 = if (x302) x754 else x169
val x757 = if (x343) x756 else x697
val x758 = if (x80) x695 else x696
val x759 = if (x11) x753 else 1
val x760 = Map("val" -> x759)
val x761 = x540 + ("&x" -> x760)
val x762 = x541 + ("&x" -> x760)
val x763 = if (x11) x701 else 1
val x764 = Map("val" -> x763)
val x765 = x540 + ("&x" -> x764)
val x766 = if (x11) x697 else 1
val x767 = Map("val" -> x766)
val x768 = x541 + ("&x" -> x767)
val x769 = if (x317) x765 else x768
val x770 = Map("&x" -> x760, "&a" -> x4, (A,1) -> x6)
val x771 = x546 + ("&x" -> x58)
val x772 = x548 + ("&x" -> x58)
val x773 = if (x80) x771 else x772
val x774 = if (x11) x692 else 1
val x775 = Map("val" -> x774)
val x776 = x540 + ("&x" -> x775)
val x777 = if (x11) x693 else 1
val x778 = Map("val" -> x777)
val x779 = x541 + ("&x" -> x778)
val x780 = if (x317) x776 else x779
val x781 = if (x302) x780 else x59
val x782 = Map("val" -> x753)
val x783 = x540 + ("&x" -> x782)
val x784 = x541 + ("&x" -> x782)
val x785 = Map("val" -> x701)
val x786 = x540 + ("&x" -> x785)
val x787 = Map("val" -> x697)
val x788 = x541 + ("&x" -> x787)
val x789 = if (x317) x786 else x788
val x790 = Map("&x" -> x782, "&a" -> x4, (A,1) -> x6)
val x791 = Map("val" -> x692)
val x792 = x540 + ("&x" -> x791)
val x793 = Map("val" -> x693)
val x794 = x541 + ("&x" -> x793)
val x795 = if (x317) x792 else x794
val x796 = if (x302) x795 else x59
val x797 = Map("val" -> x695)
val x798 = x546 + ("&x" -> x797)
val x799 = Map("val" -> x696)
val x800 = x548 + ("&x" -> x799)
val x801 = if (x80) x798 else x800
val x802 = if (x11) x796 else x59
val x803 = if (x11) x796 else x7
val x804 = fixindex(x9 => x337)
val x805 = x8(x804)
val x806 = x805("&x")
val x807 = x806("val")
val x808 = x807 < 100
val x809 = x805("&a")
val x810 = x809("val")
val x811 = Map("val" -> x810)
val x812 = x805 + ("&r" -> x811)
val x813 = 0 < x804
val x814 = x804 + -1
val x815 = x8(x814)
val x816 = x815("&a")
val x817 = x816("val")
val x818 = x817 == "&x"
val x819 = x815(x817)
val x820 = x819("val")
val x821 = x820 + 1
val x822 = x815("&x")
val x823 = x822("val")
val x824 = x823 + 1
val x825 = if (x818) x821 else x824
val x826 = if (x813) x825 else 0
val x827 = Map("val" -> x826)
val x828 = x817 == "&a"
val x829 = x819 + ("field" -> 7)
val x830 = if (x828) x829 else x816
val x831 = if (x813) x830 else x4
val x832 = x817 == (A,1)
val x833 = x815((A,1))
val x834 = if (x832) x829 else x833
val x835 = if (x813) x834 else x6
val x836 = Map("&x" -> x827, "&a" -> x831, (A,1) -> x835)
val x837 = Map("val" -> x315, "field" -> x582)
val x838 = Map("val" -> x315, "field" -> x586)
val x839 = Map("val" -> x315, "field" -> x601)
val x840 = Map("val" -> 0, "field" -> x596)
val x841 = Map("val" -> x315, "field" -> x614)
val x842 = Map("val" -> x326, "field" -> x618)
val x843 = x540 + ("&x" -> x767)
val x844 = Map("&x" -> x767, "&a" -> x4, (A,1) -> x6)
val x845 = x540 + ("&x" -> x787)
val x846 = Map("&x" -> x787, "&a" -> x4, (A,1) -> x6)
val x847 = Map("val" -> x616, "field" -> x596)
val x848 = if (x387) x622 else x650
val x849 = if (x82) x91 else x637
val x850 = if (x80) x848 else x849
val x851 = if (x387) x683 else x725
val x852 = if (x82) x93 else x712
val x853 = if (x80) x851 else x852
exclude: Set(x8)
xform: Map()
val x854 = 0 < x62
val x855 = x62 + -1
val x856 = x8(x855)
val x857 = x856("&a")
val x858 = x857("val")
val x859 = x858 == "&x"
val x860 = x856(x858)
val x861 = x860("val")
val x862 = x861 + 1
val x863 = x856("&x")
val x864 = x863("val")
val x865 = x864 + 1
val x866 = if (x859) x862 else x865
val x867 = if (x854) x866 else 0
val x868 = Map("val" -> x867)
val x869 = x858 == "&a"
val x870 = x860 + ("field" -> 7)
val x871 = if (x869) x870 else x857
val x872 = if (x854) x871 else x4
val x873 = x858 == (A,1)
val x874 = x856((A,1))
val x875 = if (x873) x870 else x874
val x876 = if (x854) x875 else x6
val x877 = Map("&x" -> x868, "&a" -> x872, (A,1) -> x876)
*** done iterate loop inv: x70
transformed: x70
sched:
val x11 = 0 < x9
val x6 = Map("field" -> 7)
val x4 = Map("val" -> (A,1))
val x1 = Map("val" -> 0)
val x7 = Map("&x" -> x1, "&a" -> x4, (A,1) -> x6)
val x12 = x9 + -1
val x35 = x33 + ("field" -> 7)
val x42 = x13 + (x23 -> x35)
val x26 = x23 == "&x"
val x21 = x13("&a")
val x23 = x21("val")
val x33 = x13(x23)
val x46 = x33("val")
val x49 = x46 + 1
val x50 = x17 + 1
val x51 = if (x26) x49 else x50
val x56 = Map("val" -> x51)
val x57 = x42 + ("&x" -> x56)
val x61 = if (x11) x57 else x7
val x8 = { x9 => x61 }
val x13 = x8(x12)
val x15 = x13("&x")
val x17 = x15("val")
val x19 = x17 < 100
val x62 = fixindex(x9 => x19)
val x63 = x8(x62)
val x67 = x63("&a")
val x68 = x67("val")
val x69 = Map("val" -> x68)
val x70 = x63 + ("&r" -> x69)
term:
val x8 = { x9 => if (0 < x9) x8(x9 + -1) + (x8(x9 + -1)("&a")("val") -> x8(x9 + -1)(x8(x9 + -1)("&a")("val")) + ("field" -> 7)) + ("&x" -> Map("val" -> if (x8(x9 + -1)("&a")("val") == "&x") x8(x9 + -1)(x8(x9 + -1)("&a")("val"))("val") + 1 else x8(x9 + -1)("&x")("val") + 1)) else Map("&x" -> Map("val" -> 0), "&a" -> Map("val" -> (A,1)), (A,1) -> Map("field" -> 7)) }
x8(fixindex(x9 => x8(x9 + -1)("&x")("val") < 100)) + ("&r" -> Map("val" -> x8(fixindex(x9 => x8(x9 + -1)("&x")("val") < 100))("&a")("val")))
----
