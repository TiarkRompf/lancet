prog: {
  Assign(i,Const(0))
  Assign(z,New(A))
  Assign(x,Ref(z))
  While(Less(Ref(i),Const(100)),{
    Assign(y,New(B))
    Put(Ref(y),head,Ref(i))
    Put(Ref(y),tail,Ref(x))
    Assign(x,Ref(y))
    Assign(i,Plus(Ref(i),Const(1)))
  })
}
res: undef
env: 
allocB -> ORef(allocB0)
&x -> OStatic(&x)+{val -> &x0.val}
&i -> OStatic(&i)+{val -> 100}
&z -> OStatic(&z)+{val -> allocA}
&y -> ORef(&y0)
allocA -> ONew(A)
rec: 
allocB0 -> OWhile(&i0.val+1<100,OUndef(),ONew(B_loop)+{head -> &i0.val,tail -> &x0.val})
&x0 -> OStatic(&x)+{val -> lphi(&i0.val+1<100:allocA,allocB)}
&i0 -> OStatic(&i)+{val -> lphi(&i0.val+1<100:0,&i0.val+1)}
&y0 -> OWhile(&i0.val+1<100,OUndef(),OStatic(&y)+{val -> allocB})
true: Set()
false: Set(&i0.val+1<100)
----
prog: {
  Assign(i,Const(0))
  Assign(z,New(A))
  Assign(x,Ref(z))
  Assign(y,New(B))
  While(Less(Ref(i),Const(100)),{
    Put(Ref(y),head,Ref(i))
    Put(Ref(y),tail,Ref(x))
    Assign(x,Ref(y))
    Assign(i,Plus(Ref(i),Const(1)))
  })
}
res: undef
env: 
allocB -> ORef(allocB0)
&x -> OStatic(&x)+{val -> &x0.val}
&i -> OStatic(&i)+{val -> 100}
&z -> OStatic(&z)+{val -> allocA}
&y -> OStatic(&y)+{val -> allocB}
allocA -> ONew(A)
rec: 
allocB0 -> OWhile(&i0.val+1<100,ONew(B),ORef(allocB0)+{head -> &i0.val,tail -> &x0.val})
&x0 -> OStatic(&x)+{val -> lphi(&i0.val+1<100:allocA,allocB)}
&i0 -> OStatic(&i)+{val -> lphi(&i0.val+1<100:0,&i0.val+1)}
true: Set()
false: Set(&i0.val+1<100)
----
prog: {
  Assign(i,Const(0))
  Assign(z,New(A))
  Assign(x,Ref(z))
  While(Less(Ref(i),Const(100)),{
    Put(Ref(x),head,Ref(i))
    Assign(i,Plus(Ref(i),Const(1)))
  })
}
res: undef
env: 
&i -> OStatic(&i)+{val -> 100}
allocA -> ORef(allocA0)
&z -> OStatic(&z)+{val -> allocA}
&x -> OStatic(&x)+{val -> allocA}
rec: 
&i0 -> OStatic(&i)+{val -> lphi(&i0.val+1<100:0,&i0.val+1)}
allocA0 -> OWhile(&i0.val+1<100,ONew(A),ORef(allocA0)+{head -> &i0.val})
true: Set()
false: Set(&i0.val+1<100)
----
