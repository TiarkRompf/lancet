prog: {
  Assign(i,Const(0))
  Assign(z,New(A))
  Assign(x,Ref(z))
  While(Less(Ref(i),Const(100)),{
    Assign(y,New(B))
    Put(Ref(y),Const(head),Ref(i))
    Put(Ref(y),Const(tail),Ref(x))
    Assign(x,Ref(y))
    Assign(i,Plus(Ref(i),Const(1)))
  })
}
val x0 = Map()
val x1 = Map("val" -> 0)
val x2 = Map("&i" -> x1)
val x3 = Map("&i" -> x1, (A,1) -> Map())
val x4 = Map("val" -> (A,1))
val x5 = Map("&i" -> x1, "&z" -> x4)
val x6 = Map("&i" -> x1, "&z" -> x4, "&x" -> x4)
val x9 = (1,x8)
starting spec loop with x6
val x10 = ("B",x9)
val x11 = x6 + (x10 -> Map())
val x12 = Map("val" -> x10)
val x13 = Map("&i" -> x1, "&z" -> x4, "&x" -> x4, "&y" -> x12)
val x14 = Map("head" -> 0)
val x15 = x13 + (x10 -> x14)
val x16 = Map("head" -> 0, "tail" -> (A,1))
val x17 = x15 + (x10 -> x16)
val x18 = x17 + ("&x" -> x12)
val x19 = Map("val" -> 1)
val x20 = x18 + ("&i" -> x19)
lub(x6, x20) = ?
lub_x7(x6,x6,x20)
val x21 = x6 * -1
val x22 = x20 + x21
Map("&i" -> Map("val" -> 0), "&z" -> Map("val" -> (A,1)), "&x" -> Map("val" -> (A,1)))
Map("&i" -> Map("val" -> 0), "&z" -> Map("val" -> (A,1)), "&x" -> Map("val" -> (A,1)), "&y" -> Map("val" -> ("B",(1,x8)))) + (("B",(1,x8)) -> Map("head" -> 0)) + (("B",(1,x8)) -> Map("head" -> 0, "tail" -> (A,1))) + ("&x" -> Map("val" -> ("B",(1,x8)))) + ("&i" -> Map("val" -> 1))
Map("&i" -> Map("val" -> 0), "&z" -> Map("val" -> (A,1)), "&x" -> Map("val" -> (A,1)), "&y" -> Map("val" -> ("B",(1,x8)))) + (("B",(1,x8)) -> Map("head" -> 0)) + (("B",(1,x8)) -> Map("head" -> 0, "tail" -> (A,1))) + ("&x" -> Map("val" -> ("B",(1,x8)))) + ("&i" -> Map("val" -> 1)) + Map("&i" -> Map("val" -> 0), "&z" -> Map("val" -> (A,1)), "&x" -> Map("val" -> (A,1))) * -1
poly: List()
giving up: deriv List(); recursive fun x7
val x23 = x8 + -1
val x24 = x7(x23)
val x25 = 0 < x8
val x26 = if (x25) x24 else x6
val x27 = x7(x8)
val x28 = if (x25) x27 else x6
lub(x6, x20) = x26
starting spec loop with x26
val x29 = x24("&i")
val x30 = if (x25) x29 else x1
val x31 = x29("val")
val x32 = if (x25) x31 else 0
val x33 = x31 < 100
val x34 = if (x25) x33 else 1
val x35 = x24 + (x10 -> Map())
val x36 = if (x25) x35 else x11
val x37 = x24 + ("&y" -> x12)
val x38 = if (x25) x37 else x13
val x39 = x24("&y")
val x40 = x24(x10)
val x41 = if (x25) x40 else "undefined"
val x42 = x40 + ("head" -> x32)
val x43 = Map("head" -> x32)
val x44 = x40 + ("head" -> x31)
val x45 = if (x25) x44 else x14
val x46 = x37 + (x10 -> x45)
val x47 = x13 + (x10 -> x45)
val x48 = x37 + (x10 -> x44)
val x49 = if (x25) x48 else x15
val x50 = x24("&x")
val x51 = if (x25) x50 else x4
val x52 = x50("val")
val x53 = if (x25) x52 else (A,1)
val x54 = x44 + ("tail" -> x53)
val x55 = Map("head" -> 0, "tail" -> x53)
val x56 = x44 + ("tail" -> x52)
val x57 = if (x25) x56 else x16
val x58 = x48 + (x10 -> x57)
val x59 = x15 + (x10 -> x57)
val x60 = x48 + (x10 -> x56)
val x61 = if (x25) x60 else x17
val x62 = x60 + ("&x" -> x12)
val x63 = if (x25) x62 else x18
val x64 = x31 + 1
val x65 = if (x25) x64 else 1
val x66 = Map("val" -> x65)
val x67 = x62 + ("&i" -> x66)
val x68 = x18 + ("&i" -> x66)
val x69 = Map("val" -> x64)
val x70 = x62 + ("&i" -> x69)
val x71 = if (x25) x70 else x20
lub(x6, x71) = ?
lub_x7(x6,x26,x71)
val x72 = x24 * -1
val x73 = if (x25) x72 else x21
val x74 = x70 + x73
val x75 = x20 + x73
val x76 = x70 + x72
val x77 = if (x25) x76 else x22
if (0 < x8) x7(x8 + -1) else Map("&i" -> Map("val" -> 0), "&z" -> Map("val" -> (A,1)), "&x" -> Map("val" -> (A,1)))
if (0 < x8) x7(x8 + -1) + ("&y" -> Map("val" -> ("B",(1,x8)))) + (("B",(1,x8)) -> x7(x8 + -1)(("B",(1,x8))) + ("head" -> x7(x8 + -1)("&i")("val"))) + (("B",(1,x8)) -> x7(x8 + -1)(("B",(1,x8))) + ("head" -> x7(x8 + -1)("&i")("val")) + ("tail" -> x7(x8 + -1)("&x")("val"))) + ("&x" -> Map("val" -> ("B",(1,x8)))) + ("&i" -> Map("val" -> x7(x8 + -1)("&i")("val") + 1)) else Map("&i" -> Map("val" -> 0), "&z" -> Map("val" -> (A,1)), "&x" -> Map("val" -> (A,1)), "&y" -> Map("val" -> ("B",(1,x8)))) + (("B",(1,x8)) -> Map("head" -> 0)) + (("B",(1,x8)) -> Map("head" -> 0, "tail" -> (A,1))) + ("&x" -> Map("val" -> ("B",(1,x8)))) + ("&i" -> Map("val" -> 1))
if (0 < x8) x7(x8 + -1) + ("&y" -> Map("val" -> ("B",(1,x8)))) + (("B",(1,x8)) -> x7(x8 + -1)(("B",(1,x8))) + ("head" -> x7(x8 + -1)("&i")("val"))) + (("B",(1,x8)) -> x7(x8 + -1)(("B",(1,x8))) + ("head" -> x7(x8 + -1)("&i")("val")) + ("tail" -> x7(x8 + -1)("&x")("val"))) + ("&x" -> Map("val" -> ("B",(1,x8)))) + ("&i" -> Map("val" -> x7(x8 + -1)("&i")("val") + 1)) + x7(x8 + -1) * -1 else Map("&i" -> Map("val" -> 0), "&z" -> Map("val" -> (A,1)), "&x" -> Map("val" -> (A,1)), "&y" -> Map("val" -> ("B",(1,x8)))) + (("B",(1,x8)) -> Map("head" -> 0)) + (("B",(1,x8)) -> Map("head" -> 0, "tail" -> (A,1))) + ("&x" -> Map("val" -> ("B",(1,x8)))) + ("&i" -> Map("val" -> 1)) + Map("&i" -> Map("val" -> 0), "&z" -> Map("val" -> (A,1)), "&x" -> Map("val" -> (A,1))) * -1
poly: List()
giving up: deriv List(); recursive fun x7
lub(x6, x71) = x26
val x7 = { x8 => x71 }
val x78 = fixindex(x8 => x33)
fixindex: x78
val x79 = x7(x78)
val x80 = x79("&i")
val x81 = x80("val")
val x82 = x81 < 100
res: ()
store: x79
transformed: x79
sched:
val x9 = (1,x8)
val x10 = ("B",x9)
val x12 = Map("val" -> x10)
val x25 = 0 < x8
val x19 = Map("val" -> 1)
val x16 = Map("head" -> 0, "tail" -> (A,1))
val x14 = Map("head" -> 0)
val x4 = Map("val" -> (A,1))
val x1 = Map("val" -> 0)
val x13 = Map("&i" -> x1, "&z" -> x4, "&x" -> x4, "&y" -> x12)
val x15 = x13 + (x10 -> x14)
val x17 = x15 + (x10 -> x16)
val x18 = x17 + ("&x" -> x12)
val x20 = x18 + ("&i" -> x19)
val x23 = x8 + -1
val x37 = x24 + ("&y" -> x12)
val x48 = x37 + (x10 -> x44)
val x40 = x24(x10)
val x44 = x40 + ("head" -> x31)
val x50 = x24("&x")
val x52 = x50("val")
val x56 = x44 + ("tail" -> x52)
val x60 = x48 + (x10 -> x56)
val x62 = x60 + ("&x" -> x12)
val x64 = x31 + 1
val x69 = Map("val" -> x64)
val x70 = x62 + ("&i" -> x69)
val x71 = if (x25) x70 else x20
val x7 = { x8 => x71 }
val x24 = x7(x23)
val x29 = x24("&i")
val x31 = x29("val")
val x33 = x31 < 100
val x78 = fixindex(x8 => x33)
val x79 = x7(x78)
term:
val x7 = { x8 => if (0 < x8) x7(x8 + -1) + ("&y" -> Map("val" -> ("B",(1,x8)))) + (("B",(1,x8)) -> x7(x8 + -1)(("B",(1,x8))) + ("head" -> x7(x8 + -1)("&i")("val"))) + (("B",(1,x8)) -> x7(x8 + -1)(("B",(1,x8))) + ("head" -> x7(x8 + -1)("&i")("val")) + ("tail" -> x7(x8 + -1)("&x")("val"))) + ("&x" -> Map("val" -> ("B",(1,x8)))) + ("&i" -> Map("val" -> x7(x8 + -1)("&i")("val") + 1)) else Map("&i" -> Map("val" -> 0), "&z" -> Map("val" -> (A,1)), "&x" -> Map("val" -> (A,1)), "&y" -> Map("val" -> ("B",(1,x8)))) + (("B",(1,x8)) -> Map("head" -> 0)) + (("B",(1,x8)) -> Map("head" -> 0, "tail" -> (A,1))) + ("&x" -> Map("val" -> ("B",(1,x8)))) + ("&i" -> Map("val" -> 1)) }
x7(fixindex(x8 => x7(x8 + -1)("&i")("val") < 100))
----
