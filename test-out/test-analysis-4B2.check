prog: {
  Assign(i,Const(0))
  Assign(z,New(A))
  Assign(x,Ref(z))
  While(Less(Ref(i),Const(100)),{
    Assign(y,New(B))
    Put(Ref(y),Const(head),Ref(i))
    Put(Ref(y),Const(tail),Ref(x))
    Assign(x,Ref(y))
    Assign(i,Plus(Ref(i),Const(1)))
  })
  Assign(s,Const(0))
  While(NotEqual(Ref(x),Ref(z)),{
    Assign(i,Get(Ref(x),Const(head)))
    Assign(x,Get(Ref(x),Const(tail)))
    Assign(s,Plus(Ref(s),Ref(i)))
  })
}
val x0 = Map()
val x1 = Map("val" -> 0)
val x2 = Map("&i" -> x1)
val x3 = Map(1 -> Map())
val x4 = Map("&i" -> x1, "A" -> x3)
val x5 = Map("val" -> (A,1))
val x6 = Map("&i" -> x1, "&z" -> x5)
val x7 = Map("&i" -> x1, "&z" -> x5, "&x" -> x5)
val x10 = (1,x9)
starting spec loop with x7
val x11 = ("B",x10)
val x12 = x0 + (x9 -> Map())
val x13 = Map(1 -> x12)
val x14 = Map("&i" -> x1, "&z" -> x5, "&x" -> x5, "B" -> x13)
val x15 = Map("val" -> x11)
val x16 = Map("&i" -> x1, "&z" -> x5, "&x" -> x5, "&y" -> x15)
val x17 = "undefined"(x10)
val x18 = x17 + ("head" -> 0)
val x19 = x0 + (x9 -> x18)
val x20 = Map(1 -> x19)
val x21 = Map("&x" -> x5, "&y" -> x15, "B" -> x20, "&z" -> x5, "&i" -> x1)
val x22 = x18 + ("tail" -> (A,1))
val x23 = x0 + (x9 -> x22)
val x24 = Map(1 -> x23)
val x25 = Map("&x" -> x5, "&y" -> x15, "B" -> x24, "&z" -> x5, "&i" -> x1)
val x26 = Map("&x" -> x15, "&y" -> x15, "B" -> x24, "&z" -> x5, "&i" -> x1)
val x27 = Map("val" -> 1)
val x28 = Map("&x" -> x15, "&y" -> x15, "B" -> x24, "&z" -> x5, "&i" -> x27)
lub(x7, x28) = ?
lub_x8(x7,x7,x28)
lub_x8_&x(x5,x5,x15)
lub_x8_&x_val((A,1),(A,1),x11)
(A,1)
(A,1)
("B",(1,x9))
hit pair -- assume only 0 case differs (loop peeling)
val x29 = x9 + -1
val x30 = (1,x29)
val x31 = ("B",x30)
val x32 = 0 < x9
val x33 = if (x32) x31 else (A,1)
val x34 = if (x32) x11 else (A,1)
Set(("val",(x33,x34)))
val x35 = Map("val" -> x33)
val x36 = Map("val" -> x34)
lub_x8_&y("undefined","undefined",x15)
val x37 = "undefined" * -1
val x38 = x15 + x37
"undefined"
Map("val" -> ("B",(1,x9)))
Map("val" -> ("B",(1,x9))) + "undefined" * -1
poly: List()
giving up: deriv List(); recursive fun x8_&y
val x39 = x8_&y(x29)
val x40 = if (x32) x39 else "undefined"
val x41 = x8_&y(x9)
val x42 = if (x32) x41 else "undefined"
lub_x8_B("undefined","undefined",x24)
val x43 = x24 + x37
"undefined"
Map(1 -> Map() + (x9 -> "undefined"((1,x9)) + ("head" -> 0) + ("tail" -> (A,1))))
Map(1 -> Map() + (x9 -> "undefined"((1,x9)) + ("head" -> 0) + ("tail" -> (A,1)))) + "undefined" * -1
poly: List()
giving up: deriv List(); recursive fun x8_B
val x44 = x8_B(x29)
val x45 = if (x32) x44 else "undefined"
val x46 = x8_B(x9)
val x47 = if (x32) x46 else "undefined"
lub_x8_&z(x5,x5,x5)
lub_x8_&i(x1,x1,x27)
lub_x8_&i_val(0,0,1)
0
1
1
confirmed iterative loop, d = 1
Set(("val",(x29,x9)))
val x48 = Map("val" -> x29)
val x49 = Map("val" -> x9)
Set(("&z",(x5,x5)), ("&x",(x35,x36)), ("B",(x45,x47)), ("&y",(x40,x42)), ("&i",(x48,x49)))
val x50 = Map("&x" -> x35, "&y" -> x40, "B" -> x45, "&z" -> x5, "&i" -> x48)
val x51 = Map("&x" -> x36, "&y" -> x42, "B" -> x47, "&z" -> x5, "&i" -> x49)
lub(x7, x28) = x50
starting spec loop with x50
val x52 = x9 < 101
val x53 = x44 + (x10 -> Map())
val x54 = if (x32) x53 else x13
val x55 = Map("&x" -> x35, "&y" -> x40, "B" -> x54, "&z" -> x5, "&i" -> x48)
val x56 = Map("&x" -> x35, "&y" -> x15, "B" -> x45, "&z" -> x5, "&i" -> x48)
val x57 = x44(x10)
val x58 = if (x32) x57 else x17
val x59 = x57 + ("head" -> x29)
val x60 = x17 + ("head" -> x29)
val x61 = if (x32) x59 else x60
val x62 = x44 + (x10 -> x61)
val x63 = x0 + (x9 -> x61)
val x64 = Map(1 -> x63)
val x65 = x44 + (x10 -> x59)
val x66 = x0 + (x9 -> x60)
val x67 = Map(1 -> x66)
val x68 = if (x32) x65 else x67
val x69 = Map("&x" -> x35, "&y" -> x15, "B" -> x68, "&z" -> x5, "&i" -> x48)
val x70 = x59 + ("tail" -> x33)
val x71 = x60 + ("tail" -> x33)
val x72 = x59 + ("tail" -> x31)
val x73 = x60 + ("tail" -> (A,1))
val x74 = if (x32) x72 else x73
val x75 = x44 + (x10 -> x74)
val x76 = x0 + (x9 -> x74)
val x77 = Map(1 -> x76)
val x78 = x44 + (x10 -> x72)
val x79 = x0 + (x9 -> x73)
val x80 = Map(1 -> x79)
val x81 = if (x32) x78 else x80
val x82 = Map("&x" -> x35, "&y" -> x15, "B" -> x81, "&z" -> x5, "&i" -> x48)
val x83 = Map("&x" -> x15, "&y" -> x15, "B" -> x81, "&z" -> x5, "&i" -> x48)
val x84 = Map("&x" -> x15, "&y" -> x15, "B" -> x81, "&z" -> x5, "&i" -> x49)
lub(x7, x84) = ?
lub_x8(x7,x50,x84)
lub_x8_&x(x5,x35,x15)
lub_x8_&x_val((A,1),x33,x11)
(A,1)
if (0 < x9) ("B",(1,x9 + -1)) else (A,1)
("B",(1,x9))
hit pair -- assume only 0 case differs (loop peeling)
Set(("val",(x33,x34)))
lub_x8_&y("undefined",x40,x15)
val x85 = x39 * -1
val x86 = if (x32) x85 else x37
val x87 = x15 + x86
if (0 < x9) x8_&y(x9 + -1) else "undefined"
Map("val" -> ("B",(1,x9)))
Map("val" -> ("B",(1,x9))) + if (0 < x9) x8_&y(x9 + -1) * -1 else "undefined" * -1
poly: List()
giving up: deriv List(); recursive fun x8_&y
lub_x8_B("undefined",x45,x81)
val x88 = x44 * -1
val x89 = if (x32) x88 else x37
val x90 = x78 + x89
val x91 = x80 + x89
val x92 = x78 + x88
val x93 = x80 + x37
val x94 = if (x32) x92 else x93
if (0 < x9) x8_B(x9 + -1) else "undefined"
if (0 < x9) x8_B(x9 + -1) + ((1,x9) -> x8_B(x9 + -1)((1,x9)) + ("head" -> x9 + -1) + ("tail" -> ("B",(1,x9 + -1)))) else Map(1 -> Map() + (x9 -> "undefined"((1,x9)) + ("head" -> x9 + -1) + ("tail" -> (A,1))))
if (0 < x9) x8_B(x9 + -1) + ((1,x9) -> x8_B(x9 + -1)((1,x9)) + ("head" -> x9 + -1) + ("tail" -> ("B",(1,x9 + -1)))) + x8_B(x9 + -1) * -1 else Map(1 -> Map() + (x9 -> "undefined"((1,x9)) + ("head" -> x9 + -1) + ("tail" -> (A,1)))) + "undefined" * -1
poly: List()
giving up: deriv List(); recursive fun x8_B
lub_x8_&z(x5,x5,x5)
lub_x8_&i(x1,x48,x49)
lub_x8_&i_val(0,x29,x9)
val x95 = x9 * -1
val x96 = x95 + 1
x9 + -1
x9
1
confirmed iterative loop, d = 1
Set(("val",(x29,x9)))
Set(("&z",(x5,x5)), ("&x",(x35,x36)), ("B",(x45,x47)), ("&y",(x40,x42)), ("&i",(x48,x49)))
lub(x7, x84) = x50
val x8_&x_val = { x9 => x11 }
val x8_&y = { x9 => x15 }
val x8_B = { x9 => x81 }
val x8_&i_val = { x9 => x9 }
val x97 = Map("&x" -> x15, "&y" -> x15, "B" -> x46, "&z" -> x5, "&i" -> x49)
val x8 = { x9 => x97 }
fixindex: 100
val x98 = Map("val" -> (B,(1,100)))
val x99 = x8_B(100)
val x100 = Map("val" -> 100)
val x101 = Map("&x" -> x98, "&y" -> x98, "B" -> x99, "&z" -> x5, "&i" -> x100)
*** after loop x101 ***
val x102 = Map("&x" -> x98, "&s" -> x1, "&y" -> x98, "B" -> x99, "&z" -> x5, "&i" -> x100)
val x105 = (1,x104)
starting spec loop with x102
val x106 = x99((1,100))
val x107 = x106("head")
val x108 = Map("val" -> x107)
val x109 = Map("&x" -> x98, "&s" -> x1, "&y" -> x98, "B" -> x99, "&z" -> x5, "&i" -> x108)
val x110 = x106("tail")
val x111 = Map("val" -> x110)
val x112 = Map("&x" -> x111, "&s" -> x1, "&y" -> x98, "B" -> x99, "&z" -> x5, "&i" -> x108)
val x113 = Map("&x" -> x111, "&s" -> x108, "&y" -> x98, "B" -> x99, "&z" -> x5, "&i" -> x108)
lub(x102, x113) = ?
lub_x103(x102,x102,x113)
lub_x103_&x(x98,x98,x111)
lub_x103_&x_val((B,(1,100)),(B,(1,100)),x110)
val x114 = (B,(1,100)) * -1
val x115 = x110 + x114
(B,(1,100))
val x8_B = { x9 => if (0 < x9) x8_B(x9 + -1) + ((1,x9) -> x8_B(x9 + -1)((1,x9)) + ("head" -> x9 + -1) + ("tail" -> ("B",(1,x9 + -1)))) else Map(1 -> Map() + (x9 -> "undefined"((1,x9)) + ("head" -> x9 + -1) + ("tail" -> (A,1)))) }
x8_B(100)((1,100))("tail")
val x8_B = { x9 => if (0 < x9) x8_B(x9 + -1) + ((1,x9) -> x8_B(x9 + -1)((1,x9)) + ("head" -> x9 + -1) + ("tail" -> ("B",(1,x9 + -1)))) else Map(1 -> Map() + (x9 -> "undefined"((1,x9)) + ("head" -> x9 + -1) + ("tail" -> (A,1)))) }
x8_B(100)((1,100))("tail") + (B,(1,100)) * -1
confirmed iterative loop, d = x115
val x116 = x104 + -1
val x117 = x104 * x110
val x118 = x104 * x114
val x119 = x117 + x118
val x120 = x110 * -1
val x121 = x120 + (B,(1,100))
val x122 = x118 + x121
val x123 = x117 + x122
val x124 = (B,(1,100)) + (B,(1,100))
val x125 = x120 + x124
val x126 = x118 + x125
val x127 = x117 + x126
val x128 = x118 + (B,(1,100))
val x129 = x117 + x128
Set(("val",(x127,x129)))
val x130 = Map("val" -> x127)
val x131 = Map("val" -> x129)
lub_x103_&s(x1,x1,x108)
lub_x103_&s_val(0,0,x107)
0
val x8_B = { x9 => if (0 < x9) x8_B(x9 + -1) + ((1,x9) -> x8_B(x9 + -1)((1,x9)) + ("head" -> x9 + -1) + ("tail" -> ("B",(1,x9 + -1)))) else Map(1 -> Map() + (x9 -> "undefined"((1,x9)) + ("head" -> x9 + -1) + ("tail" -> (A,1)))) }
x8_B(100)((1,100))("head")
val x8_B = { x9 => if (0 < x9) x8_B(x9 + -1) + ((1,x9) -> x8_B(x9 + -1)((1,x9)) + ("head" -> x9 + -1) + ("tail" -> ("B",(1,x9 + -1)))) else Map(1 -> Map() + (x9 -> "undefined"((1,x9)) + ("head" -> x9 + -1) + ("tail" -> (A,1)))) }
x8_B(100)((1,100))("head")
confirmed iterative loop, d = x107
val x132 = x104 * x107
val x133 = x107 * -1
val x134 = x132 + x133
Set(("val",(x134,x132)))
val x135 = Map("val" -> x134)
val x136 = Map("val" -> x132)
lub_x103_&y(x98,x98,x98)
lub_x103_B(x99,x99,x99)
lub_x103_&z(x5,x5,x5)
lub_x103_&i(x100,x100,x108)
lub_x103_&i_val(100,100,x107)
val x137 = x107 + -100
100
val x8_B = { x9 => if (0 < x9) x8_B(x9 + -1) + ((1,x9) -> x8_B(x9 + -1)((1,x9)) + ("head" -> x9 + -1) + ("tail" -> ("B",(1,x9 + -1)))) else Map(1 -> Map() + (x9 -> "undefined"((1,x9)) + ("head" -> x9 + -1) + ("tail" -> (A,1)))) }
x8_B(100)((1,100))("head")
val x8_B = { x9 => if (0 < x9) x8_B(x9 + -1) + ((1,x9) -> x8_B(x9 + -1)((1,x9)) + ("head" -> x9 + -1) + ("tail" -> ("B",(1,x9 + -1)))) else Map(1 -> Map() + (x9 -> "undefined"((1,x9)) + ("head" -> x9 + -1) + ("tail" -> (A,1)))) }
x8_B(100)((1,100))("head") + -100
confirmed iterative loop, d = x137
val x138 = x104 * -100
val x139 = x132 + x138
val x140 = x133 + 100
val x141 = x138 + x140
val x142 = x132 + x141
val x143 = x133 + 200
val x144 = x138 + x143
val x145 = x132 + x144
val x146 = x138 + 100
val x147 = x132 + x146
Set(("val",(x145,x147)))
val x148 = Map("val" -> x145)
val x149 = Map("val" -> x147)
Set(("&z",(x5,x5)), ("B",(x99,x99)), ("&y",(x98,x98)), ("&s",(x135,x136)), ("&i",(x148,x149)), ("&x",(x130,x131)))
val x150 = Map("&x" -> x130, "&s" -> x135, "&y" -> x98, "B" -> x99, "&z" -> x5, "&i" -> x148)
val x151 = Map("&x" -> x131, "&s" -> x136, "&y" -> x98, "B" -> x99, "&z" -> x5, "&i" -> x149)
lub(x102, x113) = x150
starting spec loop with x150
val x152 = x127 != (A,1)
val x153 = x127 == "&x"
val x154 = if (x153) x130 else "undefined"
val x155 = x127 == "&s"
val x156 = if (x155) x135 else x154
val x157 = x127 == "&y"
val x158 = if (x157) x98 else x156
val x159 = x127 == "B"
val x160 = if (x159) x99 else x158
val x161 = x127 == "&z"
val x162 = if (x161) x5 else x160
val x163 = x127 == "&i"
val x164 = if (x163) x148 else x162
val x165 = x99("head")
val x166 = "undefined"("head")
val x167 = if (x153) "undefined" else x166
val x168 = if (x155) "undefined" else x167
val x169 = if (x157) "undefined" else x168
val x170 = if (x159) x165 else x169
val x171 = if (x161) "undefined" else x170
val x172 = if (x163) "undefined" else x171
val x173 = Map("val" -> x172)
val x174 = Map("&x" -> x130, "&s" -> x135, "&y" -> x98, "B" -> x99, "&z" -> x5, "&i" -> x173)
val x175 = Map("val" -> "undefined")
val x176 = if (x163) x175 else x162
val x177 = x99("tail")
val x178 = "undefined"("tail")
val x179 = if (x153) "undefined" else x178
val x180 = if (x155) "undefined" else x179
val x181 = if (x157) "undefined" else x180
val x182 = if (x159) x177 else x181
val x183 = if (x161) "undefined" else x182
val x184 = if (x163) "undefined" else x183
val x185 = Map("val" -> x184)
val x186 = Map("&x" -> x185, "&s" -> x135, "&y" -> x98, "B" -> x99, "&z" -> x5, "&i" -> x173)
val x187 = x133 + x172
val x188 = x132 + x187
val x189 = Map("val" -> x188)
val x190 = Map("&x" -> x185, "&s" -> x189, "&y" -> x98, "B" -> x99, "&z" -> x5, "&i" -> x173)
lub(x102, x190) = ?
lub_x103(x102,x150,x190)
lub_x103_&x(x98,x130,x185)
lub_x103_&x_val((B,(1,100)),x127,x184)
val x191 = x104 * x120
val x192 = x104 * (B,(1,100))
val x193 = (B,(1,100)) * -2
val x194 = x110 + x193
val x195 = x192 + x194
val x196 = x191 + x195
val x197 = x193 + "undefined"
val x198 = x110 + x197
val x199 = x192 + x198
val x200 = x191 + x199
val x201 = x177 + x196
val x202 = x178 + x196
val x203 = if (x153) x200 else x202
val x204 = if (x155) x200 else x203
val x205 = if (x157) x200 else x204
val x206 = if (x159) x201 else x205
val x207 = if (x161) x200 else x206
val x208 = if (x163) x200 else x207
val x8_B = { x9 => if (0 < x9) x8_B(x9 + -1) + ((1,x9) -> x8_B(x9 + -1)((1,x9)) + ("head" -> x9 + -1) + ("tail" -> ("B",(1,x9 + -1)))) else Map(1 -> Map() + (x9 -> "undefined"((1,x9)) + ("head" -> x9 + -1) + ("tail" -> (A,1)))) }
x104 * x8_B(100)((1,100))("tail") + x104 * (B,(1,100)) * -1 + x8_B(100)((1,100))("tail") * -1 + (B,(1,100)) + (B,(1,100))
val x8_B = { x9 => if (0 < x9) x8_B(x9 + -1) + ((1,x9) -> x8_B(x9 + -1)((1,x9)) + ("head" -> x9 + -1) + ("tail" -> ("B",(1,x9 + -1)))) else Map(1 -> Map() + (x9 -> "undefined"((1,x9)) + ("head" -> x9 + -1) + ("tail" -> (A,1)))) }
if (x104 * x8_B(100)((1,100))("tail") + x104 * (B,(1,100)) * -1 + x8_B(100)((1,100))("tail") * -1 + (B,(1,100)) + (B,(1,100)) == "&i") "undefined" else {
  if (x104 * x8_B(100)((1,100))("tail") + x104 * (B,(1,100)) * -1 + x8_B(100)((1,100))("tail") * -1 + (B,(1,100)) + (B,(1,100)) == "&z") "undefined" else {
    if (x104 * x8_B(100)((1,100))("tail") + x104 * (B,(1,100)) * -1 + x8_B(100)((1,100))("tail") * -1 + (B,(1,100)) + (B,(1,100)) == "B") x8_B(100)("tail") else {
      if (x104 * x8_B(100)((1,100))("tail") + x104 * (B,(1,100)) * -1 + x8_B(100)((1,100))("tail") * -1 + (B,(1,100)) + (B,(1,100)) == "&y") "undefined" else {
        if (x104 * x8_B(100)((1,100))("tail") + x104 * (B,(1,100)) * -1 + x8_B(100)((1,100))("tail") * -1 + (B,(1,100)) + (B,(1,100)) == "&s") "undefined" else {
          if (x104 * x8_B(100)((1,100))("tail") + x104 * (B,(1,100)) * -1 + x8_B(100)((1,100))("tail") * -1 + (B,(1,100)) + (B,(1,100)) == "&x") "undefined" else "undefined"("tail")
        }
      }
    }
  }
}
val x8_B = { x9 => if (0 < x9) x8_B(x9 + -1) + ((1,x9) -> x8_B(x9 + -1)((1,x9)) + ("head" -> x9 + -1) + ("tail" -> ("B",(1,x9 + -1)))) else Map(1 -> Map() + (x9 -> "undefined"((1,x9)) + ("head" -> x9 + -1) + ("tail" -> (A,1)))) }
if (x104 * x8_B(100)((1,100))("tail") + x104 * (B,(1,100)) * -1 + x8_B(100)((1,100))("tail") * -1 + (B,(1,100)) + (B,(1,100)) == "&i") x104 * x8_B(100)((1,100))("tail") * -1 + x104 * (B,(1,100)) + x8_B(100)((1,100))("tail") + (B,(1,100)) * -2 + "undefined" else {
  if (x104 * x8_B(100)((1,100))("tail") + x104 * (B,(1,100)) * -1 + x8_B(100)((1,100))("tail") * -1 + (B,(1,100)) + (B,(1,100)) == "&z") x104 * x8_B(100)((1,100))("tail") * -1 + x104 * (B,(1,100)) + x8_B(100)((1,100))("tail") + (B,(1,100)) * -2 + "undefined" else {
    if (x104 * x8_B(100)((1,100))("tail") + x104 * (B,(1,100)) * -1 + x8_B(100)((1,100))("tail") * -1 + (B,(1,100)) + (B,(1,100)) == "B") x8_B(100)("tail") + x104 * x8_B(100)((1,100))("tail") * -1 + x104 * (B,(1,100)) + x8_B(100)((1,100))("tail") + (B,(1,100)) * -2 else {
      if (x104 * x8_B(100)((1,100))("tail") + x104 * (B,(1,100)) * -1 + x8_B(100)((1,100))("tail") * -1 + (B,(1,100)) + (B,(1,100)) == "&y") x104 * x8_B(100)((1,100))("tail") * -1 + x104 * (B,(1,100)) + x8_B(100)((1,100))("tail") + (B,(1,100)) * -2 + "undefined" else {
        if (x104 * x8_B(100)((1,100))("tail") + x104 * (B,(1,100)) * -1 + x8_B(100)((1,100))("tail") * -1 + (B,(1,100)) + (B,(1,100)) == "&s") x104 * x8_B(100)((1,100))("tail") * -1 + x104 * (B,(1,100)) + x8_B(100)((1,100))("tail") + (B,(1,100)) * -2 + "undefined" else {
          if (x104 * x8_B(100)((1,100))("tail") + x104 * (B,(1,100)) * -1 + x8_B(100)((1,100))("tail") * -1 + (B,(1,100)) + (B,(1,100)) == "&x") x104 * x8_B(100)((1,100))("tail") * -1 + x104 * (B,(1,100)) + x8_B(100)((1,100))("tail") + (B,(1,100)) * -2 + "undefined" else "undefined"("tail") + x104 * x8_B(100)((1,100))("tail") * -1 + x104 * (B,(1,100)) + x8_B(100)((1,100))("tail") + (B,(1,100)) * -2
        }
      }
    }
  }
}
poly: List()
giving up: deriv List(); recursive fun x103_&x_val
val x209 = x103_&x_val(x116)
val x210 = 0 < x104
val x211 = if (x210) x209 else (B,(1,100))
val x212 = x103_&x_val(x104)
val x213 = if (x210) x212 else (B,(1,100))
Set(("val",(x211,x213)))
val x214 = Map("val" -> x211)
val x215 = Map("val" -> x213)
lub_x103_&s(x1,x135,x189)
lub_x103_&s_val(0,x134,x188)
val x216 = x104 * x133
val x217 = x216 + x107
val x218 = x107 + "undefined"
val x219 = x216 + x218
val x220 = x165 + x217
val x221 = x166 + x217
val x222 = if (x153) x219 else x221
val x223 = if (x155) x219 else x222
val x224 = if (x157) x219 else x223
val x225 = if (x159) x220 else x224
val x226 = if (x161) x219 else x225
val x227 = if (x163) x219 else x226
val x228 = x133 + x227
val x229 = x132 + x228
val x8_B = { x9 => if (0 < x9) x8_B(x9 + -1) + ((1,x9) -> x8_B(x9 + -1)((1,x9)) + ("head" -> x9 + -1) + ("tail" -> ("B",(1,x9 + -1)))) else Map(1 -> Map() + (x9 -> "undefined"((1,x9)) + ("head" -> x9 + -1) + ("tail" -> (A,1)))) }
x104 * x8_B(100)((1,100))("head") + x8_B(100)((1,100))("head") * -1
val x8_B = { x9 => if (0 < x9) x8_B(x9 + -1) + ((1,x9) -> x8_B(x9 + -1)((1,x9)) + ("head" -> x9 + -1) + ("tail" -> ("B",(1,x9 + -1)))) else Map(1 -> Map() + (x9 -> "undefined"((1,x9)) + ("head" -> x9 + -1) + ("tail" -> (A,1)))) }
x104 * x8_B(100)((1,100))("head") + x8_B(100)((1,100))("head") * -1 + if (x104 * x8_B(100)((1,100))("tail") + x104 * (B,(1,100)) * -1 + x8_B(100)((1,100))("tail") * -1 + (B,(1,100)) + (B,(1,100)) == "&i") "undefined" else {
  if (x104 * x8_B(100)((1,100))("tail") + x104 * (B,(1,100)) * -1 + x8_B(100)((1,100))("tail") * -1 + (B,(1,100)) + (B,(1,100)) == "&z") "undefined" else {
    if (x104 * x8_B(100)((1,100))("tail") + x104 * (B,(1,100)) * -1 + x8_B(100)((1,100))("tail") * -1 + (B,(1,100)) + (B,(1,100)) == "B") x8_B(100)("head") else {
      if (x104 * x8_B(100)((1,100))("tail") + x104 * (B,(1,100)) * -1 + x8_B(100)((1,100))("tail") * -1 + (B,(1,100)) + (B,(1,100)) == "&y") "undefined" else {
        if (x104 * x8_B(100)((1,100))("tail") + x104 * (B,(1,100)) * -1 + x8_B(100)((1,100))("tail") * -1 + (B,(1,100)) + (B,(1,100)) == "&s") "undefined" else {
          if (x104 * x8_B(100)((1,100))("tail") + x104 * (B,(1,100)) * -1 + x8_B(100)((1,100))("tail") * -1 + (B,(1,100)) + (B,(1,100)) == "&x") "undefined" else "undefined"("head")
        }
      }
    }
  }
}
val x8_B = { x9 => if (0 < x9) x8_B(x9 + -1) + ((1,x9) -> x8_B(x9 + -1)((1,x9)) + ("head" -> x9 + -1) + ("tail" -> ("B",(1,x9 + -1)))) else Map(1 -> Map() + (x9 -> "undefined"((1,x9)) + ("head" -> x9 + -1) + ("tail" -> (A,1)))) }
x104 * x8_B(100)((1,100))("head") + x8_B(100)((1,100))("head") * -1 + if (x104 * x8_B(100)((1,100))("tail") + x104 * (B,(1,100)) * -1 + x8_B(100)((1,100))("tail") * -1 + (B,(1,100)) + (B,(1,100)) == "&i") x104 * x8_B(100)((1,100))("head") * -1 + x8_B(100)((1,100))("head") + "undefined" else {
  if (x104 * x8_B(100)((1,100))("tail") + x104 * (B,(1,100)) * -1 + x8_B(100)((1,100))("tail") * -1 + (B,(1,100)) + (B,(1,100)) == "&z") x104 * x8_B(100)((1,100))("head") * -1 + x8_B(100)((1,100))("head") + "undefined" else {
    if (x104 * x8_B(100)((1,100))("tail") + x104 * (B,(1,100)) * -1 + x8_B(100)((1,100))("tail") * -1 + (B,(1,100)) + (B,(1,100)) == "B") x8_B(100)("head") + x104 * x8_B(100)((1,100))("head") * -1 + x8_B(100)((1,100))("head") else {
      if (x104 * x8_B(100)((1,100))("tail") + x104 * (B,(1,100)) * -1 + x8_B(100)((1,100))("tail") * -1 + (B,(1,100)) + (B,(1,100)) == "&y") x104 * x8_B(100)((1,100))("head") * -1 + x8_B(100)((1,100))("head") + "undefined" else {
        if (x104 * x8_B(100)((1,100))("tail") + x104 * (B,(1,100)) * -1 + x8_B(100)((1,100))("tail") * -1 + (B,(1,100)) + (B,(1,100)) == "&s") x104 * x8_B(100)((1,100))("head") * -1 + x8_B(100)((1,100))("head") + "undefined" else {
          if (x104 * x8_B(100)((1,100))("tail") + x104 * (B,(1,100)) * -1 + x8_B(100)((1,100))("tail") * -1 + (B,(1,100)) + (B,(1,100)) == "&x") x104 * x8_B(100)((1,100))("head") * -1 + x8_B(100)((1,100))("head") + "undefined" else "undefined"("head") + x104 * x8_B(100)((1,100))("head") * -1 + x8_B(100)((1,100))("head")
        }
      }
    }
  }
}
poly: List()
giving up: deriv List(); recursive fun x103_&s_val
val x230 = x103_&s_val(x116)
val x231 = if (x210) x230 else 0
val x232 = x103_&s_val(x104)
val x233 = if (x210) x232 else 0
Set(("val",(x231,x233)))
val x234 = Map("val" -> x231)
val x235 = Map("val" -> x233)
lub_x103_&y(x98,x98,x98)
lub_x103_B(x99,x99,x99)
lub_x103_&z(x5,x5,x5)
lub_x103_&i(x100,x148,x173)
lub_x103_&i_val(100,x145,x172)
val x236 = x104 * 100
val x237 = x107 + -200
val x238 = x236 + x237
val x239 = x216 + x238
val x240 = -200 + "undefined"
val x241 = x107 + x240
val x242 = x236 + x241
val x243 = x216 + x242
val x244 = x165 + x239
val x245 = x166 + x239
val x246 = if (x153) x243 else x245
val x247 = if (x155) x243 else x246
val x248 = if (x157) x243 else x247
val x249 = if (x159) x244 else x248
val x250 = if (x161) x243 else x249
val x251 = if (x163) x243 else x250
val x8_B = { x9 => if (0 < x9) x8_B(x9 + -1) + ((1,x9) -> x8_B(x9 + -1)((1,x9)) + ("head" -> x9 + -1) + ("tail" -> ("B",(1,x9 + -1)))) else Map(1 -> Map() + (x9 -> "undefined"((1,x9)) + ("head" -> x9 + -1) + ("tail" -> (A,1)))) }
x104 * x8_B(100)((1,100))("head") + x104 * -100 + x8_B(100)((1,100))("head") * -1 + 200
val x8_B = { x9 => if (0 < x9) x8_B(x9 + -1) + ((1,x9) -> x8_B(x9 + -1)((1,x9)) + ("head" -> x9 + -1) + ("tail" -> ("B",(1,x9 + -1)))) else Map(1 -> Map() + (x9 -> "undefined"((1,x9)) + ("head" -> x9 + -1) + ("tail" -> (A,1)))) }
if (x104 * x8_B(100)((1,100))("tail") + x104 * (B,(1,100)) * -1 + x8_B(100)((1,100))("tail") * -1 + (B,(1,100)) + (B,(1,100)) == "&i") "undefined" else {
  if (x104 * x8_B(100)((1,100))("tail") + x104 * (B,(1,100)) * -1 + x8_B(100)((1,100))("tail") * -1 + (B,(1,100)) + (B,(1,100)) == "&z") "undefined" else {
    if (x104 * x8_B(100)((1,100))("tail") + x104 * (B,(1,100)) * -1 + x8_B(100)((1,100))("tail") * -1 + (B,(1,100)) + (B,(1,100)) == "B") x8_B(100)("head") else {
      if (x104 * x8_B(100)((1,100))("tail") + x104 * (B,(1,100)) * -1 + x8_B(100)((1,100))("tail") * -1 + (B,(1,100)) + (B,(1,100)) == "&y") "undefined" else {
        if (x104 * x8_B(100)((1,100))("tail") + x104 * (B,(1,100)) * -1 + x8_B(100)((1,100))("tail") * -1 + (B,(1,100)) + (B,(1,100)) == "&s") "undefined" else {
          if (x104 * x8_B(100)((1,100))("tail") + x104 * (B,(1,100)) * -1 + x8_B(100)((1,100))("tail") * -1 + (B,(1,100)) + (B,(1,100)) == "&x") "undefined" else "undefined"("head")
        }
      }
    }
  }
}
val x8_B = { x9 => if (0 < x9) x8_B(x9 + -1) + ((1,x9) -> x8_B(x9 + -1)((1,x9)) + ("head" -> x9 + -1) + ("tail" -> ("B",(1,x9 + -1)))) else Map(1 -> Map() + (x9 -> "undefined"((1,x9)) + ("head" -> x9 + -1) + ("tail" -> (A,1)))) }
if (x104 * x8_B(100)((1,100))("tail") + x104 * (B,(1,100)) * -1 + x8_B(100)((1,100))("tail") * -1 + (B,(1,100)) + (B,(1,100)) == "&i") x104 * x8_B(100)((1,100))("head") * -1 + x104 * 100 + x8_B(100)((1,100))("head") + -200 + "undefined" else {
  if (x104 * x8_B(100)((1,100))("tail") + x104 * (B,(1,100)) * -1 + x8_B(100)((1,100))("tail") * -1 + (B,(1,100)) + (B,(1,100)) == "&z") x104 * x8_B(100)((1,100))("head") * -1 + x104 * 100 + x8_B(100)((1,100))("head") + -200 + "undefined" else {
    if (x104 * x8_B(100)((1,100))("tail") + x104 * (B,(1,100)) * -1 + x8_B(100)((1,100))("tail") * -1 + (B,(1,100)) + (B,(1,100)) == "B") x8_B(100)("head") + x104 * x8_B(100)((1,100))("head") * -1 + x104 * 100 + x8_B(100)((1,100))("head") + -200 else {
      if (x104 * x8_B(100)((1,100))("tail") + x104 * (B,(1,100)) * -1 + x8_B(100)((1,100))("tail") * -1 + (B,(1,100)) + (B,(1,100)) == "&y") x104 * x8_B(100)((1,100))("head") * -1 + x104 * 100 + x8_B(100)((1,100))("head") + -200 + "undefined" else {
        if (x104 * x8_B(100)((1,100))("tail") + x104 * (B,(1,100)) * -1 + x8_B(100)((1,100))("tail") * -1 + (B,(1,100)) + (B,(1,100)) == "&s") x104 * x8_B(100)((1,100))("head") * -1 + x104 * 100 + x8_B(100)((1,100))("head") + -200 + "undefined" else {
          if (x104 * x8_B(100)((1,100))("tail") + x104 * (B,(1,100)) * -1 + x8_B(100)((1,100))("tail") * -1 + (B,(1,100)) + (B,(1,100)) == "&x") x104 * x8_B(100)((1,100))("head") * -1 + x104 * 100 + x8_B(100)((1,100))("head") + -200 + "undefined" else "undefined"("head") + x104 * x8_B(100)((1,100))("head") * -1 + x104 * 100 + x8_B(100)((1,100))("head") + -200
        }
      }
    }
  }
}
poly: List()
giving up: deriv List(); recursive fun x103_&i_val
val x252 = x103_&i_val(x116)
val x253 = if (x210) x252 else 100
val x254 = x103_&i_val(x104)
val x255 = if (x210) x254 else 100
Set(("val",(x253,x255)))
val x256 = Map("val" -> x253)
val x257 = Map("val" -> x255)
Set(("&z",(x5,x5)), ("&s",(x234,x235)), ("B",(x99,x99)), ("&x",(x214,x215)), ("&y",(x98,x98)), ("&i",(x256,x257)))
val x258 = Map("&x" -> x214, "&s" -> x234, "&y" -> x98, "B" -> x99, "&z" -> x5, "&i" -> x256)
val x259 = Map("&x" -> x215, "&s" -> x235, "&y" -> x98, "B" -> x99, "&z" -> x5, "&i" -> x257)
lub(x102, x190) = x258
starting spec loop with x258
val x260 = x209 != (A,1)
val x261 = if (x210) x260 else 1
val x262 = x209 == "&x"
val x263 = if (x262) x214 else "undefined"
val x264 = x209 == "&s"
val x265 = if (x264) x234 else x263
val x266 = x209 == "&y"
val x267 = if (x266) x98 else x265
val x268 = x209 == "B"
val x269 = if (x268) x99 else x267
val x270 = x209 == "&z"
val x271 = if (x270) x5 else x269
val x272 = x209 == "&i"
val x273 = if (x272) x256 else x271
val x274 = Map("val" -> x252)
val x275 = Map("val" -> x230)
val x276 = Map("val" -> x209)
val x277 = if (x262) x276 else "undefined"
val x278 = if (x264) x275 else x277
val x279 = if (x266) x98 else x278
val x280 = if (x268) x99 else x279
val x281 = if (x270) x5 else x280
val x282 = if (x272) x274 else x281
val x283 = if (x210) x282 else x106
val x284 = if (x262) "undefined" else x166
val x285 = if (x264) "undefined" else x284
val x286 = if (x266) "undefined" else x285
val x287 = if (x268) x165 else x286
val x288 = if (x270) "undefined" else x287
val x289 = if (x272) "undefined" else x288
val x290 = if (x210) x289 else x107
val x291 = Map("val" -> x290)
val x292 = Map("&x" -> x214, "&s" -> x234, "&y" -> x98, "B" -> x99, "&z" -> x5, "&i" -> x291)
val x293 = if (x210) "undefined" else x107
val x294 = Map("val" -> x293)
val x295 = if (x272) x294 else x271
val x296 = if (x272) x175 else x281
val x297 = if (x210) x296 else x106
val x298 = if (x262) "undefined" else x178
val x299 = if (x264) "undefined" else x298
val x300 = if (x266) "undefined" else x299
val x301 = if (x268) x177 else x300
val x302 = if (x270) "undefined" else x301
val x303 = if (x272) "undefined" else x302
val x304 = if (x210) x303 else x110
val x305 = Map("val" -> x304)
val x306 = Map("&x" -> x305, "&s" -> x234, "&y" -> x98, "B" -> x99, "&z" -> x5, "&i" -> x291)
val x307 = x230 + x290
val x308 = x230 + x289
val x309 = if (x210) x308 else x107
val x310 = Map("val" -> x309)
val x311 = Map("&x" -> x305, "&s" -> x310, "&y" -> x98, "B" -> x99, "&z" -> x5, "&i" -> x291)
lub(x102, x311) = ?
lub_x103(x102,x258,x311)
lub_x103_&x(x98,x214,x305)
lub_x103_&x_val((B,(1,100)),x211,x304)
val x312 = x209 * -1
val x313 = if (x210) x312 else x114
val x314 = x312 + "undefined"
val x315 = x114 + "undefined"
val x316 = if (x210) x314 else x315
val x317 = x177 + x313
val x318 = x178 + x313
val x319 = if (x262) x316 else x318
val x320 = if (x264) x316 else x319
val x321 = if (x266) x316 else x320
val x322 = if (x268) x317 else x321
val x323 = if (x270) x316 else x322
val x324 = if (x272) x316 else x323
val x325 = x110 + x313
val x326 = x177 + x312
val x327 = x178 + x312
val x328 = if (x262) x314 else x327
val x329 = if (x264) x314 else x328
val x330 = if (x266) x314 else x329
val x331 = if (x268) x326 else x330
val x332 = if (x270) x314 else x331
val x333 = if (x272) x314 else x332
val x334 = if (x210) x333 else x115
if (0 < x104) x103_&x_val(x104 + -1) else (B,(1,100))
val x8_B = { x9 => if (0 < x9) x8_B(x9 + -1) + ((1,x9) -> x8_B(x9 + -1)((1,x9)) + ("head" -> x9 + -1) + ("tail" -> ("B",(1,x9 + -1)))) else Map(1 -> Map() + (x9 -> "undefined"((1,x9)) + ("head" -> x9 + -1) + ("tail" -> (A,1)))) }
if (0 < x104) {
  if (x103_&x_val(x104 + -1) == "&i") "undefined" else {
    if (x103_&x_val(x104 + -1) == "&z") "undefined" else {
      if (x103_&x_val(x104 + -1) == "B") x8_B(100)("tail") else {
        if (x103_&x_val(x104 + -1) == "&y") "undefined" else {
          if (x103_&x_val(x104 + -1) == "&s") "undefined" else {
            if (x103_&x_val(x104 + -1) == "&x") "undefined" else "undefined"("tail")
          }
        }
      }
    }
  }
} else x8_B(100)((1,100))("tail")
val x8_B = { x9 => if (0 < x9) x8_B(x9 + -1) + ((1,x9) -> x8_B(x9 + -1)((1,x9)) + ("head" -> x9 + -1) + ("tail" -> ("B",(1,x9 + -1)))) else Map(1 -> Map() + (x9 -> "undefined"((1,x9)) + ("head" -> x9 + -1) + ("tail" -> (A,1)))) }
if (0 < x104) {
  if (x103_&x_val(x104 + -1) == "&i") x103_&x_val(x104 + -1) * -1 + "undefined" else {
    if (x103_&x_val(x104 + -1) == "&z") x103_&x_val(x104 + -1) * -1 + "undefined" else {
      if (x103_&x_val(x104 + -1) == "B") x8_B(100)("tail") + x103_&x_val(x104 + -1) * -1 else {
        if (x103_&x_val(x104 + -1) == "&y") x103_&x_val(x104 + -1) * -1 + "undefined" else {
          if (x103_&x_val(x104 + -1) == "&s") x103_&x_val(x104 + -1) * -1 + "undefined" else {
            if (x103_&x_val(x104 + -1) == "&x") x103_&x_val(x104 + -1) * -1 + "undefined" else "undefined"("tail") + x103_&x_val(x104 + -1) * -1
          }
        }
      }
    }
  }
} else x8_B(100)((1,100))("tail") + (B,(1,100)) * -1
poly: List()
giving up: deriv List(); recursive fun x103_&x_val
Set(("val",(x211,x213)))
lub_x103_&s(x1,x234,x310)
lub_x103_&s_val(0,x231,x309)
val x335 = x230 * -1
val x336 = if (x210) x335 else 0
val x337 = x335 + "undefined"
val x338 = if (x210) x337 else "undefined"
val x339 = x165 + x336
val x340 = x166 + x336
val x341 = if (x262) x338 else x340
val x342 = if (x264) x338 else x341
val x343 = if (x266) x338 else x342
val x344 = if (x268) x339 else x343
val x345 = if (x270) x338 else x344
val x346 = if (x272) x338 else x345
val x347 = x230 + x346
val x348 = x107 + x336
val x349 = x165 + x335
val x350 = x166 + x335
val x351 = if (x262) x337 else x350
val x352 = if (x264) x337 else x351
val x353 = if (x266) x337 else x352
val x354 = if (x268) x349 else x353
val x355 = if (x270) x337 else x354
val x356 = if (x272) x337 else x355
val x357 = x230 + x356
val x358 = if (x210) x357 else x107
if (0 < x104) x103_&s_val(x104 + -1) else 0
val x8_B = { x9 => if (0 < x9) x8_B(x9 + -1) + ((1,x9) -> x8_B(x9 + -1)((1,x9)) + ("head" -> x9 + -1) + ("tail" -> ("B",(1,x9 + -1)))) else Map(1 -> Map() + (x9 -> "undefined"((1,x9)) + ("head" -> x9 + -1) + ("tail" -> (A,1)))) }
if (0 < x104) x103_&s_val(x104 + -1) + if (x103_&x_val(x104 + -1) == "&i") "undefined" else {
  if (x103_&x_val(x104 + -1) == "&z") "undefined" else {
    if (x103_&x_val(x104 + -1) == "B") x8_B(100)("head") else {
      if (x103_&x_val(x104 + -1) == "&y") "undefined" else {
        if (x103_&x_val(x104 + -1) == "&s") "undefined" else {
          if (x103_&x_val(x104 + -1) == "&x") "undefined" else "undefined"("head")
        }
      }
    }
  }
} else x8_B(100)((1,100))("head")
val x8_B = { x9 => if (0 < x9) x8_B(x9 + -1) + ((1,x9) -> x8_B(x9 + -1)((1,x9)) + ("head" -> x9 + -1) + ("tail" -> ("B",(1,x9 + -1)))) else Map(1 -> Map() + (x9 -> "undefined"((1,x9)) + ("head" -> x9 + -1) + ("tail" -> (A,1)))) }
if (0 < x104) x103_&s_val(x104 + -1) + if (x103_&x_val(x104 + -1) == "&i") x103_&s_val(x104 + -1) * -1 + "undefined" else {
  if (x103_&x_val(x104 + -1) == "&z") x103_&s_val(x104 + -1) * -1 + "undefined" else {
    if (x103_&x_val(x104 + -1) == "B") x8_B(100)("head") + x103_&s_val(x104 + -1) * -1 else {
      if (x103_&x_val(x104 + -1) == "&y") x103_&s_val(x104 + -1) * -1 + "undefined" else {
        if (x103_&x_val(x104 + -1) == "&s") x103_&s_val(x104 + -1) * -1 + "undefined" else {
          if (x103_&x_val(x104 + -1) == "&x") x103_&s_val(x104 + -1) * -1 + "undefined" else "undefined"("head") + x103_&s_val(x104 + -1) * -1
        }
      }
    }
  }
} else x8_B(100)((1,100))("head")
poly: List()
giving up: deriv List(); recursive fun x103_&s_val
Set(("val",(x231,x233)))
lub_x103_&y(x98,x98,x98)
lub_x103_B(x99,x99,x99)
lub_x103_&z(x5,x5,x5)
lub_x103_&i(x100,x256,x291)
lub_x103_&i_val(100,x253,x290)
val x359 = x252 * -1
val x360 = if (x210) x359 else -100
val x361 = x359 + "undefined"
val x362 = -100 + "undefined"
val x363 = if (x210) x361 else x362
val x364 = x165 + x360
val x365 = x166 + x360
val x366 = if (x262) x363 else x365
val x367 = if (x264) x363 else x366
val x368 = if (x266) x363 else x367
val x369 = if (x268) x364 else x368
val x370 = if (x270) x363 else x369
val x371 = if (x272) x363 else x370
val x372 = x107 + x360
val x373 = x165 + x359
val x374 = x166 + x359
val x375 = if (x262) x361 else x374
val x376 = if (x264) x361 else x375
val x377 = if (x266) x361 else x376
val x378 = if (x268) x373 else x377
val x379 = if (x270) x361 else x378
val x380 = if (x272) x361 else x379
val x381 = if (x210) x380 else x137
if (0 < x104) x103_&i_val(x104 + -1) else 100
val x8_B = { x9 => if (0 < x9) x8_B(x9 + -1) + ((1,x9) -> x8_B(x9 + -1)((1,x9)) + ("head" -> x9 + -1) + ("tail" -> ("B",(1,x9 + -1)))) else Map(1 -> Map() + (x9 -> "undefined"((1,x9)) + ("head" -> x9 + -1) + ("tail" -> (A,1)))) }
if (0 < x104) {
  if (x103_&x_val(x104 + -1) == "&i") "undefined" else {
    if (x103_&x_val(x104 + -1) == "&z") "undefined" else {
      if (x103_&x_val(x104 + -1) == "B") x8_B(100)("head") else {
        if (x103_&x_val(x104 + -1) == "&y") "undefined" else {
          if (x103_&x_val(x104 + -1) == "&s") "undefined" else {
            if (x103_&x_val(x104 + -1) == "&x") "undefined" else "undefined"("head")
          }
        }
      }
    }
  }
} else x8_B(100)((1,100))("head")
val x8_B = { x9 => if (0 < x9) x8_B(x9 + -1) + ((1,x9) -> x8_B(x9 + -1)((1,x9)) + ("head" -> x9 + -1) + ("tail" -> ("B",(1,x9 + -1)))) else Map(1 -> Map() + (x9 -> "undefined"((1,x9)) + ("head" -> x9 + -1) + ("tail" -> (A,1)))) }
if (0 < x104) {
  if (x103_&x_val(x104 + -1) == "&i") x103_&i_val(x104 + -1) * -1 + "undefined" else {
    if (x103_&x_val(x104 + -1) == "&z") x103_&i_val(x104 + -1) * -1 + "undefined" else {
      if (x103_&x_val(x104 + -1) == "B") x8_B(100)("head") + x103_&i_val(x104 + -1) * -1 else {
        if (x103_&x_val(x104 + -1) == "&y") x103_&i_val(x104 + -1) * -1 + "undefined" else {
          if (x103_&x_val(x104 + -1) == "&s") x103_&i_val(x104 + -1) * -1 + "undefined" else {
            if (x103_&x_val(x104 + -1) == "&x") x103_&i_val(x104 + -1) * -1 + "undefined" else "undefined"("head") + x103_&i_val(x104 + -1) * -1
          }
        }
      }
    }
  }
} else x8_B(100)((1,100))("head") + -100
poly: List()
giving up: deriv List(); recursive fun x103_&i_val
Set(("val",(x253,x255)))
Set(("&z",(x5,x5)), ("&s",(x234,x235)), ("B",(x99,x99)), ("&x",(x214,x215)), ("&y",(x98,x98)), ("&i",(x256,x257)))
lub(x102, x311) = x258
val x103_&x_val = { x104 => x304 }
val x382 = Map("val" -> x212)
val x103_&s_val = { x104 => x309 }
val x383 = Map("val" -> x232)
val x103_&i_val = { x104 => x290 }
val x384 = Map("&x" -> x382, "&s" -> x383, "&y" -> x98, "B" -> x99, "&z" -> x5, "&i" -> x291)
val x103 = { x104 => x384 }
val x385 = fixindex(x104 => x260)
fixindex: x385
val x386 = x103_&x_val(x385)
val x387 = Map("val" -> x386)
val x388 = x103_&s_val(x385)
val x389 = Map("val" -> x388)
val x390 = 0 < x385
val x391 = x385 + -1
val x392 = x103_&x_val(x391)
val x393 = x392 == "&i"
val x394 = x392 == "&z"
val x395 = x392 == "B"
val x396 = x392 == "&y"
val x397 = x392 == "&s"
val x398 = x392 == "&x"
val x399 = if (x398) "undefined" else x166
val x400 = if (x397) "undefined" else x399
val x401 = if (x396) "undefined" else x400
val x402 = if (x395) x165 else x401
val x403 = if (x394) "undefined" else x402
val x404 = if (x393) "undefined" else x403
val x405 = if (x390) x404 else x107
val x406 = Map("val" -> x405)
val x407 = Map("&x" -> x387, "&s" -> x389, "&y" -> x98, "B" -> x99, "&z" -> x5, "&i" -> x406)
val x408 = x386 != (A,1)
*** after loop x407 ***
res: ()
store: x407
transformed: x407
sched:
val x178 = "undefined"("tail")
val x29 = x9 + -1
val x10 = (1,x9)
val x17 = "undefined"(x10)
val x60 = x17 + ("head" -> x29)
val x73 = x60 + ("tail" -> (A,1))
val x0 = Map()
val x79 = x0 + (x9 -> x73)
val x80 = Map(1 -> x79)
val x30 = (1,x29)
val x31 = ("B",x30)
val x32 = 0 < x9
val x44 = x8_B(x29)
val x57 = x44(x10)
val x59 = x57 + ("head" -> x29)
val x72 = x59 + ("tail" -> x31)
val x78 = x44 + (x10 -> x72)
val x81 = if (x32) x78 else x80
val x8_B = { x9 => x81 }
val x99 = x8_B(100)
val x177 = x99("tail")
val x210 = 0 < x104
val x106 = x99((1,100))
val x110 = x106("tail")
val x116 = x104 + -1
val x272 = x209 == "&i"
val x270 = x209 == "&z"
val x268 = x209 == "B"
val x266 = x209 == "&y"
val x264 = x209 == "&s"
val x262 = x209 == "&x"
val x298 = if (x262) "undefined" else x178
val x299 = if (x264) "undefined" else x298
val x300 = if (x266) "undefined" else x299
val x301 = if (x268) x177 else x300
val x302 = if (x270) "undefined" else x301
val x303 = if (x272) "undefined" else x302
val x304 = if (x210) x303 else x110
val x103_&x_val = { x104 => x304 }
val x209 = x103_&x_val(x116)
val x260 = x209 != (A,1)
val x385 = fixindex(x104 => x260)
val x391 = x385 + -1
val x392 = x103_&x_val(x391)
val x398 = x392 == "&x"
val x166 = "undefined"("head")
val x399 = if (x398) "undefined" else x166
val x397 = x392 == "&s"
val x400 = if (x397) "undefined" else x399
val x396 = x392 == "&y"
val x401 = if (x396) "undefined" else x400
val x395 = x392 == "B"
val x165 = x99("head")
val x402 = if (x395) x165 else x401
val x394 = x392 == "&z"
val x403 = if (x394) "undefined" else x402
val x393 = x392 == "&i"
val x404 = if (x393) "undefined" else x403
val x390 = 0 < x385
val x107 = x106("head")
val x405 = if (x390) x404 else x107
val x406 = Map("val" -> x405)
val x284 = if (x262) "undefined" else x166
val x285 = if (x264) "undefined" else x284
val x286 = if (x266) "undefined" else x285
val x287 = if (x268) x165 else x286
val x288 = if (x270) "undefined" else x287
val x289 = if (x272) "undefined" else x288
val x230 = x103_&s_val(x116)
val x308 = x230 + x289
val x309 = if (x210) x308 else x107
val x103_&s_val = { x104 => x309 }
val x388 = x103_&s_val(x385)
val x389 = Map("val" -> x388)
val x386 = x103_&x_val(x385)
val x387 = Map("val" -> x386)
val x98 = Map("val" -> (B,(1,100)))
val x5 = Map("val" -> (A,1))
val x407 = Map("&x" -> x387, "&s" -> x389, "&y" -> x98, "B" -> x99, "&z" -> x5, "&i" -> x406)
term:
val x8_B = { x9 => if (0 < x9) x8_B(x9 + -1) + ((1,x9) -> x8_B(x9 + -1)((1,x9)) + ("head" -> x9 + -1) + ("tail" -> ("B",(1,x9 + -1)))) else Map(1 -> Map() + (x9 -> "undefined"((1,x9)) + ("head" -> x9 + -1) + ("tail" -> (A,1)))) }
val x103_&x_val = { x104 => if (0 < x104) {
  if (x103_&x_val(x104 + -1) == "&i") "undefined" else {
    if (x103_&x_val(x104 + -1) == "&z") "undefined" else {
      if (x103_&x_val(x104 + -1) == "B") x8_B(100)("tail") else {
        if (x103_&x_val(x104 + -1) == "&y") "undefined" else {
          if (x103_&x_val(x104 + -1) == "&s") "undefined" else {
            if (x103_&x_val(x104 + -1) == "&x") "undefined" else "undefined"("tail")
          }
        }
      }
    }
  }
} else x8_B(100)((1,100))("tail") }
val x103_&s_val = { x104 => if (0 < x104) x103_&s_val(x104 + -1) + if (x103_&x_val(x104 + -1) == "&i") "undefined" else {
  if (x103_&x_val(x104 + -1) == "&z") "undefined" else {
    if (x103_&x_val(x104 + -1) == "B") x8_B(100)("head") else {
      if (x103_&x_val(x104 + -1) == "&y") "undefined" else {
        if (x103_&x_val(x104 + -1) == "&s") "undefined" else {
          if (x103_&x_val(x104 + -1) == "&x") "undefined" else "undefined"("head")
        }
      }
    }
  }
} else x8_B(100)((1,100))("head") }
Map("&i" -> Map("val" -> if (0 < fixindex(x104 => x103_&x_val(x104 + -1) != (A,1))) {
  if (x103_&x_val(fixindex(x104 => x103_&x_val(x104 + -1) != (A,1)) + -1) == "&i") "undefined" else {
    if (x103_&x_val(fixindex(x104 => x103_&x_val(x104 + -1) != (A,1)) + -1) == "&z") "undefined" else {
      if (x103_&x_val(fixindex(x104 => x103_&x_val(x104 + -1) != (A,1)) + -1) == "B") x8_B(100)("head") else {
        if (x103_&x_val(fixindex(x104 => x103_&x_val(x104 + -1) != (A,1)) + -1) == "&y") "undefined" else {
          if (x103_&x_val(fixindex(x104 => x103_&x_val(x104 + -1) != (A,1)) + -1) == "&s") "undefined" else {
            if (x103_&x_val(fixindex(x104 => x103_&x_val(x104 + -1) != (A,1)) + -1) == "&x") "undefined" else "undefined"("head")
          }
        }
      }
    }
  }
} else x8_B(100)((1,100))("head")), "B" -> x8_B(100), "&s" -> Map("val" -> x103_&s_val(fixindex(x104 => x103_&x_val(x104 + -1) != (A,1)))), "&x" -> Map("val" -> x103_&x_val(fixindex(x104 => x103_&x_val(x104 + -1) != (A,1)))), "&z" -> Map("val" -> (A,1)), "&y" -> Map("val" -> (B,(1,100))))
----
