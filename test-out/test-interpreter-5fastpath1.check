// constants: <function1>,lancet.interpreter.TestInterpreter5$Decompiler@50c466bc,HotSpotMethod<TestInterpreter5$$anonfun$testFastpath1$1$$anonfun$3.apply>,Array(CONST_0, x0),HotSpotMethod<BytecodeInterpreter_Exec.execute>,HotSpotMethod<TestInterpreter5$$anonfun$testFastpath1$1$$anonfun$3.apply$mcII$sp>,<function0>,HotSpotMethod<TestInterpreter5$$anonfun$testFastpath1$1.lancet$interpreter$TestInterpreter5$$anonfun$$compute$3>
class Generated0(CONST_0: lancet.interpreter.TestInterpreter5$$anonfun$testFastpath1$1$$anonfun$3,CONST_1: lancet.interpreter.TestInterpreter5#Decompiler,CONST_2: com.oracle.graal.hotspot.meta.HotSpotResolvedJavaMethod,CONST_3: Array[lancet.core.Base_LIR$Rep],CONST_4: com.oracle.graal.hotspot.meta.HotSpotResolvedJavaMethod,CONST_5: com.oracle.graal.hotspot.meta.HotSpotResolvedJavaMethod,CONST_6: lancet.interpreter.TestInterpreter5$$anonfun$testFastpath1$1,CONST_7: com.oracle.graal.hotspot.meta.HotSpotResolvedJavaMethod) extends (Int=>Int){
import sun.misc.Unsafe
val unsafe = { val fld = classOf[Unsafe].getDeclaredField("theUnsafe"); fld.setAccessible(true); fld.get(classOf[Unsafe]).asInstanceOf[Unsafe]; }
type char = Char
def WARN = assert(false, "WARN")
def ERROR = assert(false, "ERROR")
def apply(ARG: Int): Int = { object BODY {
  var RES = null.asInstanceOf[Int]
  val x0 = ARG
  val x1 = x0.asInstanceOf[Int]
  // WARNING: multiple returns (2) in HotSpotMethod<TestInterpreter5$$anonfun$testFastpath1$1$$anonfun$3.apply$mcII$sp>
  ;{
    var vPHI_2_5 = null.asInstanceOf[Int]
    var vx0 = null.asInstanceOf[Int]
    var vx1 = null.asInstanceOf[Int]
    var vx3 = null.asInstanceOf[Boolean]
    ;{
      val PHI_3_5 = 0 // LUBC(PHI_3_5:Int,0:Int)
      BLOCK_2(PHI_3_5,x0,x1)
    }
    def BLOCK_2(PHI_3_5:Int,x0:Int,x1:Int): Unit = {
      val x3 = x1 <= PHI_3_5
      if (x3) {
        // return 4_0 to 5:<TestInterpreter5$$anonfun$testFastpath1$1$$anonfun$3.apply><(I)I> // 0:<BytecodeInterpreter_Exec.execute><(Ljava/lang/reflect/Method;[Ljava/lang/Object;)Ljava/lang/Object;>
        /*R_1_4_0;*/;{
          val PHI_2_5 = PHI_3_5 // LUBC(x10:Int,PHI_3_5:Int)
          vPHI_2_5 = PHI_2_5
          vx0 = x0
          vx1 = x1
          vx3 = x3
        };
      } else {
        // WARNING: multiple returns (2) in HotSpotMethod<TestInterpreter5$$anonfun$testFastpath1$1.lancet$interpreter$TestInterpreter5$$anonfun$$compute$3>
        val x4 = 50 != PHI_3_5
        if (x4) {
          // return 2_0 to 19:<TestInterpreter5$$anonfun$testFastpath1$1$$anonfun$3.apply$mcII$sp><(I)I> // 5:<TestInterpreter5$$anonfun$testFastpath1$1$$anonfun$3.apply><(I)I> // 0:<BytecodeInterpreter_Exec.execute><(Ljava/lang/reflect/Method;[Ljava/lang/Object;)Ljava/lang/Object;>
          val x11 = 1 + PHI_3_5
          ;{
            val PHI_3_5 = x11 // LUBC(PHI_3_5:Int,x11:Int)
            BLOCK_2(PHI_3_5,x0,x1)
          }
        } else {
          val x5 = CONST_1.mkCompilerFrame(Array[Object](null.asInstanceOf[AnyRef],null.asInstanceOf[AnyRef],null.asInstanceOf[AnyRef],CONST_1.asInstanceOf[AnyRef],CONST_2.asInstanceOf[AnyRef],CONST_3.asInstanceOf[AnyRef],null.asInstanceOf[AnyRef],null.asInstanceOf[AnyRef],null.asInstanceOf[AnyRef],null.asInstanceOf[AnyRef],null.asInstanceOf[AnyRef],null.asInstanceOf[AnyRef]), -1, 6, CONST_4, null)
          val x6 = CONST_1.mkCompilerFrame(Array[Object](null.asInstanceOf[AnyRef],null.asInstanceOf[AnyRef],null.asInstanceOf[AnyRef],CONST_0.asInstanceOf[AnyRef],x1.asInstanceOf[AnyRef],null.asInstanceOf[AnyRef],null.asInstanceOf[AnyRef]), 5, 5, CONST_2, x5)
          val x7 = CONST_1.mkCompilerFrame(Array[Object](null.asInstanceOf[AnyRef],null.asInstanceOf[AnyRef],null.asInstanceOf[AnyRef],CONST_0.asInstanceOf[AnyRef],x1.asInstanceOf[AnyRef],PHI_3_5.asInstanceOf[AnyRef],null.asInstanceOf[AnyRef],null.asInstanceOf[AnyRef],null.asInstanceOf[AnyRef]), 19, 6, CONST_5, x6)
          val x8 = CONST_1.mkCompilerFrame(Array[Object](null.asInstanceOf[AnyRef],null.asInstanceOf[AnyRef],null.asInstanceOf[AnyRef],CONST_6.asInstanceOf[AnyRef],PHI_3_5.asInstanceOf[AnyRef],CONST_1.asInstanceOf[AnyRef],null.asInstanceOf[AnyRef],null.asInstanceOf[AnyRef]), 12, 6, CONST_7, x7)
          val x9 = CONST_1.execCompiler(x8).asInstanceOf[Int] // drop into freshly compiled
          // old parent: 7:<TestInterpreter5$$anonfun$testFastpath1$1.lancet$interpreter$TestInterpreter5$$anonfun$$compute$3><(ILlancet/interpreter/TestInterpreter5$Decompiler;)V> // 19:<TestInterpreter5$$anonfun$testFastpath1$1$$anonfun$3.apply$mcII$sp><(I)I> // 5:<TestInterpreter5$$anonfun$testFastpath1$1$$anonfun$3.apply><(I)I> // 0:<BytecodeInterpreter_Exec.execute><(Ljava/lang/reflect/Method;[Ljava/lang/Object;)Ljava/lang/Object;>
          // new parent: 5:<TestInterpreter5$$anonfun$testFastpath1$1$$anonfun$3.apply><(I)I> // 0:<BytecodeInterpreter_Exec.execute><(Ljava/lang/reflect/Method;[Ljava/lang/Object;)Ljava/lang/Object;>
          val x10 = x9.asInstanceOf[Int]
          // return 1_0 to 5:<TestInterpreter5$$anonfun$testFastpath1$1$$anonfun$3.apply><(I)I> // 0:<BytecodeInterpreter_Exec.execute><(Ljava/lang/reflect/Method;[Ljava/lang/Object;)Ljava/lang/Object;>
          // return 2_0 to 5:<TestInterpreter5$$anonfun$testFastpath1$1$$anonfun$3.apply><(I)I> // 0:<BytecodeInterpreter_Exec.execute><(Ljava/lang/reflect/Method;[Ljava/lang/Object;)Ljava/lang/Object;>
          /*R_1_2_0;*/;{
            val PHI_2_5 = x10 // LUBC(PHI_3_5:Int,x10:Int)
            vPHI_2_5 = PHI_2_5
            vx0 = x0
            vx1 = x1
            vx3 = x3
          };
        }
      }
    }
    ;{
      // ret multi HotSpotMethod<TestInterpreter5$$anonfun$testFastpath1$1$$anonfun$3.apply$mcII$sp>
      val PHI_2_5 = vPHI_2_5
      val x0 = vx0
      val x1 = vx1
      val x3 = vx3
      (RES = PHI_2_5) // return to root
  }}
  // (no return?)
}; BODY.RES }
}

compilation: ok
-- start compiling
frame:
HotSpotMethod<TestInterpreter5$$anonfun$testFastpath1$1.lancet$interpreter$TestInterpreter5$$anonfun$$compute$3>
CONST_6,50,CONST_1,null,null
HotSpotMethod<TestInterpreter5$$anonfun$testFastpath1$1$$anonfun$3.apply$mcII$sp>
CONST_0,100,50,null,null,null
HotSpotMethod<TestInterpreter5$$anonfun$testFastpath1$1$$anonfun$3.apply>
CONST_0,100,null,null
HotSpotMethod<BytecodeInterpreter_Exec.execute>
CONST_1,CONST_2,CONST_3,null,null,null,null,null,null
root:
HotSpotMethod<BytecodeInterpreter_Exec.execute>
CONST_1,CONST_2,CONST_3,null,null,null,null,null,null
// constants: <function1>,lancet.interpreter.TestInterpreter5$Decompiler@50c466bc,HotSpotMethod<TestInterpreter5$$anonfun$testFastpath1$1$$anonfun$3.apply>,Array(CONST_0, x0),HotSpotMethod<BytecodeInterpreter_Exec.execute>,HotSpotMethod<TestInterpreter5$$anonfun$testFastpath1$1$$anonfun$3.apply$mcII$sp>,<function0>,HotSpotMethod<TestInterpreter5$$anonfun$testFastpath1$1.lancet$interpreter$TestInterpreter5$$anonfun$$compute$3>
class Generated1(CONST_0: lancet.interpreter.TestInterpreter5$$anonfun$testFastpath1$1$$anonfun$3,CONST_1: lancet.interpreter.TestInterpreter5#Decompiler,CONST_2: com.oracle.graal.hotspot.meta.HotSpotResolvedJavaMethod,CONST_3: Array[lancet.core.Base_LIR$Rep],CONST_4: com.oracle.graal.hotspot.meta.HotSpotResolvedJavaMethod,CONST_5: com.oracle.graal.hotspot.meta.HotSpotResolvedJavaMethod,CONST_6: lancet.interpreter.TestInterpreter5$$anonfun$testFastpath1$1,CONST_7: com.oracle.graal.hotspot.meta.HotSpotResolvedJavaMethod) extends (Unit=>Int){
import sun.misc.Unsafe
val unsafe = { val fld = classOf[Unsafe].getDeclaredField("theUnsafe"); fld.setAccessible(true); fld.get(classOf[Unsafe]).asInstanceOf[Unsafe]; }
type char = Char
def WARN = assert(false, "WARN")
def ERROR = assert(false, "ERROR")
def apply(ARG: Unit): Int = { object BODY {
  var RES = null.asInstanceOf[Int]
  ARG
  // need to fix block ordering for bci=12
  // old: B0[0->3],B1[6->7],B2[12->12]
  // new: B2[12->12]
  // fixed: B0[12->12]
  // return 0_0 to 19:<TestInterpreter5$$anonfun$testFastpath1$1$$anonfun$3.apply$mcII$sp><(I)I> // 5:<TestInterpreter5$$anonfun$testFastpath1$1$$anonfun$3.apply><(I)I> // -1:<BytecodeInterpreter_Exec.execute><(Ljava/lang/reflect/Method;[Ljava/lang/Object;)Ljava/lang/Object;>
  // ret single HotSpotMethod<TestInterpreter5$$anonfun$testFastpath1$1.lancet$interpreter$TestInterpreter5$$anonfun$$compute$3>
  // need to fix block ordering for bci=19
  // old: B0[0->1],B1[2->4 L],B2[7->16],B3[19->27],B4[30->31]
  // new: B3[19->27],B1[2->4 L],B2[7->16],B4[30->31]
  // fixed: B0[19->27],B1[2->4 L],B2[7->16],B3[30->31]
  // WARNING: multiple returns (2) in HotSpotMethod<TestInterpreter5$$anonfun$testFastpath1$1$$anonfun$3.apply$mcII$sp>
  ;{
    var vPHI_2_5 = null.asInstanceOf[Int]
    var vx12 = null.asInstanceOf[Int]
    var vx13 = null.asInstanceOf[Boolean]
    // should not inline start block 0
    ;{
      val PHI_3_5 = 50 // LUBC(PHI_3_5:Int,50:Int)
      val PHI_3_6 = null // LUBC(PHI_3_6:scala.runtime.Null$,null:scala.runtime.Null$)
      val PHI_3_7 = null // LUBC(PHI_3_7:scala.runtime.Null$,null:scala.runtime.Null$)
      val PHI_3_8 = null // LUBC(PHI_3_8:scala.runtime.Null$,null:scala.runtime.Null$)
      BLOCK_11(PHI_3_5,PHI_3_6,PHI_3_7,PHI_3_8)
    }
    def BLOCK_11(PHI_3_5:Int,PHI_3_6:scala.runtime.Null$,PHI_3_7:scala.runtime.Null$,PHI_3_8:scala.runtime.Null$): Unit = {
      val x12 = 1 + PHI_3_5
      val x13 = 100 <= x12
      if (x13) {
        // return 3_0 to 5:<TestInterpreter5$$anonfun$testFastpath1$1$$anonfun$3.apply><(I)I> // -1:<BytecodeInterpreter_Exec.execute><(Ljava/lang/reflect/Method;[Ljava/lang/Object;)Ljava/lang/Object;>
        /*R_11_3_0;*/;{
          val PHI_2_5 = x12 // LUBC(x20:Int,x12:Int)
          vPHI_2_5 = PHI_2_5
          vx12 = x12
          vx13 = x13
        };
      } else {
        // WARNING: multiple returns (2) in HotSpotMethod<TestInterpreter5$$anonfun$testFastpath1$1.lancet$interpreter$TestInterpreter5$$anonfun$$compute$3>
        val x14 = 50 != x12
        if (x14) {
          // return 2_0 to 19:<TestInterpreter5$$anonfun$testFastpath1$1$$anonfun$3.apply$mcII$sp><(I)I> // 5:<TestInterpreter5$$anonfun$testFastpath1$1$$anonfun$3.apply><(I)I> // -1:<BytecodeInterpreter_Exec.execute><(Ljava/lang/reflect/Method;[Ljava/lang/Object;)Ljava/lang/Object;>
          ;{
            val PHI_3_5 = x12 // LUBC(PHI_3_5:Int,x12:Int)
            val PHI_3_6 = null.asInstanceOf[scala.runtime.Null$] // LUBC(PHI_3_6,null)
            val PHI_3_7 = null.asInstanceOf[scala.runtime.Null$] // LUBC(PHI_3_7,null)
            val PHI_3_8 = null.asInstanceOf[scala.runtime.Null$] // LUBC(PHI_3_8,null)
            BLOCK_11(PHI_3_5,PHI_3_6,PHI_3_7,PHI_3_8)
          }
        } else {
          val x15 = CONST_1.mkCompilerFrame(Array[Object](null.asInstanceOf[AnyRef],null.asInstanceOf[AnyRef],null.asInstanceOf[AnyRef],CONST_1.asInstanceOf[AnyRef],CONST_2.asInstanceOf[AnyRef],CONST_3.asInstanceOf[AnyRef],null.asInstanceOf[AnyRef],null.asInstanceOf[AnyRef],null.asInstanceOf[AnyRef],null.asInstanceOf[AnyRef],null.asInstanceOf[AnyRef],null.asInstanceOf[AnyRef]), -1, 6, CONST_4, null)
          val x16 = CONST_1.mkCompilerFrame(Array[Object](null.asInstanceOf[AnyRef],null.asInstanceOf[AnyRef],null.asInstanceOf[AnyRef],CONST_0.asInstanceOf[AnyRef],100.asInstanceOf[AnyRef],null.asInstanceOf[AnyRef],null.asInstanceOf[AnyRef]), 5, 5, CONST_2, x15)
          val x17 = CONST_1.mkCompilerFrame(Array[Object](null.asInstanceOf[AnyRef],null.asInstanceOf[AnyRef],null.asInstanceOf[AnyRef],CONST_0.asInstanceOf[AnyRef],100.asInstanceOf[AnyRef],x12.asInstanceOf[AnyRef],null.asInstanceOf[AnyRef],null.asInstanceOf[AnyRef],null.asInstanceOf[AnyRef]), 19, 6, CONST_5, x16)
          val x18 = CONST_1.mkCompilerFrame(Array[Object](null.asInstanceOf[AnyRef],null.asInstanceOf[AnyRef],null.asInstanceOf[AnyRef],CONST_6.asInstanceOf[AnyRef],x12.asInstanceOf[AnyRef],CONST_1.asInstanceOf[AnyRef],null.asInstanceOf[AnyRef],null.asInstanceOf[AnyRef]), 12, 6, CONST_7, x17)
          val x19 = CONST_1.execCompiler(x18).asInstanceOf[Int] // drop into freshly compiled
          // old parent: 7:<TestInterpreter5$$anonfun$testFastpath1$1.lancet$interpreter$TestInterpreter5$$anonfun$$compute$3><(ILlancet/interpreter/TestInterpreter5$Decompiler;)V> // 19:<TestInterpreter5$$anonfun$testFastpath1$1$$anonfun$3.apply$mcII$sp><(I)I> // 5:<TestInterpreter5$$anonfun$testFastpath1$1$$anonfun$3.apply><(I)I> // -1:<BytecodeInterpreter_Exec.execute><(Ljava/lang/reflect/Method;[Ljava/lang/Object;)Ljava/lang/Object;>
          // new parent: 5:<TestInterpreter5$$anonfun$testFastpath1$1$$anonfun$3.apply><(I)I> // -1:<BytecodeInterpreter_Exec.execute><(Ljava/lang/reflect/Method;[Ljava/lang/Object;)Ljava/lang/Object;>
          val x20 = x19.asInstanceOf[Int]
          // return 1_0 to 5:<TestInterpreter5$$anonfun$testFastpath1$1$$anonfun$3.apply><(I)I> // -1:<BytecodeInterpreter_Exec.execute><(Ljava/lang/reflect/Method;[Ljava/lang/Object;)Ljava/lang/Object;>
          // return 2_0 to 5:<TestInterpreter5$$anonfun$testFastpath1$1$$anonfun$3.apply><(I)I> // -1:<BytecodeInterpreter_Exec.execute><(Ljava/lang/reflect/Method;[Ljava/lang/Object;)Ljava/lang/Object;>
          /*R_11_2_0;*/;{
            val PHI_2_5 = x20 // LUBC(x12:Int,x20:Int)
            vPHI_2_5 = PHI_2_5
            vx12 = x12
            vx13 = x13
          };
        }
      }
    }
    ;{
      // ret multi HotSpotMethod<TestInterpreter5$$anonfun$testFastpath1$1$$anonfun$3.apply$mcII$sp>
      val PHI_2_5 = vPHI_2_5
      val x12 = vx12
      val x13 = vx13
      // need to fix block ordering for bci=5
      // old: B0[0->2],B1[5->5]
      // new: B1[5->5]
      // fixed: B0[5->5]
      (RES = PHI_2_5) // return to root
      // (no return?)
  }}
  val x21 = {println("BOO!");666} // recompiled result -- never seen; not assigned to RES
}; BODY.RES }
}

<stdin>:10: warning: a pure expression does nothing in statement position; you may be omitting necessary parentheses
  ARG
  ^
one warning found
compilation: ok
-- compiled
BOO!
result: 100
100
