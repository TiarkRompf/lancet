prog: {
  Assign(i,Const(0))
  Assign(y,Const(0))
  Assign(x,Const(8))
  While(Less(Ref(i),Const(100)),{
    Assign(x,Const(7))
    Assign(x,Plus(Ref(x),Const(1)))
    Assign(y,Plus(Ref(y),Const(1)))
    Assign(i,Plus(Ref(i),Const(1)))
  })
}
val x0 = Map("val" -> 0)
val x1 = Map("&i" -> x0)
val x2 = Map("&i" -> x0, "&y" -> x0)
val x3 = Map("val" -> 8)
val x4 = Map("&i" -> x0, "&y" -> x0, "&x" -> x3)
val x7 = (1,x6)
val x8 = 0 < x6
val x9 = x6 + -1
val x10 = x5(x9)
val x11 = if (x8) x10 else x4
val x12 = x10("&i")
val x13 = if (x8) x12 else x0
val x14 = x12("val")
val x15 = if (x8) x14 else 0
val x16 = x14 < 100
val x17 = if (x8) x16 else 1
val x18 = Map("val" -> 7)
val x19 = x10 + ("&x" -> x18)
val x20 = Map("&i" -> x0, "&y" -> x0, "&x" -> x18)
val x21 = if (x8) x19 else x20
val x22 = x19 + ("&x" -> x3)
val x23 = if (x8) x22 else x4
val x24 = x10("&y")
val x25 = if (x8) x24 else x0
val x26 = x24("val")
val x27 = if (x8) x26 else 0
val x28 = x26 + 1
val x29 = if (x8) x28 else 1
val x30 = Map("val" -> x29)
val x31 = x22 + ("&y" -> x30)
val x32 = Map("&i" -> x0, "&y" -> x30, "&x" -> x3)
val x33 = Map("val" -> x28)
val x34 = x22 + ("&y" -> x33)
val x35 = Map("val" -> 1)
val x36 = Map("&i" -> x0, "&y" -> x35, "&x" -> x3)
val x37 = if (x8) x34 else x36
val x38 = x14 + 1
val x39 = if (x8) x38 else 1
val x40 = Map("val" -> x39)
val x41 = x34 + ("&i" -> x40)
val x42 = Map("&i" -> x40, "&y" -> x35, "&x" -> x3)
val x43 = Map("val" -> x38)
val x44 = x34 + ("&i" -> x43)
val x45 = Map("&i" -> x35, "&y" -> x35, "&x" -> x3)
val x46 = if (x8) x44 else x45
val x47 = if (x8) x44 else x4
val x5 = { x6 => x47 }
val x48 = fixindex(x6 => x16)
val x49 = x5(x48)
val x50 = x49("&i")
val x51 = x50("val")
val x52 = x51 < 100
res: ()
store: x49
*** begin iterate: x49
funs:
val x5 = { x6 => x47 }
calls:
val x10 = x5(x9)
val x49 = x5(x48)
subst: Map(x6 -> 0)
val x53 = (1,0)
val x54 = x5(-1)
val x55 = x54("&i")
val x56 = x55("val")
val x57 = x56 < 100
val x58 = x54 + ("&x" -> x18)
val x59 = x58 + ("&x" -> x3)
val x60 = x54("&y")
val x61 = x60("val")
val x62 = x61 + 1
val x63 = x59 + ("&y" -> x35)
val x64 = Map("val" -> x62)
val x65 = x59 + ("&y" -> x64)
val x66 = x56 + 1
val x67 = x65 + ("&i" -> x35)
val x68 = Map("val" -> x66)
val x69 = x65 + ("&i" -> x68)
val x70 = fixindex(x6 => x57)
val x71 = x5(x70)
val x72 = x71("&i")
val x73 = x72("val")
val x74 = x73 < 100
zeros: Map(x5 -> x4)
val x75 = x5_&i(x9)
val x76 = x5_&y(x9)
val x77 = x5_&x(x9)
val x78 = Map("&i" -> x75, "&y" -> x76, "&x" -> x77)
val x79 = x5_&i(x48)
val x80 = x5_&y(x48)
val x81 = x5_&x(x48)
val x82 = Map("&i" -> x79, "&y" -> x80, "&x" -> x81)
xform: Map(x10 -> x78, x49 -> x82)
val x83 = if (x8) x75 else x0
val x84 = if (x8) x76 else x0
val x85 = if (x8) x77 else x3
val x86 = Map("&i" -> x83, "&y" -> x84, "&x" -> x85)
val x87 = x75("val")
val x88 = if (x8) x87 else 0
val x89 = x87 < 100
val x90 = if (x8) x89 else 1
val x91 = Map("&i" -> x75, "&y" -> x76, "&x" -> x18)
val x92 = Map("&i" -> x83, "&y" -> x84, "&x" -> x18)
val x93 = Map("&i" -> x75, "&y" -> x76, "&x" -> x3)
val x94 = Map("&i" -> x83, "&y" -> x84, "&x" -> x3)
val x95 = x76("val")
val x96 = if (x8) x95 else 0
val x97 = x95 + 1
val x98 = if (x8) x97 else 1
val x99 = Map("val" -> x98)
val x100 = Map("&i" -> x75, "&y" -> x99, "&x" -> x3)
val x101 = Map("&i" -> x0, "&y" -> x99, "&x" -> x3)
val x102 = Map("val" -> x97)
val x103 = Map("&i" -> x75, "&y" -> x102, "&x" -> x3)
val x104 = Map("&i" -> x83, "&y" -> x99, "&x" -> x3)
val x105 = x87 + 1
val x106 = if (x8) x105 else 1
val x107 = Map("val" -> x106)
val x108 = Map("&i" -> x107, "&y" -> x102, "&x" -> x3)
val x109 = Map("&i" -> x107, "&y" -> x35, "&x" -> x3)
val x110 = Map("val" -> x105)
val x111 = Map("&i" -> x110, "&y" -> x102, "&x" -> x3)
val x112 = Map("&i" -> x107, "&y" -> x99, "&x" -> x3)
val x113 = if (x8) x105 else 0
val x114 = Map("val" -> x113)
val x115 = if (x8) x97 else 0
val x116 = Map("val" -> x115)
val x117 = Map("&i" -> x114, "&y" -> x116, "&x" -> x3)
val x118 = fixindex(x6 => x89)
val x119 = x5(x118)
val x120 = x119("&i")
val x121 = x120("val")
val x122 = x121 < 100
val x123 = x5_&i(x118)
val x124 = x5_&y(x118)
val x125 = x5_&x(x118)
val x126 = Map("&i" -> x123, "&y" -> x124, "&x" -> x125)
val x5_&i = { x6 => x114 }
val x5_&y = { x6 => x116 }
val x5_&x = { x6 => x3 }
*** done iterate: x119
*** begin iterate: x119
funs:
val x5 = { x6 => x47 }
val x5_&i = { x6 => x114 }
calls:
val x10 = x5(x9)
val x75 = x5_&i(x9)
val x119 = x5(x118)
subst: Map(x6 -> 0)
val x127 = x5_&i(-1)
val x128 = x5_&y(-1)
val x129 = Map("&i" -> x127, "&y" -> x128, "&x" -> x3)
val x130 = x5_&i(x70)
val x131 = x5_&y(x70)
val x132 = Map("&i" -> x130, "&y" -> x131, "&x" -> x3)
val x133 = x127("val")
val x134 = x133 < 100
val x135 = Map("&i" -> x127, "&y" -> x128, "&x" -> x18)
val x136 = x128("val")
val x137 = x136 + 1
val x138 = Map("&i" -> x127, "&y" -> x35, "&x" -> x3)
val x139 = Map("val" -> x137)
val x140 = Map("&i" -> x127, "&y" -> x139, "&x" -> x3)
val x141 = x133 + 1
val x142 = Map("&i" -> x35, "&y" -> x139, "&x" -> x3)
val x143 = Map("val" -> x141)
val x144 = Map("&i" -> x143, "&y" -> x139, "&x" -> x3)
val x145 = fixindex(x6 => x134)
val x146 = x5(x145)
val x147 = x146("&i")
val x148 = x147("val")
val x149 = x148 < 100
val x150 = x5_&i(x145)
val x151 = x5_&y(x145)
val x152 = Map("&i" -> x150, "&y" -> x151, "&x" -> x3)
zeros: Map(x5 -> x4, x5_&i -> x0)
val x153 = x5_&i_val(x9)
val x154 = Map("val" -> x153)
val x155 = Map("&i" -> x123, "&y" -> x124, "&x" -> x3)
xform: Map(x10 -> x93, x75 -> x154, x119 -> x155)
val x156 = Map("&i" -> x154, "&y" -> x76, "&x" -> x3)
val x157 = if (x8) x153 else 0
val x158 = Map("val" -> x157)
val x159 = Map("&i" -> x158, "&y" -> x84, "&x" -> x3)
val x160 = x153 < 100
val x161 = if (x8) x160 else 1
val x162 = Map("&i" -> x154, "&y" -> x76, "&x" -> x18)
val x163 = Map("&i" -> x158, "&y" -> x84, "&x" -> x18)
val x164 = Map("&i" -> x154, "&y" -> x99, "&x" -> x3)
val x165 = Map("&i" -> x154, "&y" -> x102, "&x" -> x3)
val x166 = Map("&i" -> x158, "&y" -> x99, "&x" -> x3)
val x167 = x153 + 1
val x168 = if (x8) x167 else 1
val x169 = Map("val" -> x168)
val x170 = Map("&i" -> x169, "&y" -> x102, "&x" -> x3)
val x171 = Map("&i" -> x169, "&y" -> x35, "&x" -> x3)
val x172 = Map("val" -> x167)
val x173 = Map("&i" -> x172, "&y" -> x102, "&x" -> x3)
val x174 = Map("&i" -> x169, "&y" -> x99, "&x" -> x3)
val x175 = if (x8) x167 else 0
val x176 = Map("val" -> x175)
val x177 = Map("&i" -> x176, "&y" -> x116, "&x" -> x3)
val x178 = fixindex(x6 => x160)
val x179 = x5(x178)
val x180 = x179("&i")
val x181 = x180("val")
val x182 = x181 < 100
val x183 = x5_&i(x178)
val x184 = x5_&y(x178)
val x185 = Map("&i" -> x183, "&y" -> x184, "&x" -> x3)
invariant stride 1
result = 0 + x6 * 1
val x186 = if (x8) x6 else 0
val x5_&i_val = { x6 => x186 }
*** done iterate: x179
*** begin iterate: x179
funs:
val x5 = { x6 => x47 }
val x5_&i_val = { x6 => x186 }
calls:
val x10 = x5(x9)
val x153 = x5_&i_val(x9)
val x179 = x5(x178)
subst: Map(x6 -> 0)
val x187 = Map("&i" -> x0, "&y" -> x128, "&x" -> x3)
val x188 = Map("&i" -> x0, "&y" -> x128, "&x" -> x18)
val x189 = Map("&i" -> x0, "&y" -> x139, "&x" -> x3)
val x190 = fixindex(x6 => 1)
val x191 = x5(x190)
val x192 = x191("&i")
val x193 = x192("val")
val x194 = x193 < 100
val x195 = x5_&i(x190)
val x196 = x5_&y(x190)
val x197 = Map("&i" -> x195, "&y" -> x196, "&x" -> x3)
zeros: Map(x5 -> x4, x5_&i_val -> 0)
xform: Map(x10 -> x93, x179 -> x185)
val x198 = 1 < x6
val x199 = if (x8) x9 else 0
val x200 = Map("val" -> x199)
val x201 = Map("&i" -> x200, "&y" -> x76, "&x" -> x3)
val x202 = Map("&i" -> x200, "&y" -> x84, "&x" -> x3)
val x203 = x6 < 101
val x204 = Map("&i" -> x200, "&y" -> x76, "&x" -> x18)
val x205 = Map("&i" -> x200, "&y" -> x84, "&x" -> x18)
val x206 = Map("&i" -> x200, "&y" -> x99, "&x" -> x3)
val x207 = Map("&i" -> x200, "&y" -> x102, "&x" -> x3)
val x208 = if (x8) x6 else 1
val x209 = Map("val" -> x208)
val x210 = Map("&i" -> x209, "&y" -> x102, "&x" -> x3)
val x211 = Map("&i" -> x209, "&y" -> x35, "&x" -> x3)
val x212 = Map("&i" -> x209, "&y" -> x99, "&x" -> x3)
val x213 = Map("val" -> x186)
val x214 = Map("&i" -> x213, "&y" -> x116, "&x" -> x3)
val x215 = x5(100)
val x216 = x215("&i")
val x217 = x216("val")
val x218 = x217 < 100
val x219 = x5_&i(100)
val x220 = x5_&y(100)
val x221 = Map("&i" -> x219, "&y" -> x220, "&x" -> x3)
*** done iterate: x215
*** begin iterate: x215
funs:
val x5 = { x6 => x47 }
calls:
val x10 = x5(x9)
val x215 = x5(100)
subst: Map(x6 -> 0)
zeros: Map(x5 -> x4)
xform: Map(x10 -> x93, x215 -> x221)
val x222 = x219("val")
val x223 = x222 < 100
*** done iterate: x221
*** begin iterate: x221
funs:
val x5_&i = { x6 => x114 }
val x5_&y = { x6 => x116 }
calls:
val x75 = x5_&i(x9)
val x219 = x5_&i(100)
val x76 = x5_&y(x9)
val x220 = x5_&y(100)
subst: Map(x6 -> 0)
zeros: Map(x5_&i -> x0, x5_&y -> x0)
val x224 = Map("val" -> 100)
val x225 = x5_&y_val(x9)
val x226 = Map("val" -> x225)
val x227 = x5_&y_val(100)
val x228 = Map("val" -> x227)
xform: Map(x75 -> x200, x219 -> x224, x76 -> x226, x220 -> x228)
val x229 = Map("&i" -> x200, "&y" -> x226, "&x" -> x3)
val x230 = Map("&i" -> x79, "&y" -> x80, "&x" -> x3)
val x231 = if (x8) x225 else 0
val x232 = Map("val" -> x231)
val x233 = Map("&i" -> x200, "&y" -> x232, "&x" -> x3)
val x234 = Map("&i" -> x200, "&y" -> x226, "&x" -> x18)
val x235 = Map("&i" -> x200, "&y" -> x232, "&x" -> x18)
val x236 = x225 + 1
val x237 = if (x8) x236 else 1
val x238 = Map("val" -> x237)
val x239 = Map("&i" -> x200, "&y" -> x238, "&x" -> x3)
val x240 = Map("&i" -> x0, "&y" -> x238, "&x" -> x3)
val x241 = Map("val" -> x236)
val x242 = Map("&i" -> x200, "&y" -> x241, "&x" -> x3)
val x243 = Map("&i" -> x209, "&y" -> x241, "&x" -> x3)
val x244 = Map("&i" -> x209, "&y" -> x238, "&x" -> x3)
val x245 = if (x8) x236 else 0
val x246 = Map("val" -> x245)
val x247 = Map("&i" -> x213, "&y" -> x246, "&x" -> x3)
val x248 = Map("&i" -> x224, "&y" -> x228, "&x" -> x3)
invariant stride 1
result = 0 + x6 * 1
val x5_&y_val = { x6 => x186 }
*** done iterate: x248
*** begin iterate: x248
funs:
val x5_&y_val = { x6 => x186 }
calls:
val x227 = x5_&y_val(100)
subst: Map(x6 -> 0)
val x249 = Map("&i" -> x224, "&y" -> x224, "&x" -> x3)
zeros: Map(x5_&y_val -> 0)
xform: Map()
val x250 = Map("&i" -> x200, "&y" -> x200, "&x" -> x3)
val x251 = Map("&i" -> x200, "&y" -> x200, "&x" -> x18)
val x252 = Map("&i" -> x200, "&y" -> x209, "&x" -> x3)
val x253 = Map("&i" -> x0, "&y" -> x209, "&x" -> x3)
val x254 = Map("&i" -> x209, "&y" -> x209, "&x" -> x3)
val x255 = Map("&i" -> x213, "&y" -> x213, "&x" -> x3)
*** done iterate: x249
*** begin iterate: x249
funs:
calls:
subst: Map()
zeros: Map()
xform: Map()
*** done iterate: x249
transformed: x249
sched:
val x3 = Map("val" -> 8)
val x224 = Map("val" -> 100)
val x249 = Map("&i" -> x224, "&y" -> x224, "&x" -> x3)
----
prog: {
  Assign(x,Const(900))
  Assign(y,Const(0))
  Assign(z,Const(0))
  While(Less(Const(0),Ref(x)),{
    Assign(z,Plus(Ref(z),Ref(x)))
    If(Less(Ref(y),Const(17)),{
      Assign(y,Plus(Ref(y),Const(1)))
    },{
      
    })
    Assign(x,Plus(Ref(x),Const(-1)))
  })
  Assign(r,Ref(x))
}
val x0 = Map("val" -> 900)
val x1 = Map("&x" -> x0)
val x2 = Map("val" -> 0)
val x3 = Map("&x" -> x0, "&y" -> x2)
val x4 = Map("&x" -> x0, "&y" -> x2, "&z" -> x2)
val x7 = (1,x6)
val x8 = 0 < x6
val x9 = x6 + -1
val x10 = x5(x9)
val x11 = if (x8) x10 else x4
val x12 = x10("&x")
val x13 = if (x8) x12 else x0
val x14 = x12("val")
val x15 = if (x8) x14 else 900
val x16 = 0 < x14
val x17 = if (x8) x16 else 1
val x18 = x10("&z")
val x19 = if (x8) x18 else x2
val x20 = x18("val")
val x21 = if (x8) x20 else 0
val x22 = x20 + x15
val x23 = x20 + x14
val x24 = if (x8) x23 else 900
val x25 = Map("val" -> x24)
val x26 = x10 + ("&z" -> x25)
val x27 = Map("&x" -> x0, "&y" -> x2, "&z" -> x25)
val x28 = Map("val" -> x23)
val x29 = x10 + ("&z" -> x28)
val x30 = Map("&x" -> x0, "&y" -> x2, "&z" -> x0)
val x31 = if (x8) x29 else x30
val x32 = x10("&y")
val x33 = if (x8) x32 else x2
val x34 = x32("val")
val x35 = if (x8) x34 else 0
val x36 = x34 < 17
val x37 = if (x8) x36 else 1
val x38 = x34 + 1
val x39 = if (x8) x38 else 1
val x40 = Map("val" -> x39)
val x41 = x29 + ("&y" -> x40)
val x42 = Map("&x" -> x0, "&y" -> x40, "&z" -> x0)
val x43 = Map("val" -> x38)
val x44 = x29 + ("&y" -> x43)
val x45 = Map("val" -> 1)
val x46 = Map("&x" -> x0, "&y" -> x45, "&z" -> x0)
val x47 = if (x8) x44 else x46
val x48 = if (x36) x47 else x31
val x49 = if (x36) x44 else x29
val x50 = if (x8) x49 else x46
val x51 = x14 + -1
val x52 = if (x8) x51 else 899
val x53 = Map("val" -> x52)
val x54 = x44 + ("&x" -> x53)
val x55 = x29 + ("&x" -> x53)
val x56 = if (x36) x54 else x55
val x57 = Map("&x" -> x53, "&y" -> x45, "&z" -> x0)
val x58 = Map("val" -> x51)
val x59 = x44 + ("&x" -> x58)
val x60 = x29 + ("&x" -> x58)
val x61 = if (x36) x59 else x60
val x62 = Map("val" -> 899)
val x63 = Map("&x" -> x62, "&y" -> x45, "&z" -> x0)
val x64 = if (x8) x61 else x63
val x65 = if (x8) x61 else x4
val x5 = { x6 => x65 }
val x66 = fixindex(x6 => x16)
val x67 = x5(x66)
val x68 = x67("&x")
val x69 = x68("val")
val x70 = 0 < x69
val x71 = Map("val" -> x69)
val x72 = x67 + ("&r" -> x71)
res: ()
store: x72
*** begin iterate: x72
funs:
val x5 = { x6 => x65 }
calls:
val x10 = x5(x9)
val x67 = x5(x66)
subst: Map(x6 -> 0)
val x73 = (1,0)
val x74 = x5(-1)
val x75 = x74("&x")
val x76 = x75("val")
val x77 = 0 < x76
val x78 = x74("&z")
val x79 = x78("val")
val x80 = x79 + 900
val x81 = x79 + x76
val x82 = x74 + ("&z" -> x0)
val x83 = Map("val" -> x81)
val x84 = x74 + ("&z" -> x83)
val x85 = x74("&y")
val x86 = x85("val")
val x87 = x86 < 17
val x88 = x86 + 1
val x89 = x84 + ("&y" -> x45)
val x90 = Map("val" -> x88)
val x91 = x84 + ("&y" -> x90)
val x92 = if (x87) 1 else 0
val x93 = Map("val" -> x92)
val x94 = Map("&x" -> x0, "&y" -> x93, "&z" -> x0)
val x95 = if (x87) x91 else x84
val x96 = x76 + -1
val x97 = x91 + ("&x" -> x62)
val x98 = x84 + ("&x" -> x62)
val x99 = if (x87) x97 else x98
val x100 = Map("val" -> x96)
val x101 = x91 + ("&x" -> x100)
val x102 = x84 + ("&x" -> x100)
val x103 = if (x87) x101 else x102
val x104 = fixindex(x6 => x77)
val x105 = x5(x104)
val x106 = x105("&x")
val x107 = x106("val")
val x108 = 0 < x107
val x109 = Map("val" -> x107)
val x110 = x105 + ("&r" -> x109)
zeros: Map(x5 -> x4)
val x111 = x5_&x(x9)
val x112 = x5_&y(x9)
val x113 = x5_&z(x9)
val x114 = Map("&x" -> x111, "&y" -> x112, "&z" -> x113)
val x115 = x5_&x(x66)
val x116 = x5_&y(x66)
val x117 = x5_&z(x66)
val x118 = Map("&x" -> x115, "&y" -> x116, "&z" -> x117)
xform: Map(x10 -> x114, x67 -> x118)
val x119 = if (x8) x111 else x0
val x120 = if (x8) x112 else x2
val x121 = if (x8) x113 else x2
val x122 = Map("&x" -> x119, "&y" -> x120, "&z" -> x121)
val x123 = x111("val")
val x124 = if (x8) x123 else 900
val x125 = 0 < x123
val x126 = if (x8) x125 else 1
val x127 = x113("val")
val x128 = if (x8) x127 else 0
val x129 = x127 + x124
val x130 = x127 + x123
val x131 = if (x8) x130 else 900
val x132 = Map("val" -> x131)
val x133 = Map("&x" -> x111, "&y" -> x112, "&z" -> x132)
val x134 = Map("&x" -> x0, "&y" -> x2, "&z" -> x132)
val x135 = Map("val" -> x130)
val x136 = Map("&x" -> x111, "&y" -> x112, "&z" -> x135)
val x137 = Map("&x" -> x119, "&y" -> x120, "&z" -> x132)
val x138 = x112("val")
val x139 = if (x8) x138 else 0
val x140 = x138 < 17
val x141 = if (x8) x140 else 1
val x142 = x138 + 1
val x143 = if (x8) x142 else 1
val x144 = Map("val" -> x143)
val x145 = Map("&x" -> x111, "&y" -> x144, "&z" -> x135)
val x146 = Map("&x" -> x0, "&y" -> x144, "&z" -> x0)
val x147 = Map("val" -> x142)
val x148 = Map("&x" -> x111, "&y" -> x147, "&z" -> x135)
val x149 = Map("&x" -> x119, "&y" -> x144, "&z" -> x132)
val x150 = if (x140) x144 else x120
val x151 = Map("&x" -> x119, "&y" -> x150, "&z" -> x132)
val x152 = if (x140) x147 else x112
val x153 = Map("&x" -> x111, "&y" -> x152, "&z" -> x135)
val x154 = if (x8) x152 else x45
val x155 = Map("&x" -> x119, "&y" -> x154, "&z" -> x132)
val x156 = x123 + -1
val x157 = if (x8) x156 else 899
val x158 = Map("val" -> x157)
val x159 = Map("&x" -> x158, "&y" -> x147, "&z" -> x135)
val x160 = Map("&x" -> x158, "&y" -> x112, "&z" -> x135)
val x161 = Map("&x" -> x158, "&y" -> x152, "&z" -> x135)
val x162 = Map("&x" -> x158, "&y" -> x45, "&z" -> x0)
val x163 = Map("val" -> x156)
val x164 = Map("&x" -> x163, "&y" -> x147, "&z" -> x135)
val x165 = Map("&x" -> x163, "&y" -> x112, "&z" -> x135)
val x166 = Map("&x" -> x163, "&y" -> x152, "&z" -> x135)
val x167 = Map("&x" -> x158, "&y" -> x154, "&z" -> x132)
val x168 = if (x8) x156 else 900
val x169 = Map("val" -> x168)
val x170 = if (x8) x152 else x2
val x171 = if (x8) x130 else 0
val x172 = Map("val" -> x171)
val x173 = Map("&x" -> x169, "&y" -> x170, "&z" -> x172)
val x174 = fixindex(x6 => x125)
val x175 = x5(x174)
val x176 = x175("&x")
val x177 = x176("val")
val x178 = 0 < x177
val x179 = Map("val" -> x177)
val x180 = x175 + ("&r" -> x179)
val x181 = x5_&x(x174)
val x182 = x5_&y(x174)
val x183 = x5_&z(x174)
val x184 = Map("&x" -> x181, "&y" -> x182, "&z" -> x183)
val x5_&x = { x6 => x169 }
val x5_&y = { x6 => x170 }
val x5_&z = { x6 => x172 }
*** done iterate: x180
*** begin iterate: x180
funs:
val x5 = { x6 => x65 }
val x5_&x = { x6 => x169 }
calls:
val x10 = x5(x9)
val x111 = x5_&x(x9)
val x175 = x5(x174)
subst: Map(x6 -> 0)
val x185 = x5_&x(-1)
val x186 = x5_&y(-1)
val x187 = x5_&z(-1)
val x188 = Map("&x" -> x185, "&y" -> x186, "&z" -> x187)
val x189 = x5_&x(x104)
val x190 = x5_&y(x104)
val x191 = x5_&z(x104)
val x192 = Map("&x" -> x189, "&y" -> x190, "&z" -> x191)
val x193 = x185("val")
val x194 = 0 < x193
val x195 = x187("val")
val x196 = x195 + 900
val x197 = x195 + x193
val x198 = Map("&x" -> x185, "&y" -> x186, "&z" -> x0)
val x199 = Map("val" -> x197)
val x200 = Map("&x" -> x185, "&y" -> x186, "&z" -> x199)
val x201 = x186("val")
val x202 = x201 < 17
val x203 = x201 + 1
val x204 = Map("&x" -> x185, "&y" -> x45, "&z" -> x199)
val x205 = Map("val" -> x203)
val x206 = Map("&x" -> x185, "&y" -> x205, "&z" -> x199)
val x207 = if (x202) 1 else 0
val x208 = Map("val" -> x207)
val x209 = Map("&x" -> x0, "&y" -> x208, "&z" -> x0)
val x210 = if (x202) x205 else x186
val x211 = Map("&x" -> x185, "&y" -> x210, "&z" -> x199)
val x212 = x193 + -1
val x213 = Map("&x" -> x62, "&y" -> x205, "&z" -> x199)
val x214 = Map("&x" -> x62, "&y" -> x186, "&z" -> x199)
val x215 = Map("&x" -> x62, "&y" -> x210, "&z" -> x199)
val x216 = Map("val" -> x212)
val x217 = Map("&x" -> x216, "&y" -> x205, "&z" -> x199)
val x218 = Map("&x" -> x216, "&y" -> x186, "&z" -> x199)
val x219 = Map("&x" -> x216, "&y" -> x210, "&z" -> x199)
val x220 = fixindex(x6 => x194)
val x221 = x5(x220)
val x222 = x221("&x")
val x223 = x222("val")
val x224 = 0 < x223
val x225 = Map("val" -> x223)
val x226 = x221 + ("&r" -> x225)
val x227 = x5_&x(x220)
val x228 = x5_&y(x220)
val x229 = x5_&z(x220)
val x230 = Map("&x" -> x227, "&y" -> x228, "&z" -> x229)
zeros: Map(x5 -> x4, x5_&x -> x0)
val x231 = x5_&x_val(x9)
val x232 = Map("val" -> x231)
xform: Map(x10 -> x114, x111 -> x232, x175 -> x184)
val x233 = Map("&x" -> x232, "&y" -> x112, "&z" -> x113)
val x234 = if (x8) x231 else 900
val x235 = Map("val" -> x234)
val x236 = Map("&x" -> x235, "&y" -> x120, "&z" -> x121)
val x237 = 0 < x231
val x238 = if (x8) x237 else 1
val x239 = x127 + x234
val x240 = x127 + x231
val x241 = if (x8) x240 else 900
val x242 = Map("val" -> x241)
val x243 = Map("&x" -> x232, "&y" -> x112, "&z" -> x242)
val x244 = Map("&x" -> x0, "&y" -> x2, "&z" -> x242)
val x245 = Map("val" -> x240)
val x246 = Map("&x" -> x232, "&y" -> x112, "&z" -> x245)
val x247 = Map("&x" -> x235, "&y" -> x120, "&z" -> x242)
val x248 = Map("&x" -> x232, "&y" -> x144, "&z" -> x245)
val x249 = Map("&x" -> x232, "&y" -> x147, "&z" -> x245)
val x250 = Map("&x" -> x235, "&y" -> x144, "&z" -> x242)
val x251 = Map("&x" -> x235, "&y" -> x150, "&z" -> x242)
val x252 = Map("&x" -> x232, "&y" -> x152, "&z" -> x245)
val x253 = Map("&x" -> x235, "&y" -> x154, "&z" -> x242)
val x254 = x231 + -1
val x255 = if (x8) x254 else 899
val x256 = Map("val" -> x255)
val x257 = Map("&x" -> x256, "&y" -> x147, "&z" -> x245)
val x258 = Map("&x" -> x256, "&y" -> x112, "&z" -> x245)
val x259 = Map("&x" -> x256, "&y" -> x152, "&z" -> x245)
val x260 = Map("&x" -> x256, "&y" -> x45, "&z" -> x0)
val x261 = Map("val" -> x254)
val x262 = Map("&x" -> x261, "&y" -> x147, "&z" -> x245)
val x263 = Map("&x" -> x261, "&y" -> x112, "&z" -> x245)
val x264 = Map("&x" -> x261, "&y" -> x152, "&z" -> x245)
val x265 = Map("&x" -> x256, "&y" -> x154, "&z" -> x242)
val x266 = if (x8) x254 else 900
val x267 = Map("val" -> x266)
val x268 = if (x8) x240 else 0
val x269 = Map("val" -> x268)
val x270 = Map("&x" -> x267, "&y" -> x170, "&z" -> x269)
val x271 = fixindex(x6 => x237)
val x272 = x5(x271)
val x273 = x272("&x")
val x274 = x273("val")
val x275 = 0 < x274
val x276 = Map("val" -> x274)
val x277 = x272 + ("&r" -> x276)
val x278 = x5_&x(x271)
val x279 = x5_&y(x271)
val x280 = x5_&z(x271)
val x281 = Map("&x" -> x278, "&y" -> x279, "&z" -> x280)
invariant stride -1
result = 900 + x6 * -1
val x282 = x6 * -1
val x283 = x282 + 900
val x284 = if (x8) x283 else 900
val x5_&x_val = { x6 => x284 }
*** done iterate: x277
*** begin iterate: x277
funs:
val x5 = { x6 => x65 }
val x5_&x_val = { x6 => x284 }
calls:
val x10 = x5(x9)
val x231 = x5_&x_val(x9)
val x272 = x5(x271)
subst: Map(x6 -> 0)
val x285 = Map("&x" -> x0, "&y" -> x186, "&z" -> x187)
val x286 = Map("&x" -> x0, "&y" -> x186, "&z" -> x0)
val x287 = Map("val" -> x196)
val x288 = Map("&x" -> x0, "&y" -> x186, "&z" -> x287)
val x289 = Map("&x" -> x0, "&y" -> x45, "&z" -> x287)
val x290 = Map("&x" -> x0, "&y" -> x205, "&z" -> x287)
val x291 = Map("&x" -> x0, "&y" -> x210, "&z" -> x287)
val x292 = Map("&x" -> x62, "&y" -> x205, "&z" -> x287)
val x293 = Map("&x" -> x62, "&y" -> x186, "&z" -> x287)
val x294 = Map("&x" -> x62, "&y" -> x210, "&z" -> x287)
val x295 = fixindex(x6 => 1)
val x296 = x5(x295)
val x297 = x296("&x")
val x298 = x297("val")
val x299 = 0 < x298
val x300 = Map("val" -> x298)
val x301 = x296 + ("&r" -> x300)
val x302 = x5_&x(x295)
val x303 = x5_&y(x295)
val x304 = x5_&z(x295)
val x305 = Map("&x" -> x302, "&y" -> x303, "&z" -> x304)
zeros: Map(x5 -> x4, x5_&x_val -> 900)
xform: Map(x10 -> x114, x272 -> x281)
val x306 = 1 < x6
val x307 = x282 + 1
val x308 = x282 + 901
val x309 = if (x8) x308 else 900
val x310 = Map("val" -> x309)
val x311 = Map("&x" -> x310, "&y" -> x112, "&z" -> x113)
val x312 = Map("&x" -> x310, "&y" -> x120, "&z" -> x121)
val x313 = x6 < 901
val x314 = x127 + x309
val x315 = x127 + x308
val x316 = if (x8) x315 else 900
val x317 = Map("val" -> x316)
val x318 = Map("&x" -> x310, "&y" -> x112, "&z" -> x317)
val x319 = Map("&x" -> x0, "&y" -> x2, "&z" -> x317)
val x320 = Map("val" -> x314)
val x321 = Map("&x" -> x310, "&y" -> x112, "&z" -> x320)
val x322 = Map("&x" -> x310, "&y" -> x120, "&z" -> x317)
val x323 = Map("&x" -> x310, "&y" -> x144, "&z" -> x320)
val x324 = Map("&x" -> x310, "&y" -> x147, "&z" -> x320)
val x325 = Map("&x" -> x310, "&y" -> x144, "&z" -> x317)
val x326 = Map("&x" -> x310, "&y" -> x150, "&z" -> x317)
val x327 = Map("&x" -> x310, "&y" -> x152, "&z" -> x320)
val x328 = Map("&x" -> x310, "&y" -> x154, "&z" -> x317)
val x329 = if (x8) x283 else 899
val x330 = Map("val" -> x329)
val x331 = Map("&x" -> x330, "&y" -> x147, "&z" -> x320)
val x332 = Map("&x" -> x330, "&y" -> x112, "&z" -> x320)
val x333 = Map("&x" -> x330, "&y" -> x152, "&z" -> x320)
val x334 = Map("&x" -> x330, "&y" -> x45, "&z" -> x0)
val x335 = Map("&x" -> x330, "&y" -> x154, "&z" -> x317)
val x336 = Map("val" -> x284)
val x337 = if (x8) x315 else 0
val x338 = Map("val" -> x337)
val x339 = Map("&x" -> x336, "&y" -> x170, "&z" -> x338)
val x340 = x5(900)
val x341 = x340("&x")
val x342 = x341("val")
val x343 = 0 < x342
val x344 = Map("val" -> x342)
val x345 = x340 + ("&r" -> x344)
val x346 = x5_&x(900)
val x347 = x5_&y(900)
val x348 = x5_&z(900)
val x349 = Map("&x" -> x346, "&y" -> x347, "&z" -> x348)
*** done iterate: x345
*** begin iterate: x345
funs:
val x5 = { x6 => x65 }
calls:
val x10 = x5(x9)
val x340 = x5(900)
subst: Map(x6 -> 0)
val x350 = x195 + 901
zeros: Map(x5 -> x4)
xform: Map(x10 -> x114, x340 -> x349)
val x351 = x346("val")
val x352 = 0 < x351
val x353 = Map("val" -> x351)
val x354 = Map("&x" -> x346, "&y" -> x347, "&z" -> x348, "&r" -> x353)
*** done iterate: x354
*** begin iterate: x354
funs:
val x5_&x = { x6 => x169 }
val x5_&y = { x6 => x170 }
val x5_&z = { x6 => x172 }
calls:
val x111 = x5_&x(x9)
val x346 = x5_&x(900)
val x112 = x5_&y(x9)
val x347 = x5_&y(900)
val x113 = x5_&z(x9)
val x348 = x5_&z(900)
subst: Map(x6 -> 0)
zeros: Map(x5_&x -> x0, x5_&y -> x2, x5_&z -> x2)
val x355 = x5_&y_val(x9)
val x356 = Map("val" -> x355)
val x357 = x5_&y_val(900)
val x358 = Map("val" -> x357)
val x359 = x5_&z_val(x9)
val x360 = Map("val" -> x359)
val x361 = x5_&z_val(900)
val x362 = Map("val" -> x361)
xform: Map(x346 -> x2, x113 -> x360, x112 -> x356, x348 -> x362, x111 -> x310, x347 -> x358)
val x363 = Map("&x" -> x310, "&y" -> x356, "&z" -> x360)
val x364 = if (x8) x355 else 0
val x365 = Map("val" -> x364)
val x366 = if (x8) x359 else 0
val x367 = Map("val" -> x366)
val x368 = Map("&x" -> x310, "&y" -> x365, "&z" -> x367)
val x369 = x359 + x309
val x370 = x359 + x308
val x371 = if (x8) x370 else 900
val x372 = Map("val" -> x371)
val x373 = Map("&x" -> x310, "&y" -> x356, "&z" -> x372)
val x374 = Map("&x" -> x0, "&y" -> x2, "&z" -> x372)
val x375 = Map("val" -> x369)
val x376 = Map("&x" -> x310, "&y" -> x356, "&z" -> x375)
val x377 = Map("&x" -> x310, "&y" -> x365, "&z" -> x372)
val x378 = x355 < 17
val x379 = if (x8) x378 else 1
val x380 = x355 + 1
val x381 = if (x8) x380 else 1
val x382 = Map("val" -> x381)
val x383 = Map("&x" -> x310, "&y" -> x382, "&z" -> x375)
val x384 = Map("&x" -> x0, "&y" -> x382, "&z" -> x0)
val x385 = Map("val" -> x380)
val x386 = Map("&x" -> x310, "&y" -> x385, "&z" -> x375)
val x387 = Map("&x" -> x310, "&y" -> x382, "&z" -> x372)
val x388 = if (x378) x381 else x364
val x389 = Map("val" -> x388)
val x390 = Map("&x" -> x310, "&y" -> x389, "&z" -> x372)
val x391 = if (x378) x380 else x355
val x392 = Map("val" -> x391)
val x393 = Map("&x" -> x310, "&y" -> x392, "&z" -> x375)
val x394 = if (x8) x391 else 1
val x395 = Map("val" -> x394)
val x396 = Map("&x" -> x310, "&y" -> x395, "&z" -> x372)
val x397 = Map("&x" -> x330, "&y" -> x385, "&z" -> x375)
val x398 = Map("&x" -> x330, "&y" -> x356, "&z" -> x375)
val x399 = Map("&x" -> x330, "&y" -> x392, "&z" -> x375)
val x400 = Map("&x" -> x330, "&y" -> x395, "&z" -> x372)
val x401 = if (x8) x391 else 0
val x402 = Map("val" -> x401)
val x403 = if (x8) x370 else 0
val x404 = Map("val" -> x403)
val x405 = Map("&x" -> x336, "&y" -> x402, "&z" -> x404)
val x406 = Map("&x" -> x2, "&y" -> x358, "&z" -> x362)
val x407 = Map("&x" -> x2, "&y" -> x358, "&z" -> x362, "&r" -> x2)
upper bounded result
result = 17
val x408 = x6 < 17
val x409 = if (x408) x6 else 17
val x410 = if (x8) x409 else 0
val x5_&y_val = { x6 => x410 }
summing the loop var: -x6+901
result = - x6 * (x6 + 1)/2 + x6*901
val x411 = x6 + 1
val x412 = x6 * x6
val x413 = x412 + x6
val x414 = x6 * -0.5
val x415 = x6 * x414
val x416 = x415 + x414
val x417 = x6 * 901
val x418 = x414 + x417
val x419 = x415 + x418
val x420 = if (x8) x419 else 0
val x5_&z_val = { x6 => x420 }
*** done iterate: x407
*** begin iterate: x407
funs:
val x5_&y_val = { x6 => x410 }
val x5_&z_val = { x6 => x420 }
calls:
val x357 = x5_&y_val(900)
val x361 = x5_&z_val(900)
subst: Map(x6 -> 0)
val x421 = Map("val" -> 17)
val x422 = Map("val" -> 405450)
val x423 = Map("&x" -> x62, "&y" -> x2, "&z" -> x0)
val x424 = Map("&x" -> x2, "&y" -> x421, "&z" -> x422)
val x425 = Map("&x" -> x2, "&y" -> x421, "&z" -> x422, "&r" -> x2)
zeros: Map(x5_&y_val -> 0, x5_&z_val -> 0)
xform: Map()
val x426 = x6 < 18
val x427 = if (x426) x9 else 17
val x428 = if (x8) x427 else 0
val x429 = Map("val" -> x428)
val x430 = x417 + -901
val x431 = x414 + x430
val x432 = x415 + x431
val x433 = if (x8) x432 else 0
val x434 = Map("val" -> x433)
val x435 = Map("&x" -> x310, "&y" -> x429, "&z" -> x434)
val x436 = if (x8) x282 else -1
val x437 = x417 + x436
val x438 = x414 + x437
val x439 = x415 + x438
val x440 = x417 + x282
val x441 = x414 + x440
val x442 = x415 + x441
val x443 = if (x8) x442 else 900
val x444 = if (x8) x442 else x308
val x445 = Map("val" -> x443)
val x446 = Map("&x" -> x310, "&y" -> x429, "&z" -> x445)
val x447 = Map("&x" -> x0, "&y" -> x2, "&z" -> x445)
val x448 = if (x426) 1 else 0
val x449 = if (x8) x448 else 1
val x450 = if (x426) x6 else 18
val x451 = if (x8) x450 else 1
val x452 = Map("val" -> x451)
val x453 = Map("&x" -> x310, "&y" -> x452, "&z" -> x445)
val x454 = Map("&x" -> x0, "&y" -> x452, "&z" -> x0)
val x455 = if (x8) x6 else 1
val x456 = if (x8) 17 else 0
val x457 = if (x426) x455 else x456
val x458 = if (x426) x6 else 17
val x459 = if (x8) x458 else 1
val x460 = Map("val" -> x459)
val x461 = Map("&x" -> x310, "&y" -> x460, "&z" -> x445)
val x462 = Map("&x" -> x330, "&y" -> x452, "&z" -> x445)
val x463 = Map("&x" -> x330, "&y" -> x429, "&z" -> x445)
val x464 = Map("&x" -> x330, "&y" -> x460, "&z" -> x445)
val x465 = if (x8) x458 else 0
val x466 = Map("val" -> x465)
val x467 = if (x8) x442 else 0
val x468 = Map("val" -> x467)
val x469 = Map("&x" -> x336, "&y" -> x466, "&z" -> x468)
*** done iterate: x425
*** begin iterate: x425
funs:
calls:
subst: Map()
zeros: Map()
xform: Map()
*** done iterate: x425
transformed: x425
sched:
val x2 = Map("val" -> 0)
val x421 = Map("val" -> 17)
val x422 = Map("val" -> 405450)
val x425 = Map("&x" -> x2, "&y" -> x421, "&z" -> x422, "&r" -> x2)
----
