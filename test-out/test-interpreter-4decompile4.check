// constants: scala.collection.Seq$@24bed68d,public final native java.lang.Class java.lang.Object.getClass(),java.lang.ref.ReferenceQueue$Null@6b02bcf5,public abstract java.lang.reflect.Method scala.runtime.MethodCache.find(java.lang.Class),Array(),scala.runtime.ScalaRunTime$@14a8f057,public boolean java.lang.reflect.AccessibleObject.isAccessible(),public void java.lang.reflect.AccessibleObject.setAccessible(boolean) throws java.lang.SecurityException,public abstract scala.runtime.MethodCache scala.runtime.MethodCache.add(java.lang.Class,java.lang.reflect.Method)
class Generated(CONST_0: scala.collection.Seq$,CONST_1: java.lang.reflect.Method,CONST_2: Object /*java.lang.ref.ReferenceQueue$Null*/,CONST_3: java.lang.reflect.Method,CONST_4: Array[java.lang.Class[_]],CONST_5: scala.runtime.ScalaRunTime$,CONST_6: java.lang.reflect.Method,CONST_7: java.lang.reflect.Method,CONST_8: java.lang.reflect.Method) extends (scala.collection.Seq[_]=>scala.collection.Seq[_]){
import sun.misc.Unsafe
val unsafe = { val fld = classOf[Unsafe].getDeclaredField("theUnsafe"); fld.setAccessible(true); fld.get(classOf[Unsafe]).asInstanceOf[Unsafe]; }
type char = Char
def WARN = assert(false, "WARN")
def ERROR = assert(false, "ERROR")
def apply(ARG: scala.collection.Seq[_]): scala.collection.Seq[_] = { object BODY {
  var RES = null.asInstanceOf[scala.collection.Seq[_]]
  val x0 = ARG
  val x1 = unsafe.allocateInstance(Class.forName("lancet.interpreter.TestInterpreter4$$anonfun$test4$1$$anonfun$4$$anonfun$apply$4"))
  val x2 = unsafe.allocateInstance(Class.forName("scala.collection.generic.GenTraversableFactory$GenericCanBuildFrom"))
  unsafe.putObject(x2,16.asInstanceOf[Long], CONST_0.asInstanceOf[Object])
  val x13 = x0.asInstanceOf[Traversable[Object]].map { (x3:Object) =>
    var RES = null.asInstanceOf[Object]
    val x4 = x3.asInstanceOf[lancet.interpreter.TestInterpreter4$Person] // checkCast
    val x5 = unsafe.allocateInstance(Class.forName("lancet.interpreter.TestInterpreter4$$anonfun$test4$1$$anonfun$4$$anonfun$apply$4$$anon$1"))
    val x6 = x4 eq null.asInstanceOf[Null]
    val x8 = if (x6) {
      val x7 = throw new NullPointerException()
      x7
    } else {
      x4
    }
    // unique method: HotSpotMethod<TestInterpreter4$Person.age> TODO: guard
    val x9 = x4 eq null.asInstanceOf[Null]
    val x11 = if (x9) {
      val x10 = throw new NullPointerException()
      x10
    } else {
      x4
    }
    val x12 = unsafe.getInt(x4,16.asInstanceOf[Long])
    unsafe.putInt(x5,16.asInstanceOf[Long], x12)
    (RES = x5) // return to root
    // (no return?)
    RES.asInstanceOf[Boolean]
  }
  val x14 = x13.asInstanceOf[scala.collection.TraversableLike[_,_]] // checkCast
  val x15 = unsafe.allocateInstance(Class.forName("lancet.interpreter.TestInterpreter4$$anonfun$test4$1$$anonfun$4$$anonfun$apply$5"))
  val x16 = unsafe.allocateInstance(Class.forName("scala.collection.generic.GenTraversableFactory$GenericCanBuildFrom"))
  unsafe.putObject(x16,16.asInstanceOf[Long], CONST_0.asInstanceOf[Object])
  val x140 = x14.asInstanceOf[Traversable[Object]].map { (x17:Object) =>
    var RES = null.asInstanceOf[Object]
    val x18 = x17 eq null.asInstanceOf[Null]
    val x20 = if (x18) {
      val x19 = throw new NullPointerException()
      x19
    } else {
      x17
    }
    val x21 = CONST_1.asInstanceOf[java.lang.reflect.Method].invoke(x17).asInstanceOf[Object] // java.lang.Object.getClass
    // WARNING: multiple returns (2) in HotSpotMethod<TestInterpreter4$$anonfun$test4$1$$anonfun$4$$anonfun$apply$5.reflMethod$Method1>
    ;{
      var vPHI_3_8 = null.asInstanceOf[Object]
      var vx1 = null.asInstanceOf[Object]
      var vx15 = null.asInstanceOf[Object]
      var vx16 = null.asInstanceOf[Object]
      var vx17 = null.asInstanceOf[Object]
      var vx2 = null.asInstanceOf[Object]
      val x22 = unsafe.getObjectVolatile(Class.forName("lancet.interpreter.TestInterpreter4$$anonfun$test4$1$$anonfun$4$$anonfun$apply$5").asInstanceOf[Object],208.asInstanceOf[Long])
      val x23 = x22 eq null.asInstanceOf[Null]
      val x25 = if (x23) {
        val x24 = throw new NullPointerException()
        x24
      } else {
        x22
      }
      // unique method: HotSpotMethod<SoftReference.get> TODO: guard
      val x26 = x22 eq null.asInstanceOf[Null]
      val x28 = if (x26) {
        val x27 = throw new NullPointerException()
        x27
      } else {
        x22
      }
      val x29 = x22 eq null.asInstanceOf[Null]
      val x31 = if (x29) {
        val x30 = throw new NullPointerException()
        x30
      } else {
        x22
      }
      val x32 = unsafe.getObject(x22,16.asInstanceOf[Long])
      val x33 = x32 eq null.asInstanceOf[Null]
      if (x33) {
        ;{
        BLOCK_50(x1,x15,x16,x17,x2,x21,x22,x32)}
        ().asInstanceOf[Unit]
      } else {
        val x34 = x22 eq null.asInstanceOf[Null]
        val x36 = if (x34) {
          val x35 = throw new NullPointerException()
          x35
        } else {
          x22
        }
        val x37 = unsafe.getLong(x22,48.asInstanceOf[Long])
        val x38 = unsafe.getLong(Class.forName("java.lang.ref.SoftReference").asInstanceOf[Object],200.asInstanceOf[Long])
        val x39 = x37 < x38
        val x42 = if (x39) {
          -1.asInstanceOf[Int]
        } else {
          val x40 = x37 == x38
          val x41 = if (x40) {
            0.asInstanceOf[Int]
          } else {
            1.asInstanceOf[Int]
          }
          x41
        }
        val x43 = x42 == 0.asInstanceOf[Int]
        if (x43) {
          ;{
          BLOCK_50(x1,x15,x16,x17,x2,x21,x22,x32)}
          ().asInstanceOf[Unit]
        } else {
          val x44 = unsafe.getLong(Class.forName("java.lang.ref.SoftReference").asInstanceOf[Object],200.asInstanceOf[Long])
          val x45 = x22 eq null.asInstanceOf[Null]
          val x47 = if (x45) {
            val x46 = throw new NullPointerException()
            x46
          } else {
            x22
          }
          val x48 = x44.toDouble
          unsafe.putDouble(x22,48.asInstanceOf[Long], x48)
          ;{
          BLOCK_50(x1,x15,x16,x17,x2,x21,x22,x32)}
          ().asInstanceOf[Unit]
        }
        ().asInstanceOf[Unit]
      }
      def BLOCK_50(x1:Object,x15:Object,x16:Object,x17:Object,x2:Object,x21:Object,x22:Object,x32:Object): Unit = {
        val x49 = x32.asInstanceOf[scala.runtime.MethodCache] // checkCast
        val x50 = x49 ne null.asInstanceOf[Null]
        if (x50) {
          ;{// strange lub: x51 -> Some(Top), None
            // strange lub: x52 -> Some(Top), None
            // strange lub: x51 -> None,Some(Top)
            // strange lub: x52 -> None,Some(Top)
          BLOCK_69(x1,x15,x16,x17,x2,x21)}
          ().asInstanceOf[Unit]
        } else {
          val x51 = unsafe.allocateInstance(Class.forName("java.lang.ref.SoftReference"))
          val x52 = unsafe.allocateInstance(Class.forName("scala.runtime.EmptyMethodCache"))
          unsafe.putObject(x51,16.asInstanceOf[Long], x52)
          unsafe.putObject(x51,24.asInstanceOf[Long], CONST_2.asInstanceOf[Object])
          val x53 = unsafe.getLong(Class.forName("java.lang.ref.SoftReference").asInstanceOf[Object],200.asInstanceOf[Long])
          val x54 = x53.toDouble
          unsafe.putDouble(x51,48.asInstanceOf[Long], x54)
          unsafe.putObjectVolatile(Class.forName("lancet.interpreter.TestInterpreter4$$anonfun$test4$1$$anonfun$4$$anonfun$apply$5").asInstanceOf[Object],208.asInstanceOf[Long], x51)
          ;{
          BLOCK_69(x1,x15,x16,x17,x2,x21)}
          ().asInstanceOf[Unit]
        }
      }
      def BLOCK_69(x1:Object,x15:Object,x16:Object,x17:Object,x2:Object,x21:Object): Unit = {
        val x55 = unsafe.getObjectVolatile(Class.forName("lancet.interpreter.TestInterpreter4$$anonfun$test4$1$$anonfun$4$$anonfun$apply$5").asInstanceOf[Object],208.asInstanceOf[Long])
        val x56 = x55 eq null.asInstanceOf[Null]
        val x58 = if (x56) {
          val x57 = throw new NullPointerException()
          x57
        } else {
          x55
        }
        // unique method: HotSpotMethod<SoftReference.get> TODO: guard
        val x59 = x55 eq null.asInstanceOf[Null]
        val x61 = if (x59) {
          val x60 = throw new NullPointerException()
          x60
        } else {
          x55
        }
        val x62 = x55 eq null.asInstanceOf[Null]
        val x64 = if (x62) {
          val x63 = throw new NullPointerException()
          x63
        } else {
          x55
        }
        val x65 = unsafe.getObject(x55,16.asInstanceOf[Long])
        val x66 = x65 eq null.asInstanceOf[Null]
        if (x66) {
          ;{
          BLOCK_75(x1,x15,x16,x17,x2,x21,x55,x65)}
          ().asInstanceOf[Unit]
        } else {
          val x67 = x55 eq null.asInstanceOf[Null]
          val x69 = if (x67) {
            val x68 = throw new NullPointerException()
            x68
          } else {
            x55
          }
          val x70 = unsafe.getLong(x55,48.asInstanceOf[Long])
          val x71 = unsafe.getLong(Class.forName("java.lang.ref.SoftReference").asInstanceOf[Object],200.asInstanceOf[Long])
          val x72 = x70 < x71
          val x75 = if (x72) {
            -1.asInstanceOf[Int]
          } else {
            val x73 = x70 == x71
            val x74 = if (x73) {
              0.asInstanceOf[Int]
            } else {
              1.asInstanceOf[Int]
            }
            x74
          }
          val x76 = x75 == 0.asInstanceOf[Int]
          if (x76) {
            ;{
            BLOCK_75(x1,x15,x16,x17,x2,x21,x55,x65)}
            ().asInstanceOf[Unit]
          } else {
            val x77 = unsafe.getLong(Class.forName("java.lang.ref.SoftReference").asInstanceOf[Object],200.asInstanceOf[Long])
            val x78 = x55 eq null.asInstanceOf[Null]
            val x80 = if (x78) {
              val x79 = throw new NullPointerException()
              x79
            } else {
              x55
            }
            val x81 = x77.toDouble
            unsafe.putDouble(x55,48.asInstanceOf[Long], x81)
            ;{
            BLOCK_75(x1,x15,x16,x17,x2,x21,x55,x65)}
            ().asInstanceOf[Unit]
          }
          ().asInstanceOf[Unit]
        }
        def BLOCK_75(x1:Object,x15:Object,x16:Object,x17:Object,x2:Object,x21:Object,x55:Object,x65:Object): Unit = {
          val x82 = x65.asInstanceOf[scala.runtime.MethodCache] // checkCast
          val x83 = CONST_3.asInstanceOf[java.lang.reflect.Method].invoke(x82.asInstanceOf[AnyRef],x21.asInstanceOf[AnyRef]).asInstanceOf[Object] // scala.runtime.MethodCache.find
          val x84 = x83 ne null.asInstanceOf[Null]
          if (x84) {
            /*R1*/val PHI_3_8 = x83 // LUBC(x88,x83)
            val x92 = null // lub Partial(Map(alloc -> x92, clazz -> Class.forName("java.lang.ref.SoftReference").asInstanceOf[Object], 16 -> x121, 24 -> CONST_2.asInstanceOf[Object])), None
            // strange lub: x92 -> None,Some(Top)
            vPHI_3_8 = PHI_3_8
            vx1 = x1
            vx15 = x15
            vx16 = x16
            vx17 = x17
            vx2 = x2
            ().asInstanceOf[Unit]
          } else {
            val x85 = x21 eq null.asInstanceOf[Null]
            val x87 = if (x85) {
              val x86 = throw new NullPointerException()
              x86
            } else {
              x21
            }
            val x88 = x21.asInstanceOf[Class[_]].getMethod("foo".asInstanceOf[Object].asInstanceOf[String],CONST_4.asInstanceOf[Object].asInstanceOf[Class[_]])
            val x89 = CONST_6.asInstanceOf[java.lang.reflect.Method].invoke(x88).asInstanceOf[Boolean] // java.lang.reflect.AccessibleObject.isAccessible
            val x90 = if (x89) {
              1.asInstanceOf[Int]
            } else {
              0.asInstanceOf[Int]
            }
            val x91 = x90 != 0.asInstanceOf[Int]
            if (x91) {
              ;{
              BLOCK_84(x1,x15,x16,x17,x2,x21,x83,x88)}
              ().asInstanceOf[Unit]
            } else {
              CONST_7.asInstanceOf[java.lang.reflect.Method].invoke(x88.asInstanceOf[AnyRef],true.asInstanceOf[Boolean].asInstanceOf[AnyRef]).asInstanceOf[Unit] // java.lang.reflect.AccessibleObject.setAccessible
              ;{
              BLOCK_84(x1,x15,x16,x17,x2,x21,x83,x88)}
              ().asInstanceOf[Unit]
            }
            def BLOCK_84(x1:Object,x15:Object,x16:Object,x17:Object,x2:Object,x21:Object,x83:Object,x88:Object): Unit = {
              val x92 = unsafe.allocateInstance(Class.forName("java.lang.ref.SoftReference"))
              val x93 = unsafe.getObjectVolatile(Class.forName("lancet.interpreter.TestInterpreter4$$anonfun$test4$1$$anonfun$4$$anonfun$apply$5").asInstanceOf[Object],208.asInstanceOf[Long])
              val x94 = x93 eq null.asInstanceOf[Null]
              val x96 = if (x94) {
                val x95 = throw new NullPointerException()
                x95
              } else {
                x93
              }
              // unique method: HotSpotMethod<SoftReference.get> TODO: guard
              val x97 = x93 eq null.asInstanceOf[Null]
              val x99 = if (x97) {
                val x98 = throw new NullPointerException()
                x98
              } else {
                x93
              }
              val x100 = x93 eq null.asInstanceOf[Null]
              val x102 = if (x100) {
                val x101 = throw new NullPointerException()
                x101
              } else {
                x93
              }
              val x103 = unsafe.getObject(x93,16.asInstanceOf[Long])
              val x104 = x103 eq null.asInstanceOf[Null]
              if (x104) {
                ;{
                BLOCK_91(x1,x103,x15,x16,x17,x2,x21,x88,x92,x93)}
                ().asInstanceOf[Unit]
              } else {
                val x105 = x93 eq null.asInstanceOf[Null]
                val x107 = if (x105) {
                  val x106 = throw new NullPointerException()
                  x106
                } else {
                  x93
                }
                val x108 = unsafe.getLong(x93,48.asInstanceOf[Long])
                val x109 = unsafe.getLong(Class.forName("java.lang.ref.SoftReference").asInstanceOf[Object],200.asInstanceOf[Long])
                val x110 = x108 < x109
                val x113 = if (x110) {
                  -1.asInstanceOf[Int]
                } else {
                  val x111 = x108 == x109
                  val x112 = if (x111) {
                    0.asInstanceOf[Int]
                  } else {
                    1.asInstanceOf[Int]
                  }
                  x112
                }
                val x114 = x113 == 0.asInstanceOf[Int]
                if (x114) {
                  ;{
                  BLOCK_91(x1,x103,x15,x16,x17,x2,x21,x88,x92,x93)}
                  ().asInstanceOf[Unit]
                } else {
                  val x115 = unsafe.getLong(Class.forName("java.lang.ref.SoftReference").asInstanceOf[Object],200.asInstanceOf[Long])
                  val x116 = x93 eq null.asInstanceOf[Null]
                  val x118 = if (x116) {
                    val x117 = throw new NullPointerException()
                    x117
                  } else {
                    x93
                  }
                  val x119 = x115.toDouble
                  unsafe.putDouble(x93,48.asInstanceOf[Long], x119)
                  ;{
                  BLOCK_91(x1,x103,x15,x16,x17,x2,x21,x88,x92,x93)}
                  ().asInstanceOf[Unit]
                }
                ().asInstanceOf[Unit]
              }
              def BLOCK_91(x1:Object,x103:Object,x15:Object,x16:Object,x17:Object,x2:Object,x21:Object,x88:Object,x92:Object,x93:Object): Unit = {
                val x120 = x103.asInstanceOf[scala.runtime.MethodCache] // checkCast
                val x121 = CONST_8.asInstanceOf[java.lang.reflect.Method].invoke(x120.asInstanceOf[AnyRef],x21.asInstanceOf[AnyRef],x88.asInstanceOf[AnyRef]).asInstanceOf[Object] // scala.runtime.MethodCache.add
                unsafe.putObject(x92,16.asInstanceOf[Long], x121)
                unsafe.putObject(x92,24.asInstanceOf[Long], CONST_2.asInstanceOf[Object])
                val x122 = unsafe.getLong(Class.forName("java.lang.ref.SoftReference").asInstanceOf[Object],200.asInstanceOf[Long])
                val x123 = x122.toDouble
                unsafe.putDouble(x92,48.asInstanceOf[Long], x123)
                unsafe.putObjectVolatile(Class.forName("lancet.interpreter.TestInterpreter4$$anonfun$test4$1$$anonfun$4$$anonfun$apply$5").asInstanceOf[Object],208.asInstanceOf[Long], x92)
                /*R0*/val PHI_3_8 = x88 // LUBC(x83,x88)
                // strange lub: x92 -> None,Some(Partial(Map(alloc -> x92, clazz -> Class.forName("java.lang.ref.SoftReference").asInstanceOf[Object], 16 -> x121, 24 -> CONST_2.asInstanceOf[Object])))
                vPHI_3_8 = PHI_3_8
                vx1 = x1
                vx15 = x15
                vx16 = x16
                vx17 = x17
                vx2 = x2
              }
            }
            ().asInstanceOf[Unit]
          }
        }
      }
      ;{
        val PHI_3_8 = vPHI_3_8
        val x1 = vx1
        val x15 = vx15
        val x16 = vx16
        val x17 = vx17
        val x2 = vx2
        val x124 = new Array[java.lang.Object](0.asInstanceOf[Int])
        val x125 = PHI_3_8 eq null.asInstanceOf[Null]
        val x127 = if (x125) {
          val x126 = throw new NullPointerException()
          x126
        } else {
          PHI_3_8
        }
        val x128 = PHI_3_8.asInstanceOf[java.lang.reflect.Method].invoke(x17,x124)
        val x129 = x128.asInstanceOf[java.lang.Integer] // checkCast
        val x130 = x129 ne null.asInstanceOf[Null]
        if (x130) {
          val x131 = x129.asInstanceOf[java.lang.Integer] // checkCast
          val x132 = x131 eq null.asInstanceOf[Null]
          val x134 = if (x132) {
            val x133 = throw new NullPointerException()
            x133
          } else {
            x131
          }
          val x135 = x131 eq null.asInstanceOf[Null]
          val x137 = if (x135) {
            val x136 = throw new NullPointerException()
            x136
          } else {
            x131
          }
          val x138 = unsafe.getInt(x131,16.asInstanceOf[Long])
          ;{val PHI_4_4 = x138 // LUBC(PHI_4_4,x138)
          BLOCK_111(PHI_4_4,x1,x124,x128,x129,x15,x16,x17,x2)}
          ().asInstanceOf[Unit]
        } else {
          ;{val PHI_4_4 = 0.asInstanceOf[Int] // LUBC(PHI_4_4,0.asInstanceOf[Int])
          BLOCK_111(PHI_4_4,x1,x124,x128,x129,x15,x16,x17,x2)}
          ().asInstanceOf[Unit]
        }
        def BLOCK_111(PHI_4_4:Int,x1:Object,x124:Object,x128:Object,x129:Object,x15:Object,x16:Object,x17:Object,x2:Object): Unit = {
          val x139 = Integer.valueOf(PHI_4_4)
          (RES = x139) // return to root
        }
      }}
      // (no return?)
      RES.asInstanceOf[Boolean]
    }
    val x141 = x140.asInstanceOf[scala.collection.Seq[_]] // checkCast
    (RES = x141) // return to root
    // (no return?)

}; BODY.RES }
}

compilation: ok
<decompiled>
