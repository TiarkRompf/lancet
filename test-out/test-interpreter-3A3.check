// constants: <function1>,<function0>
class Generated(CONST_0: lancet.interpreter.TestInterpreter3$$anonfun$testA3$1$$anonfun$3,CONST_1: lancet.interpreter.TestInterpreter3$$anonfun$testA3$1) extends (Int=>Int){
import sun.misc.Unsafe
val unsafe = { val fld = classOf[Unsafe].getDeclaredField("theUnsafe"); fld.setAccessible(true); fld.get(classOf[Unsafe]).asInstanceOf[Unsafe]; }
type char = Char
def WARN = assert(false, "WARN")
def ERROR = assert(false, "ERROR")
def apply(ARG: Int): Int = { object BODY {
  var RES = null.asInstanceOf[Int]
  val x0 = ARG
  val x1 = x0.asInstanceOf[Int]
  val x2 = unsafe.allocateInstance(Class.forName("lancet.interpreter.TestInterpreter3$Bar"))
  val x3 = unsafe.putInt(x2,16.asInstanceOf[Long], 7.asInstanceOf[Int])
  val x4 = 0.asInstanceOf[Int] >= x1
  val x22 = if (x4) {
    val x5 = unsafe.putInt(x2,16.asInstanceOf[Long], 6.asInstanceOf[Int])
    val PHI_3_6 = 1.asInstanceOf[Int] // LUBC(0.asInstanceOf[Int],1.asInstanceOf[Int])
    val LUB_x2_16 = 6 // LUBC(7,6)
    def loop11(PHI_3_6:Int)(LUB_x2_16:Int): Unit = {
    val x6 = 0.asInstanceOf[Int] >= LUB_x2_16
    val x11 = if (x6) {
      val x7 = (RES = PHI_3_6) // return to root
      x7
    } else {
      val x8 = -1.asInstanceOf[Int] + LUB_x2_16
      val x9 = unsafe.putInt(x2,16.asInstanceOf[Long], x8)
      val x10 = 1.asInstanceOf[Int] + PHI_3_6
      ;{val PHI_3_6 = x10 // LUBC(0.asInstanceOf[Int],x10)
      val LUB_x2_16 = x8 // Alias(Some(7.asInstanceOf[Int]),Some(x8))
      loop11(PHI_3_6)(LUB_x2_16)}
    }
    x11
    }
    val x12 = loop11(PHI_3_6)(LUB_x2_16)
    x12
  } else {
    val x13 = unsafe.putInt(x2,16.asInstanceOf[Long], 9.asInstanceOf[Int])
    val x14 = unsafe.putInt(x2,16.asInstanceOf[Long], 8.asInstanceOf[Int])
    val PHI_3_6 = 1.asInstanceOf[Int] // LUBC(0.asInstanceOf[Int],1.asInstanceOf[Int])
    val LUB_x2_16 = 8 // LUBC(9,8)
    def loop11(PHI_3_6:Int)(LUB_x2_16:Int): Unit = {
    val x15 = 0.asInstanceOf[Int] >= LUB_x2_16
    val x20 = if (x15) {
      val x16 = (RES = PHI_3_6) // return to root
      x16
    } else {
      val x17 = -1.asInstanceOf[Int] + LUB_x2_16
      val x18 = unsafe.putInt(x2,16.asInstanceOf[Long], x17)
      val x19 = 1.asInstanceOf[Int] + PHI_3_6
      ;{val PHI_3_6 = x19 // LUBC(0.asInstanceOf[Int],x19)
      val LUB_x2_16 = x17 // Alias(Some(9.asInstanceOf[Int]),Some(x17))
      loop11(PHI_3_6)(LUB_x2_16)}
    }
    x20
    }
    val x21 = loop11(PHI_3_6)(LUB_x2_16)
    x21
  }
}; BODY.RES }
}

compilation: ok
9
