prog: {
  Assign(i,Const(0))
  Assign(z,New(A))
  Assign(x,Ref(z))
  While(Less(Ref(i),Const(100)),{
    Assign(y,New(B))
    Put(Ref(y),Const(head),Ref(i))
    Put(Ref(y),Const(tail),Ref(x))
    Assign(x,Ref(y))
    Assign(i,Plus(Ref(i),Const(1)))
  })
  Assign(s,Const(0))
  Assign(i,Get(Ref(x),Const(head)))
  Assign(x,Get(Ref(x),Const(tail)))
  Assign(s,Plus(Ref(s),Ref(i)))
}
val x0 = Map()
val x1 = Map("val" -> 0)
val x2 = Map("&i" -> x1)
val x3 = Map(1 -> Map())
val x4 = Map("&i" -> x1, "A" -> x3)
val x5 = Map("val" -> (A,1))
val x6 = Map("&i" -> x1, "&z" -> x5)
val x7 = Map("&i" -> x1, "&z" -> x5, "&x" -> x5)
val x10 = (1,x9)
starting spec loop with x7
val x11 = ("B",x10)
val x12 = x0 + (x9 -> Map())
val x13 = Map(1 -> x12)
val x14 = Map("&i" -> x1, "&z" -> x5, "&x" -> x5, "B" -> x13)
val x15 = Map("val" -> x11)
val x16 = Map("&i" -> x1, "&z" -> x5, "&x" -> x5, "&y" -> x15)
val x17 = "undefined"(x10)
val x18 = x17 + ("head" -> 0)
val x19 = x0 + (x9 -> x18)
val x20 = Map(1 -> x19)
val x21 = Map("&x" -> x5, "&y" -> x15, "B" -> x20, "&z" -> x5, "&i" -> x1)
val x22 = x18 + ("tail" -> (A,1))
val x23 = x0 + (x9 -> x22)
val x24 = Map(1 -> x23)
val x25 = Map("&x" -> x5, "&y" -> x15, "B" -> x24, "&z" -> x5, "&i" -> x1)
val x26 = Map("&x" -> x15, "&y" -> x15, "B" -> x24, "&z" -> x5, "&i" -> x1)
val x27 = Map("val" -> 1)
val x28 = Map("&x" -> x15, "&y" -> x15, "B" -> x24, "&z" -> x5, "&i" -> x27)
lub(x7, x28) = ?
lub_x8(x7,x7,x28)
lub_x8_&x(x5,x5,x15)
lub_x8_&x_val((A,1),(A,1),x11)
(A,1)
(A,1)
("B",(1,x9))
hit pair -- assume only 0 case differs (loop peeling)
val x29 = x9 + -1
val x30 = (1,x29)
val x31 = ("B",x30)
val x32 = 0 < x9
val x33 = if (x32) x31 else (A,1)
val x34 = if (x32) x11 else (A,1)
Set(("val",(x33,x34)))
val x35 = Map("val" -> x33)
val x36 = Map("val" -> x34)
lub_x8_&y("undefined","undefined",x15)
val x37 = "undefined" * -1
val x38 = x15 + x37
"undefined"
Map("val" -> ("B",(1,x9)))
Map("val" -> ("B",(1,x9))) + "undefined" * -1
poly: List()
giving up: deriv List(); recursive fun x8_&y
val x39 = x8_&y(x29)
val x40 = if (x32) x39 else "undefined"
val x41 = x8_&y(x9)
val x42 = if (x32) x41 else "undefined"
lub_x8_B("undefined","undefined",x24)
val x43 = x24 + x37
"undefined"
Map(1 -> Map() + (x9 -> "undefined"((1,x9)) + ("head" -> 0) + ("tail" -> (A,1))))
Map(1 -> Map() + (x9 -> "undefined"((1,x9)) + ("head" -> 0) + ("tail" -> (A,1)))) + "undefined" * -1
poly: List()
giving up: deriv List(); recursive fun x8_B
val x44 = x8_B(x29)
val x45 = if (x32) x44 else "undefined"
val x46 = x8_B(x9)
val x47 = if (x32) x46 else "undefined"
lub_x8_&z(x5,x5,x5)
lub_x8_&i(x1,x1,x27)
lub_x8_&i_val(0,0,1)
0
1
1
confirmed iterative loop, d = 1
Set(("val",(x29,x9)))
val x48 = Map("val" -> x29)
val x49 = Map("val" -> x9)
Set(("&z",(x5,x5)), ("&x",(x35,x36)), ("B",(x45,x47)), ("&y",(x40,x42)), ("&i",(x48,x49)))
val x50 = Map("&x" -> x35, "&y" -> x40, "B" -> x45, "&z" -> x5, "&i" -> x48)
val x51 = Map("&x" -> x36, "&y" -> x42, "B" -> x47, "&z" -> x5, "&i" -> x49)
lub(x7, x28) = x50
starting spec loop with x50
val x52 = x9 < 101
val x53 = x44 + (x10 -> Map())
val x54 = if (x32) x53 else x13
val x55 = Map("&x" -> x35, "&y" -> x40, "B" -> x54, "&z" -> x5, "&i" -> x48)
val x56 = Map("&x" -> x35, "&y" -> x15, "B" -> x45, "&z" -> x5, "&i" -> x48)
val x57 = x44(x10)
val x58 = if (x32) x57 else x17
val x59 = x57 + ("head" -> x29)
val x60 = x17 + ("head" -> x29)
val x61 = if (x32) x59 else x60
val x62 = x44 + (x10 -> x61)
val x63 = x0 + (x9 -> x61)
val x64 = Map(1 -> x63)
val x65 = x44 + (x10 -> x59)
val x66 = x0 + (x9 -> x60)
val x67 = Map(1 -> x66)
val x68 = if (x32) x65 else x67
val x69 = Map("&x" -> x35, "&y" -> x15, "B" -> x68, "&z" -> x5, "&i" -> x48)
val x70 = x59 + ("tail" -> x33)
val x71 = x60 + ("tail" -> x33)
val x72 = x59 + ("tail" -> x31)
val x73 = x60 + ("tail" -> (A,1))
val x74 = if (x32) x72 else x73
val x75 = x44 + (x10 -> x74)
val x76 = x0 + (x9 -> x74)
val x77 = Map(1 -> x76)
val x78 = x44 + (x10 -> x72)
val x79 = x0 + (x9 -> x73)
val x80 = Map(1 -> x79)
val x81 = if (x32) x78 else x80
val x82 = Map("&x" -> x35, "&y" -> x15, "B" -> x81, "&z" -> x5, "&i" -> x48)
val x83 = Map("&x" -> x15, "&y" -> x15, "B" -> x81, "&z" -> x5, "&i" -> x48)
val x84 = Map("&x" -> x15, "&y" -> x15, "B" -> x81, "&z" -> x5, "&i" -> x49)
lub(x7, x84) = ?
lub_x8(x7,x50,x84)
lub_x8_&x(x5,x35,x15)
lub_x8_&x_val((A,1),x33,x11)
(A,1)
if (0 < x9) ("B",(1,x9 + -1)) else (A,1)
("B",(1,x9))
hit pair -- assume only 0 case differs (loop peeling)
Set(("val",(x33,x34)))
lub_x8_&y("undefined",x40,x15)
val x85 = x39 * -1
val x86 = if (x32) x85 else x37
val x87 = x15 + x86
if (0 < x9) x8_&y(x9 + -1) else "undefined"
Map("val" -> ("B",(1,x9)))
Map("val" -> ("B",(1,x9))) + if (0 < x9) x8_&y(x9 + -1) * -1 else "undefined" * -1
poly: List()
giving up: deriv List(); recursive fun x8_&y
lub_x8_B("undefined",x45,x81)
val x88 = x44 * -1
val x89 = if (x32) x88 else x37
val x90 = x78 + x89
val x91 = x80 + x89
val x92 = x78 + x88
val x93 = x80 + x37
val x94 = if (x32) x92 else x93
if (0 < x9) x8_B(x9 + -1) else "undefined"
if (0 < x9) x8_B(x9 + -1) + ((1,x9) -> x8_B(x9 + -1)((1,x9)) + ("head" -> x9 + -1) + ("tail" -> ("B",(1,x9 + -1)))) else Map(1 -> Map() + (x9 -> "undefined"((1,x9)) + ("head" -> x9 + -1) + ("tail" -> (A,1))))
if (0 < x9) x8_B(x9 + -1) + ((1,x9) -> x8_B(x9 + -1)((1,x9)) + ("head" -> x9 + -1) + ("tail" -> ("B",(1,x9 + -1)))) + x8_B(x9 + -1) * -1 else Map(1 -> Map() + (x9 -> "undefined"((1,x9)) + ("head" -> x9 + -1) + ("tail" -> (A,1)))) + "undefined" * -1
poly: List()
giving up: deriv List(); recursive fun x8_B
lub_x8_&z(x5,x5,x5)
lub_x8_&i(x1,x48,x49)
lub_x8_&i_val(0,x29,x9)
val x95 = x9 * -1
val x96 = x95 + 1
x9 + -1
x9
1
confirmed iterative loop, d = 1
Set(("val",(x29,x9)))
Set(("&z",(x5,x5)), ("&x",(x35,x36)), ("B",(x45,x47)), ("&y",(x40,x42)), ("&i",(x48,x49)))
lub(x7, x84) = x50
val x8_&x_val = { x9 => x11 }
val x8_&y = { x9 => x15 }
val x8_B = { x9 => x81 }
val x8_&i_val = { x9 => x9 }
val x97 = Map("&x" -> x15, "&y" -> x15, "B" -> x46, "&z" -> x5, "&i" -> x49)
val x8 = { x9 => x97 }
fixindex: 100
val x98 = Map("val" -> (B,(1,100)))
val x99 = x8_B(100)
val x100 = Map("val" -> 100)
val x101 = Map("&x" -> x98, "&y" -> x98, "B" -> x99, "&z" -> x5, "&i" -> x100)
*** after loop x101 ***
val x102 = Map("&x" -> x98, "&s" -> x1, "&y" -> x98, "B" -> x99, "&z" -> x5, "&i" -> x100)
val x103 = x99((1,100))
val x104 = x103("head")
val x105 = Map("val" -> x104)
val x106 = Map("&x" -> x98, "&s" -> x1, "&y" -> x98, "B" -> x99, "&z" -> x5, "&i" -> x105)
val x107 = x103("tail")
val x108 = Map("val" -> x107)
val x109 = Map("&x" -> x108, "&s" -> x1, "&y" -> x98, "B" -> x99, "&z" -> x5, "&i" -> x105)
val x110 = Map("&x" -> x108, "&s" -> x105, "&y" -> x98, "B" -> x99, "&z" -> x5, "&i" -> x105)
res: ()
store: x110
transformed: x110
sched:
val x29 = x9 + -1
val x10 = (1,x9)
val x17 = "undefined"(x10)
val x60 = x17 + ("head" -> x29)
val x73 = x60 + ("tail" -> (A,1))
val x0 = Map()
val x79 = x0 + (x9 -> x73)
val x80 = Map(1 -> x79)
val x30 = (1,x29)
val x31 = ("B",x30)
val x32 = 0 < x9
val x44 = x8_B(x29)
val x57 = x44(x10)
val x59 = x57 + ("head" -> x29)
val x72 = x59 + ("tail" -> x31)
val x78 = x44 + (x10 -> x72)
val x81 = if (x32) x78 else x80
val x8_B = { x9 => x81 }
val x99 = x8_B(100)
val x103 = x99((1,100))
val x107 = x103("tail")
val x108 = Map("val" -> x107)
val x104 = x103("head")
val x105 = Map("val" -> x104)
val x98 = Map("val" -> (B,(1,100)))
val x5 = Map("val" -> (A,1))
val x110 = Map("&x" -> x108, "&s" -> x105, "&y" -> x98, "B" -> x99, "&z" -> x5, "&i" -> x105)
term:
val x8_B = { x9 => if (0 < x9) x8_B(x9 + -1) + ((1,x9) -> x8_B(x9 + -1)((1,x9)) + ("head" -> x9 + -1) + ("tail" -> ("B",(1,x9 + -1)))) else Map(1 -> Map() + (x9 -> "undefined"((1,x9)) + ("head" -> x9 + -1) + ("tail" -> (A,1)))) }
Map("&i" -> Map("val" -> x8_B(100)((1,100))("head")), "B" -> x8_B(100), "&s" -> Map("val" -> x8_B(100)((1,100))("head")), "&x" -> Map("val" -> x8_B(100)((1,100))("tail")), "&z" -> Map("val" -> (A,1)), "&y" -> Map("val" -> (B,(1,100))))
----
